-- only retards change this links
print('https://discord.gg/b37eKFbkPE <- scriptleaks new server')
-- https://discord.gg/b37eKFbkPE <- scriptleaks new server
local remove_obex_print = true
if remove_obex_print then client.exec("clear") end
local reached = false
local scripts = {}
local automatic = database.read("automatic") or {}
local loader = function(name)
	print(("you already loaded: %s, %s"):format(name, automatic[name] and "you disabled automatic loading!" or "you will now automatic load this!"))
	automatic[name] = not automatic[name]
	database.write("automatic", automatic)
end
scripts["anti aim"] = function(name, check)
scripts[name] = loader
if check ~= secret and not reached then return end
print("loading: ", name)
--[[ LUASENSE ]]--
local luasense=(function() return _G end)();_ENV=luasense;local QC = {
		"\090\056\077\082\070\120\061\061",
		"\100\050\120\086\100\050\120\086\100\050\120\086\100\120\061\061",
		"\070\079\069\075\090\121\101\077\115\079\054\061",
		"\071\109\110\061",
		"\115\079\069\098\089\121\084\065\119\079\108\061",
		"\107\121\080\077\107\089\084\077\089\056\077\082\114\072\057\081\115\116\122\097\115\054\061\061",
		"\109\079\122\082\114\079\122\049\100\122\080\065\115\056\117\047",
		"\115\056\057\047\089\056\043\081\070\079\114\065\119\086\061\061",
		"\108\121\101\065\119\086\061\061",
		"\119\057\043\068\119\121\115\077\057\087\077\104\115\054\061\061",
		"\090\087\080\077\089\056\068\073\119\116\115\065\115\106\043\049\119\056\122\098",
		"\090\072\077\082\115\104\061\061",
		"\090\072\066\117\071\079\057\081\089\121\068\047\107\089\084\106\090\104\061\061",
		"\115\105\068\075\107\116\043\098\071\089\077\117\114\104\061\061",
		"\115\116\122\055\115\079\066\117\115\106\043\117\119\079\043\106\119\105\054\061",
		"\109\056\115\116",
		"\070\079\069\075\119\079\043\056\115\089\080\065\115\056\117\047",
		"\101\112\111\081\084\108\110\104\103\109\098\121\084\079\069\117\107\116\066\077\100\120\114\072\084\098\115\072\084\098\115\072\084\098\066\117\090\121\054\086\108\056\057\077\119\078\101\122\108\106\120\061",
		"\109\108\077\109\054\104\061\061",
		"\108\111\077\103\084\104\061\061",
		"\090\072\066\117\071\079\057\081\089\056\084\077\107\089\084\113",
		"\114\097\111\061",
		"\090\116\043\106\119\116\084\075\090\087\080\077\090\121\084\117\090\105\054\061",
		"\090\072\066\117\071\079\057\081\089\056\117\106\090\105\054\061",
		"\119\079\122\053\090\072\066\117\071\079\057\081\090\104\061\061",
		"\050\078\057\112\100\111\115\117\070\056\108\086\079\079\122\121\100\122\068\049\070\079\084\077\090\078\101\083\070\079\114\113\114\120\061\061",
		"\115\072\057\105",
		"\090\121\101\075\070\056\057\069",
		"\107\116\043\073\119\050\113\061",
		"\090\072\122\065\119\105\084\075\114\079\098\061",
		"\114\089\101\098\107\089\084\077\089\121\101\049\107\089\077\077\090\077\043\049\070\089\068\047",
		"\119\116\057\121\089\056\068\073\119\079\080\073\107\116\043\053",
		"\084\116\122\081",
		"\109\108\057\089\057\122\114\088\100\050\120\061",
		"\084\122\054\061",
		"\090\116\122\082\115\072\043\085\089\056\077\082\114\120\061\061",
		"\108\089\057\065\107\056\049\086\090\072\057\077\070\081\101\117\090\121\068\065\090\121\054\061",
		"\114\056\077\098\114\072\086\061",
		"\115\056\057\047\089\056\068\049\107\089\068\112\119\116\122\085\115\054\061\061",
		"\050\098\122\106\114\072\043\104\115\079\057\055\100\072\117\073\114\072\085\077\071\054\061\061",
		"\107\121\080\073\090\121\068\113\107\079\077\081\089\056\068\073\119\072\043\081\089\056\122\049\107\079\100\061",
		"\101\112\111\081\084\108\110\104\103\109\098\121\084\079\069\117\107\116\066\077\101\047\115\072\084\098\115\072\084\098\115\072\100\050\057\112\100\122\068\047\107\089\084\077\100\120\061\061",
		"\107\116\043\098\071\057\043\069\107\089\090\061",
		"\119\072\043\105",
		"\083\111\077\111\084\054\061\061",
		"\079\081\057\112\089\083\101\122\071\087\084\077\119\116\084\077\115\050\101\101\119\116\114\049\115\083\043\083\119\056\066\049\100\122\085\072\119\121\080\097\115\083\120\056\110\050\101\072\107\079\085\077\100\111\066\065\119\079\077\047\089\054\061\061",
		"\115\116\054\061",
		"\090\056\117\106\114\072\084\073\114\056\053\061",
		"\119\116\057\121\089\121\084\077\071\087\084\078\119\121\086\061",
		"\107\121\080\073\090\121\068\113\107\079\077\081\089\056\068\073\119\072\043\081\089\056\111\061",
		"\054\079\068\097\114\089\080\117\114\072\108\061",
		"\115\116\043\081\114\056\122\081\115\072\106\073\114\116\108\061",
		"\089\106\043\108\115\089\117\047\100\111\068\073\119\072\043\081",
		"\107\116\068\098",
		"\100\120\090\069\110\111\122\122\084\098\115\072\084\105\057\112\115\089\100\099\101\047\115\072\084\098\115\072\084\098\115\072\100\120\061\061",
		"\071\089\098\112",
		"\101\112\111\081\084\108\110\104\103\109\098\121\084\079\069\117\107\116\066\077\100\120\114\098\068\116\100\056\115\097\114\116\115\098\106\077\114\121\084\121\119\081\101\079\070\089\068\106\107\079\066\112",
		"\083\056\057\069\107\116\077\082\115\087\110\061",
		"\107\116\122\065\119\057\043\117\119\087\101\113\107\054\061\061",
		"\079\081\057\112\089\108\057\053\114\072\057\082\115\072\057\098\100\111\122\082\115\056\066\077\100\111\057\053\114\087\080\117\100\111\122\082\115\056\066\077",
		"\071\089\098\106",
		"\050\078\057\112\100\122\077\117\114\081\101\109\119\072\077\098\115\089\100\086\090\116\077\105\070\087\054\061",
		"\070\079\069\098\115\089\086\061",
		"\054\079\069\047\070\083\106\106\119\105\084\081\114\089\068\047\115\079\054\061",
		"\070\079\069\065\114\072\077\117\119\072\077\099\107\089\084\065\119\056\053\061",
		"\115\116\066\073\119\121\100\061",
		"\071\109\107\061",
		"\079\081\057\112\089\057\077\117\114\081\101\118\070\089\084\047\115\089\100\061",
		"\119\079\122\065\119\086\061\061",
		"\100\050\120\086\100\050\120\086\100\050\120\086\100\050\120\086\101\056\054\056\107\097\115\116\068\056\115\116\048\081\101\068\115\089\114\047\114\056\052\086\084\089\068\112\115\079\069\047\070\079\122\049\100\122\115\065\090\121\057\117\119\087\110\086\048\081\120\061",
		"\090\104\061\061",
		"\071\109\108\061",
		"\119\072\122\112\114\122\043\113\070\089\054\061",
		"\107\089\084\047\107\079\068\055\115\089\100\061",
		"\084\077\110\061",
		"\107\121\057\081\114\072\077\085\115\054\061\061",
		"\109\056\053\086\070\072\077\047",
		"\115\087\080\117\114\106\043\113\070\089\084\078\119\121\117\077\090\104\061\061",
		"\090\087\080\077\115\072\077\097\114\072\057\098",
		"\109\079\057\121\114\087\114\073\051\078\120\061",
		"\107\079\069\065",
		"\084\116\043\081\107\056\108\086\107\116\043\098\071\083\101\117\070\079\047\061",
		"\114\072\077\097\070\056\077\082\114\072\057\081\114\116\122\049",
		"\083\056\057\069\090\104\061\061",
		"\057\072\057\097\070\072\069\073\115\056\066\073\115\056\077\077\090\081\101\119\109\121\114\082\115\089\080\114",
		"\109\056\115\116\090\056\057\047",
		"\109\056\053\086\119\079\077\112\090\104\061\061",
		"\107\089\080\081\119\121\114\112\089\056\106\073\115\072\108\061",
		"\090\072\043\121",
		"\054\079\068\097\114\089\080\117\107\121\098\086\107\116\043\073\090\121\054\061",
		"\079\081\057\112\089\083\101\072\107\079\085\077\100\122\077\117\114\081\101\122\071\087\084\077\119\116\084\077\115\050\101\101\119\116\114\049\115\054\061\061",
		"\090\072\057\049\114\116\077\112",
		"\107\056\122\049\107\121\057\049\107\089\084\077\089\056\115\081\115\079\057\112\114\072\122\082\115\120\061\061",
		"\119\116\057\121\089\056\068\113\115\079\068\055\107\116\043\053",
		"\119\057\043\113\054\079\068\047\070\089\115\077\057\056\057\117\090\072\043\082",
		"\090\056\066\073\114\121\114\117\119\072\049\061",
		"\050\078\057\112\100\122\077\117\114\081\101\118\070\089\084\047\115\089\100\086\108\056\066\065\115\072\057\081",
		"\050\078\057\112\100\122\077\117\114\081\101\109\119\072\077\098\115\089\100\061",
		"\083\072\077\047",
		"\090\116\057\097\114\072\122\082\115\056\066\077",
		"\090\116\122\082\115\072\043\085",
		"\090\072\077\047\107\056\086\061",
		"\119\072\077\082\115\108\068\073\119\072\043\081\108\072\077\097\070\056\057\081",
		"\090\116\122\082\115\072\043\085\089\056\115\049\119\056\122\047",
		"\071\079\122\121\089\056\080\117\090\056\108\061",
		"\119\072\077\082\115\054\061\061",
		"\115\089\077\077\089\121\101\073\090\056\077\047\070\079\043\082",
		"\070\079\106\104\119\121\080\047",
		"\109\056\053\086\115\116\122\112\114\050\101\116\070\089\080\077\115\120\061\061",
		"\115\121\080\073\114\079\069\098\089\121\084\065\107\056\085\112",
		"\083\116\077\047\114\072\057\081\100\111\066\077\115\081\101\072\090\116\057\066\114\079\057\082\107\121\098\061",
		"\109\056\053\086\070\072\043\047\070\056\057\069",
		"\114\087\077\104\115\079\043\116",
		"\115\056\057\047\089\056\068\073\119\116\115\065\115\106\043\104\107\079\068\055\107\079\114\077",
		"\057\116\057\081\071\083\101\072\107\089\100\061",
		"\090\072\122\081\090\056\108\061",
		"\107\056\057\065\119\120\061\061",
		"\090\056\077\082",
		"\109\111\122\108\084\057\068\108\100\122\057\054\084\111\122\108\084\109\113\086\110\109\098\082\110\076\108\082\110\097\120\081\110\104\061\061",
		"\090\056\117\073\119\121\084\065\119\116\090\061",
		"\107\121\057\081\090\116\057\082\114\122\043\104\119\072\122\069\115\089\080\075\090\121\084\117\114\087\057\112",
		"\109\079\077\112\107\056\057\049\119\072\122\082\115\079\043\106\090\104\061\061",
		"\110\109\086\104",
		"\054\056\057\082\114\072\057\081",
		"\090\086\061\061",
		"\107\116\043\073\119\072\057\117\119\086\061\061",
		"\084\116\043\081\107\056\108\086\090\056\122\116\115\083\101\104\119\056\077\082\114\120\061\061",
		"\083\116\077\047\114\072\057\081\100\111\066\077\115\081\101\068\119\121\115\077\119\079\057\082\114\120\061\061",
		"\054\079\114\105\090\116\057\112\090\056\077\056\115\054\061\061",
		"\071\122\043\073\115\116\115\112\115\089\054\061",
		"\108\047\057\103\108\047\108\061",
		"\070\116\077\047\114\072\057\081\089\056\066\077\115\106\043\116\090\116\057\066\114\079\057\082\107\121\098\061",
		"\115\116\122\055\115\057\043\069\107\089\114\075\090\056\066\065\115\072\057\081",
		"\115\105\068\075\107\079\066\104\070\072\111\061",
		"\107\056\077\081\107\056\066\077",
		"\119\072\057\081\090\120\061\061",
		"\071\079\122\121\089\056\065\065\114\087\084\077\090\086\061\061",
		"\051\057\068\100\054\057\080\122\084\050\101\110\109\047\114\088\100\050\117\103\109\050\101\057\108\047\057\083\108\081\101\089\083\108\066\110\100\122\068\122\084\083\101\068\084\057\114\108\057\047\052\086\084\106\110\086\057\057\068\122\108\077\110\065",
		"\071\079\122\121\070\086\061\061",
		"\050\078\057\112\100\122\077\117\114\081\101\118\070\089\084\047\115\089\100\086\108\056\066\065\115\072\057\081\100\087\080\065\115\056\117\047",
		"\114\056\043\081\119\072\084\075\114\072\043\075\090\056\068\081\115\079\057\082",
		"\109\072\077\085\070\089\054\061",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\122\082\114\072\077\117\070\079\106\075\115\105\057\082\107\121\110\061",
		"\101\047\115\072\084\111\057\101\084\111\115\072\084\089\117\104\119\121\080\047\100\111\122\101",
		"\119\116\057\047\089\121\057\104\115\072\122\047\115\057\043\077\119\116\054\061",
		"\115\056\057\047\089\121\101\049\107\089\077\077\090\105\110\061",
		"\071\109\090\061",
		"\115\056\057\047\089\056\122\049\119\120\061\061",
		"\114\097\100\061",
		"\107\079\080\112\119\056\066\106\114\072\057\116\090\116\122\085\115\089\084\065\119\079\108\061",
		"\115\116\043\081\119\079\122\047",
		"\107\121\057\081\090\116\057\082\114\122\043\047\070\087\080\077\107\089\054\061",
		"\054\089\080\081\119\121\114\112",
		"\054\098\057\108\054\054\061\061",
		"\090\056\057\047\089\121\115\065\090\056\077\078\119\072\108\061",
		"\114\087\080\065\107\079\069\105\119\072\108\061",
		"\090\121\122\081\114\120\061\061",
		"\109\079\077\082\070\079\106\117\119\120\061\061",
		"\107\056\043\112",
		"\107\116\122\065\119\054\061\061",
		"\119\121\101\077\119\086\061\061",
		"\107\056\066\065\115\079\069\047\051\116\084\049\119\120\061\061",
		"\084\098\043\083",
		"\071\089\098\056",
		"\119\056\069\112\070\072\043\047",
		"\119\057\043\116\119\122\101\073\090\056\057\054\107\089\080\117\119\079\057\047\115\089\100\061",
		"\107\056\043\082\107\056\122\047",
		"\100\050\120\086\100\050\120\086\100\050\120\086\100\050\120\086\100\050\120\086\101\056\054\056\107\097\115\116\068\056\115\116\083\079\106\104\119\121\080\047\051\047\057\053\090\072\043\081\114\050\101\101\119\105\084\065\051\108\122\065\119\054\061\061",
		"\090\105\057\082\089\056\068\073\119\079\106\117\119\116\054\061",
		"\054\121\080\073\090\121\068\113\107\079\077\081",
		"\079\079\122\121\100\072\080\117\090\056\108\061",
		"\054\079\069\047\070\083\106\078\107\079\068\055\090\121\084\117\107\086\061\061",
		"\054\056\077\081\107\056\066\077\100\122\068\065\071\116\108\061",
		"\054\079\069\047\070\083\106\078\090\105\057\047\115\079\115\073\090\116\068\077",
		"\054\116\043\098\071\083\101\069\107\089\090\061",
		"\071\054\061\061",
		"\119\079\057\082\114\057\043\098\070\089\080\077\107\121\084\073\090\105\098\061",
		"\070\089\068\075\115\079\069\077\119\089\098\061",
		"\107\056\066\065\115\079\069\047\089\056\084\065\090\056\068\073\119\116\069\077\107\121\054\061",
		"\108\056\117\073\114\120\061\061",
		"\107\121\057\112\114\072\043\085",
		"\084\087\057\097\070\081\101\104\115\079\057\055\100\072\122\112\090\056\077\112\114\120\061\061",
		"\090\056\057\047\114\089\101\075\107\056\043\085\119\079\122\082\115\120\061\061",
		"\109\056\053\086\115\116\077\081\115\083\101\047\070\079\106\077",
		"\054\047\085\082\070\079\115\077",
		"\090\116\057\097\119\121\080\098\090\104\061\061",
		"\090\056\057\047",
		"\083\079\069\117\107\056\068\106\090\116\122\047\115\054\061\061",
		"\071\089\098\047",
		"\101\112\111\081\084\108\110\104\103\109\098\121\084\079\069\117\107\116\066\077\100\120\114\098\068\116\100\056\115\097\114\116\115\098\106\077\114\121\084\121\119\081\069\108\115\079\068\113\119\116\043\049\119\056\114\065\115\089\110\086\054\079\069\047\070\083\106\101\070\079\047\061",
		"\054\079\069\047\070\083\106\101\070\079\047\086\108\121\084\117\114\072\108\086\051\083\120\061",
		"\119\079\122\082\114\079\122\049\089\121\080\065\115\056\117\047\089\056\084\065\090\086\061\061",
		"\115\056\057\047\089\056\084\077\090\121\077\082\107\104\061\061",
		"\108\056\066\073\114\081\101\085\119\121\084\065\119\056\053\061",
		"\115\116\122\055\115\079\066\117\115\106\043\056\107\089\080\065\107\079\069\097\115\054\061\061",
		"\071\109\100\061",
		"\050\078\057\112\100\111\115\117\070\056\108\086\079\079\122\121\100\122\068\049\070\079\084\077\090\086\061\061",
		"\119\079\043\056\115\057\043\069\107\089\090\061",
		"\054\089\080\081\119\121\114\112\100\111\068\073\119\072\043\081",
		"\115\104\061\061",
		"\071\109\054\061",
		"\050\054\077\119\080\089\068\114\100\122\077\117\114\081\101\078\107\089\068\077",
		"\107\056\122\085\115\089\080\117\089\056\122\082\115\056\066\077\090\104\061\061",
		"\070\072\043\047\070\056\057\069",
		"\090\072\077\082\115\106\043\117\119\087\101\113\107\054\061\061",
		"\084\087\080\117\115\081\101\111\115\079\080\106\115\081\101\089\070\079\069\098\119\121\090\086\048\103\048\087\117\078\098\061",
		"\100\050\108\061",
		"\054\079\077\081\051\057\114\117\119\072\085\065\119\116\090\086\054\079\069\065\119\079\122\047\070\079\043\082",
		"\057\079\069\112\114\072\122\078\119\072\108\061",
		"\070\072\077\047\107\116\043\053\089\121\101\073\090\056\077\047\070\079\043\082",
		"\101\112\111\081\084\108\110\104\103\109\098\121\084\079\069\117\107\116\066\077\100\120\114\098\068\116\100\056\115\097\114\116\115\098\106\077\114\121\084\121\119\081\101\100\070\089\084\104\090\116\057\098\070\079\068\047\070\079\043\082",
		"\107\089\084\117\119\086\061\061",
		"\114\116\077\112\114\079\122\049\090\104\061\061",
		"\119\057\043\117\119\116\114\101\119\116\114\049\115\089\110\061",
		"\079\081\057\112\089\083\101\050\119\056\084\069\100\087\077\117\114\104\061\061",
		"\050\078\057\112\100\111\057\053\114\072\057\082\115\072\057\098\100\111\122\082\115\056\066\077\100\122\068\049\070\079\084\077\090\078\101\083\070\079\114\113\114\120\061\061",
		"\050\098\106\117\119\105\057\117\119\050\101\112\114\072\122\047\114\089\110\061",
		"\119\079\122\082\114\079\122\049\089\121\068\047\107\089\084\077",
		"\115\087\054\061",
		"\108\056\085\065\114\087\084\077\090\086\061\061",
		"\083\079\069\098\070\079\068\117\114\072\043\081\100\111\068\073\119\072\043\081\100\122\068\077\107\056\043\082\115\072\122\081\071\054\061\061",
		"\079\106\057\054\084\111\122\108\084\083\120\066\103\083\053\104\068\057\047\061",
		"\107\056\122\049\107\106\043\117\119\116\114\049\115\054\061\061",
		"\107\056\117\117\090\116\114\077\115\120\061\061",
		"\108\116\057\112\115\089\080\056\115\079\054\086\115\105\080\077\115\089\068\047\107\079\069\098",
		"\115\072\122\085\107\079\114\077",
		"\051\057\049\055\089\083\101\101\084\111\084\122\084\050\101\068\084\057\114\108\057\047\052\086\108\098\122\111\083\108\052\086\048\081\101\109\109\047\069\087\100\111\077\103\084\111\077\076\054\057\084\088\108\078\120\085\100\122\115\080\108\106\057\101\109\122\110\074\109\106\084\100\084\057\100\086\084\057\068\054",
		"\119\072\122\047\115\079\069\097\071\054\061\061",
		"\084\105\080\077\115\089\068\047\107\079\069\098",
		"\070\089\068\075\107\079\066\065\114\116\108\061",
		"\090\121\101\075\107\079\066\104\070\072\111\061",
		"\090\087\084\081",
		"\090\116\043\106\119\116\084\075\090\121\084\117\090\105\054\061",
		"\084\079\084\105\115\083\101\069\107\089\090\061",
		"\119\057\043\065\057\072\077\097\070\047\068\073\114\079\069\047",
		"\070\079\069\047\090\087\084\081\089\121\054\118\048\086\061\061",
		"\114\116\043\065\115\050\113\118\048\086\061\061",
		"\114\072\122\082",
		"\119\072\043\117\115\087\068\047\090\116\077\082\115\104\061\061",
		"\115\116\122\055\115\057\043\069\107\089\114\075\090\056\066\065\115\072\057\081\089\056\057\053\114\072\057\082\115\072\057\098",
		"\115\056\066\073\114\112\100\061",
		"\071\087\086\061",
		"\107\079\069\105\119\072\057\075\114\116\057\097\114\072\043\081",
		"\119\079\122\082\114\079\122\049\089\056\122\098\070\105\057\112\114\087\110\061",
		"\071\079\122\121",
		"\083\079\069\098\070\079\068\117\114\072\043\081\100\111\068\073\119\072\043\081\100\111\106\117\070\079\053\061",
		"\090\087\080\077\089\121\080\077\119\116\084\077\090\086\061\061",
		"\114\116\057\097\114\072\043\081",
		"\070\079\069\075\107\116\122\097\070\104\061\061",
		"\108\056\066\073\114\081\101\121\107\079\066\055",
		"\108\121\084\117\119\116\084\065\119\116\090\061",
		"\115\079\084\105\115\057\043\069\107\089\090\061",
		"\115\079\069\117\107\116\066\077\115\120\061\061",
		"\050\054\077\081\115\089\084\106\090\116\053\086\109\089\077\054\115\089\080\112\119\056\069\117\054\057\101\080\051\098\114\077\114\122\117\106\070\079\054\113\048\054\113\080",
		"\107\056\077\081\107\056\066\077\089\056\043\106\114\072\066\065\119\116\108\061",
		"\107\056\122\049\119\072\080\117\107\056\085\112",
		"\109\121\101\104\119\121\068\065\114\072\108\061",
		"\114\072\057\053\114\111\068\073\119\072\043\081\108\072\077\097\070\056\057\081",
		"\109\072\077\082\115\083\101\076\119\056\066\073\090\086\061\061",
		"\070\079\069\075\115\116\043\081\114\056\122\081\115\120\061\061",
		"\119\116\057\121\089\056\080\106\114\087\084\073\119\086\061\061",
		"\090\116\057\112\115\089\054\061",
		"\070\072\077\047\089\121\068\065\115\072\108\061",
		"\090\056\068\117\119\072\057\075\115\072\122\085\107\079\114\077",
		"\114\056\057\117\090\072\043\082\089\056\115\065\090\116\108\061",
		"\090\056\077\098\115\054\061\061",
		"\119\079\057\117\090\121\057\081\115\057\043\047\115\089\117\047",
		"\090\116\043\049\119\122\043\065\119\105\115\077\090\105\084\077\090\086\061\061",
		"\076\120\104\110\067\104\061\061",
		"\070\072\077\047\089\056\122\082\114\072\077\075\107\105\080\106\114\072\057\116\119\121\080\097\115\054\061\061",
		"\070\079\069\098\070\079\068\117\114\072\043\081",
		"\107\116\122\097\070\104\061\061",
		"\090\056\057\047\089\056\068\056\107\089\100\061",
		"\090\056\068\081\115\079\057\082\089\121\068\065\071\116\108\061",
		"\109\056\053\086\114\079\069\117\114\087\084\117\107\056\049\061",
		"\119\072\077\082\115\108\068\073\119\072\043\081\109\072\122\078\115\079\104\061",
		"\070\079\069\075\119\079\043\056\115\079\066\077\115\105\054\061",
		"\107\089\080\081\119\121\114\112\089\056\068\073\119\072\043\081",
		"\051\057\049\055\089\083\101\101\084\111\084\122\084\050\101\101\109\098\077\068\054\057\084\122\084\050\101\100\083\057\084\110\109\047\114\109\100\122\114\080\057\111\086\086\054\108\066\088\057\050\101\088\084\078\101\076\057\057\068\108\109\047\106\080\079\098\122\108\083\108\043\103",
		"\114\079\069\112\115\089\084\075\115\089\115\077\119\105\084\075\107\056\122\049\119\072\080\117\107\056\049\061",
		"\084\077\080\122\084\057\068\108\054\108\069\111",
		"\119\116\057\121\089\056\066\117\107\116\057\049",
		"\107\056\117\073\070\056\057\098\089\121\080\077\090\056\057\047",
		"\083\079\069\098\070\079\068\117\114\072\077\073\119\078\101\049\070\089\068\047",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\068\049\070\089\101\078\119\056\122\081\115\120\061\061",
		"\079\047\106\077\114\121\084\121\119\106\047\086\054\056\043\082\115\116\077\105\100\087\068\106\107\056\068\077\090\121\068\116\114\079\066\049\071\083\101\077\071\087\101\073\090\105\084\077\115\050\101\047\119\081\101\076\119\072\077\104\107\116\043\117\090\116\054\117",
		"\110\109\086\104\100\122\113\061",
		"\114\072\122\078\119\072\108\061",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\077\085\107\079\114\077\090\104\061\061",
		"\107\089\080\081\119\121\114\112\089\056\068\073\119\072\043\081\089\056\066\117\107\116\066\077",
		"\054\079\106\073\114\079\069\047",
		"\115\079\066\077\119\079\057\082\114\122\043\105\090\116\043\106\090\087\110\061",
		"\084\072\043\106\107\116\066\077\100\087\084\117\090\120\061\061",
		"\084\072\077\112\114\072\122\082\107\056\108\061",
		"\109\108\057\089\057\122\114\088",
		"\107\079\069\047\070\057\043\106\119\105\084\081\114\089\068\047\115\079\054\061",
		"\100\120\061\061",
		"\115\056\122\085\115\089\080\106\119\072\057\112",
		"\115\116\122\055\115\057\043\069\107\089\090\061",
		"\108\121\084\117\114\072\077\097",
		"\070\116\077\047\114\072\057\081\089\056\066\077\115\104\061\061",
		"\119\079\122\053",
		"\107\056\043\049\119\121\080\075\119\072\043\105",
		"\107\089\084\117\119\097\100\061",
		"\115\072\077\112\114\072\122\082\107\056\057\075\110\056\054\061",
		"\107\056\122\049\107\106\043\117\119\105\084\065\089\056\080\081\114\089\084\077\115\116\043\081\107\056\108\061",
		"\115\116\122\055\115\079\066\117\115\104\061\061",
		"\115\089\117\104\119\121\080\047",
		"\051\057\085\074\089\083\101\072\083\057\117\122\084\050\101\108\084\108\066\110\100\111\111\086\108\122\080\088\084\106\080\101\109\108\106\122\108\078\101\076\108\098\122\109\083\050\120\085\088\078\101\076\083\111\122\103\084\047\057\111\100\111\077\103\084\098\052\086\108\111\122\103\084\108\104\061",
		"\054\079\068\097\114\089\080\117\107\121\098\061",
		"\051\054\061\061",
		"\107\079\084\118\114\089\068\047\089\121\077\117\114\104\061\061",
		"\115\087\080\117\114\106\043\047\115\089\117\047",
		"\115\079\084\105\115\054\061\061",
		"\054\089\080\081\119\121\114\112\051\086\061\061",
		"\107\079\069\047\070\083\106\117\070\079\106\078\119\121\054\086\107\079\069\105\119\072\057\112",
		"\115\072\057\097\119\056\084\077",
		"\109\079\077\112\107\104\061\061",
		"\070\079\069\098\070\079\068\117\114\072\077\073\119\077\043\049\070\089\068\047",
		"\107\105\077\047\115\054\061\061",
		"\119\072\122\112\114\122\043\116\090\116\057\077\090\121\084\117\119\116\054\061",
		"\109\056\053\086\119\079\077\112\090\056\057\098",
		"\115\087\057\097\070\106\043\117\119\087\101\113\107\054\061\061",
		"\084\116\122\055\115\083\101\104\070\089\084\097\070\050\101\073\119\078\101\049\107\079\069\098",
		"\054\079\069\047\070\083\106\117\070\079\106\078\119\121\054\086\107\079\069\105\119\072\057\112",
		"\115\056\057\047",
		"\090\121\115\075\070\105\057\085\090\122\043\065\119\089\101\106\119\087\068\077",
		"\115\056\057\047\089\121\068\047\115\079\122\085\068\097\054\061",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\080\117\090\056\108\056\068\120\061\061",
		"\079\079\122\121",
		"\115\079\069\105\070\079\069\077\051\116\084\049\119\120\061\061",
		"\054\105\080\077\107\079\085\077\090\078\101\049\115\079\090\061",
		"\107\079\077\081",
		"\107\105\057\049\119\072\057\047\089\056\077\085\090\072\122\097\114\120\061\061",
		"\054\089\080\081\119\121\090\086\057\087\077\104\115\054\061\061",
		"\107\116\043\098\071\057\043\069\107\089\114\075\115\105\080\077\115\089\068\047\107\079\069\098",
		"\108\116\043\049\119\050\101\080\119\105\115\077\090\105\084\077\090\086\061\061",
		"\054\079\069\047\070\083\106\101\070\079\106\078\119\121\054\086\054\079\069\105\119\072\057\112",
		"\107\121\080\073\090\121\068\113\107\079\077\081\089\056\068\073\119\072\043\081\089\056\100\061",
		"\108\047\122\072\084\054\061\061",
		"\053\065\056\082",
		"\115\056\057\047\089\056\080\073\114\079\069\098\070\079\069\105\089\056\080\073\071\120\061\061",
		"\109\072\122\112\114\050\101\112\115\079\057\082",
		"\115\056\057\047\089\056\057\112\090\122\043\098\107\089\084\117",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\114\065\115\077\043\098\115\079\068\073\115\072\057\081",
		"\107\081\047\061",
		"\108\121\084\117\119\116\054\061",
		"\108\056\117\073\119\121\054\061",
		"\115\116\122\055\115\057\043\069\107\089\114\075\090\056\066\065\115\072\057\081\089\121\080\065\115\056\117\047",
		"\107\079\069\047\070\057\043\078\107\079\068\055\090\121\084\117\107\086\061\061",
		"\119\057\043\056\115\079\068\088\090\116\077\105\070\079\053\061",
		"\090\072\066\117\071\079\057\081\089\121\068\047\107\089\084\077",
		"\107\079\069\047\070\089\057\082\114\087\080\106\090\121\084\077\115\120\061\061",
		"\119\072\122\078\115\079\104\061",
		"\107\121\080\073\090\121\068\113\107\079\077\081\089\056\068\073\119\072\043\081\089\056\080\049\107\079\100\061",
		"\084\072\057\116\107\089\057\049\114\120\061\061",
		"\070\072\122\082\115\072\066\077\089\056\106\077\119\105\108\061",
		"\107\079\069\047\070\079\122\065\119\054\061\061",
		"\051\057\049\055\089\083\101\101\084\111\084\122\084\050\101\110\054\057\068\108\100\122\068\122\084\108\053\086\084\057\068\054\100\122\114\080\057\111\086\086\054\047\117\101\109\098\114\122\054\108\080\110\084\083\101\076\109\047\066\088\108\078\120\061",
		"\109\072\043\097\107\079\104\086\114\116\077\077\114\104\061\061",
		"\115\121\080\117\115\072\077\077\119\105\054\061",
		"\079\081\057\112\089\083\101\072\107\079\085\077\100\122\077\117\114\081\101\068\119\056\084\077",
		"\115\056\057\047\089\121\101\049\107\089\077\077\090\077\043\081\115\089\068\073\114\089\080\097\115\054\061\061",
		"\119\057\043\099\119\056\043\085\109\072\057\056\115\079\104\061",
		"\084\072\043\121\119\086\061\061",
		"\119\072\057\116\114\120\061\061",
		"\119\079\108\061",
		"\107\116\122\082\115\120\061\061",
		"\119\072\057\105\089\056\106\073\114\116\057\085\115\079\069\047",
		"\057\089\120\061",
		"\090\116\057\116\089\056\115\073\090\116\068\077\089\056\080\073\115\087\077\117\070\079\047\061",
		"\090\116\057\116\115\089\080\077\119\116\068\077",
		"\108\056\057\049\115\079\068\047\100\111\122\082\114\072\098\085\054\079\077\085\100\122\068\047\107\089\084\077\103\086\061\061",
		"\054\056\122\049\107\121\057\049\107\089\084\065\119\056\053\086\115\105\080\077\115\089\068\047\107\079\069\098",
		"\054\079\077\085\107\116\043\047",
		"\109\079\122\082\114\079\122\049\100\111\080\117\107\056\049\061",
		"\115\079\069\047\070\089\084\069",
		"\084\105\080\077\115\089\068\047\107\079\069\098\070\079\069\105",
		"\057\098\057\082\115\056\077\082\115\108\068\049\070\079\057\082\114\076\120\066\068\120\061\061",
		"\071\079\122\121\089\056\065\065\114\087\084\077\090\077\043\112\119\072\077\098\115\089\080\075\090\116\077\105\070\087\054\061",
		"\084\079\084\105\115\083\101\115\107\089\090\061",
		"\114\089\101\104\115\089\100\061",
		"\119\072\057\082\115\121\084\113",
		"\114\089\068\077\090\116\077\098\089\121\084\073\089\056\057\082\114\072\077\082\115\072\057\053",
		"\057\116\122\081\070\079\122\082\107\056\108\061",
		"\109\111\122\109\057\050\101\109\084\108\057\103",
		"\084\089\117\117\107\121\054\061",
		"\119\116\057\121\089\121\068\049\070\079\084\077\090\086\061\061",
		"\115\056\057\047\089\121\068\047\115\079\122\085\089\056\122\056\107\089\084\117\090\086\061\061",
		"\090\116\057\105\070\089\068\047\115\089\080\075\115\089\068\104\089\056\115\049\107\079\090\061",
		"\119\121\114\082\115\089\080\075\119\072\122\078\115\079\104\061",
		"\107\054\061\061",
		"\090\056\077\098\115\079\106\073\114\116\108\061",
		"\115\116\077\082\115\122\043\112\070\079\114\082\107\089\084\106\090\116\108\061",
		"\107\056\043\082\114\072\122\065\119\105\110\061",
		"\090\121\084\077\107\079\106\065\115\120\061\061",
		"\115\056\057\047\089\056\066\073\107\056\122\049\089\121\101\049\107\089\077\077\090\086\061\061",
		"\054\121\080\073\114\079\068\113",
		"\051\057\080\101\084\047\057\050\109\106\054\086\109\111\077\079\084\083\101\083\084\108\122\111\084\057\100\086\048\111\077\072\100\111\117\122\054\108\054\086\108\098\057\109\109\047\066\079\054\108\080\110\084\083\101\088\108\078\101\054\108\098\057\072\084\057\080\109\100\111\080\088\084\122\098\065",
		"\051\057\049\055\089\083\101\101\084\111\084\122\084\050\101\101\057\057\084\088\100\122\114\101\109\111\049\086\108\111\057\122\083\081\101\076\109\047\106\050\083\108\069\111\084\108\054\086\057\047\077\108\083\050\101\100\083\057\084\054\108\098\057\111\083\108\068\108\083\108\043\103",
		"\114\072\077\097\070\056\068\073\114\079\069\047",
		"\107\121\068\075\115\056\122\085\115\057\043\098\070\089\068\097\119\056\069\082\115\079\068\047\115\079\054\061",
		"\115\056\057\047\089\121\101\049\107\089\077\077\090\077\043\112\114\072\122\047\114\089\110\061",
		"\054\079\066\121\107\089\077\112\100\087\068\049\070\079\084\077",
		"\107\056\043\085\119\079\122\082\115\072\122\097\070\104\061\061",
		"\071\086\061\061",
		"\119\079\122\053\070\079\106\106\119\057\043\047\070\079\068\055\090\104\061\061",
		"\084\111\077\109\054\047\043\083\084\076\113\086\084\111\077\109\054\047\043\083\084\050\069\087\084\081\043\068\084\057\114\108\057\047\043\108\084\108\068\100",
		"\054\089\054\086\114\072\122\081\115\056\057\047\090\104\061\061",
		"\090\056\117\073\119\121\084\065\119\116\114\075\115\072\122\047\107\054\061\061",
		"\107\086\061\061",
		"\107\056\122\097\070\072\057\098\089\056\106\065\090\121\068\077\115\120\061\061",
		"\114\056\057\065\115\056\117\047",
		"\108\121\084\117\114\072\077\097\100\072\066\077\115\081\101\080\119\078\101\101\070\089\100\061",
		"\108\098\122\087\084\054\061\061",
		"\084\087\080\117\115\081\101\111\115\079\080\106\115\081\101\089\070\079\069\098\119\121\090\086\048\103\048\087\085\083\098\061",
		"\089\106\043\110\070\079\069\077\100\111\068\073\119\072\043\081",
		"\109\089\077\054\115\089\080\112\119\056\069\117\054\057\101\080",
		"\119\057\043\056\115\079\068\068\070\079\069\112",
		"\050\054\077\119\080\089\068\114\100\122\077\117\114\081\101\101\115\072\054\061",
		"\109\121\084\113\115\089\100\086\084\057\068\054",
		"\071\079\122\121\089\121\068\049\070\079\084\077\090\077\043\081\070\079\114\113\114\120\061\061",
		"\119\072\043\117\115\122\043\081\115\056\080\117",
		"\090\056\057\047\089\121\101\081\119\121\120\061",
		"\115\089\117\077\107\104\061\061",
		"\107\116\043\098\071\089\077\117\114\104\061\061",
		"\119\116\057\121\089\056\117\073\114\072\085\077\071\054\061\061",
		"\070\089\068\075\070\079\069\075\115\056\122\085\115\054\061\061",
		"\071\109\111\061",
		"\107\079\066\104\070\072\111\061",
		"\070\072\057\117\115\122\052\104",
		"\070\079\069\075\070\105\057\085\090\120\061\061",
		"\114\087\080\117\107\056\057\075\107\105\057\049\119\072\057\047",
		"\119\057\043\117\119\116\114\122\071\079\057\101\119\116\114\049\115\089\110\061",
		"\071\120\061\061",
		"\070\087\110\061",
		"\122\101\054\108\067\104\061\061",
		"\084\122\057\076\083\104\061\061",
		"\115\072\122\047\107\054\061\061",
		"\090\105\057\082\119\116\077\082\115\106\043\098\115\089\068\069\119\116\110\061",
		"\054\108\111\061",
		"\107\121\080\073\090\121\068\113\107\079\077\081\089\056\077\082\115\072\077\097\107\089\084\073\090\077\043\085\119\056\084\077",
		"\114\089\101\098\107\089\084\077\089\056\115\081\115\079\057\112\114\072\122\082\115\120\061\061",
		"\050\078\057\112\100\111\057\053\114\072\057\082\115\072\057\098\100\111\122\082\115\056\066\077\100\122\068\049\070\079\084\077\090\086\061\061",
		"\119\079\077\112\107\106\043\049\070\089\068\047",
		"\108\116\043\049\119\120\061\061",
		"\119\105\057\085\107\116\057\081",
		"\115\089\117\047\115\079\069\098\115\079\084\075\107\079\069\105\119\072\057\075\119\079\043\098\115\054\061\061",
		"\119\072\043\121\115\089\100\061",
		"\119\079\122\082\114\079\122\049\089\056\080\117\107\056\085\121\107\089\080\098\089\056\084\065\090\086\061\061",
		"\079\081\057\112\089\083\101\122\071\087\084\077\119\116\084\077\115\050\101\101\119\116\114\049\115\083\101\068\119\056\084\077",
		"\115\087\080\117\114\106\043\098\115\079\080\106\115\106\043\047\115\089\117\047",
		"\109\079\057\121\114\087\114\073\100\111\122\082\114\072\098\085\054\105\080\106\114\072\057\116\119\121\080\097\115\054\061\061",
		"\119\057\043\116\084\116\066\117\115\121\110\061",
		"\079\121\068\077\114\111\068\073\119\072\043\081\089\083\101\080\119\105\115\117\119\072\077\098\100\122\084\069\090\072\108\086\103\078\120\061",
		"\084\047\122\068\084\054\061\061",
		"\108\072\077\047\107\056\086\061",
		"\071\079\122\121\089\056\065\065\114\087\084\077\090\077\043\112\119\072\077\098\115\089\100\061",
		"\108\086\061\061",
		"\109\072\057\105\100\072\106\073\114\116\057\085\115\079\069\047",
		"\107\056\117\073\070\056\057\098\107\056\043\085\119\079\122\082\115\087\110\061",
		"\101\047\115\072\084\111\057\101\084\111\115\072\083\079\106\104\119\121\080\047\100\111\122\101",
		"\115\072\057\049\107\089\077\075\107\056\122\049\119\120\061\061",
		"\090\087\080\077\089\056\068\073\119\116\115\065\115\106\043\112\107\089\115\077",
		"\080\089\110\086\080\089\110\061",
		"\109\079\043\056\070\079\069\105",
		"\054\121\080\073\090\121\068\113\107\079\077\081\100\111\077\082\115\072\077\097\107\089\084\073\090\078\101\108\071\089\101\077",
		"\107\089\080\081\119\121\114\112\089\056\068\065\090\116\068\106\119\072\122\081\089\121\068\065\071\116\108\061",
		"\100\050\120\086\100\120\098\080\050\054\098\080\050\083\120\086\100\050\120\086\100\050\120\086\100\050\120\086\100\050\120\086\101\056\054\056\107\097\115\116\068\056\115\116\100\050\049\086\109\079\122\065\119\078\101\103\107\089\115\065\115\056\122\047\119\121\100\086\048\104\061\061",
		"\119\079\122\112\114\072\057\081\089\121\068\121\070\089\084\097\070\120\061\061",
		"\090\072\077\082\115\106\043\112\090\072\077\055\115\054\061\061",
		"\090\056\117\073\119\121\084\075\107\056\043\082\115\072\077\047\070\079\043\082",
		"\090\121\120\061",
		"\119\057\043\116\119\111\069\077\071\087\084\054\090\116\077\085\107\089\080\069\054\089\084\047\107\079\068\055",
		"\054\121\057\112\114\072\043\085",
		"\090\072\098\061",
		"\115\087\084\075\107\079\066\104\070\072\111\061",
		"\070\087\057\105\115\054\061\061",
		"\054\056\066\073\090\056\108\061",
		"\109\056\053\086\070\072\077\047\070\079\069\105",
		"\070\072\122\082\115\072\066\077\089\121\115\065\090\056\077\078\119\072\108\061",
		"\107\089\080\081\119\121\114\112\089\056\068\065\090\116\068\106\119\072\122\081\089\056\066\117\107\116\066\077",
		"\109\079\122\082\114\079\122\049\100\111\066\077\115\105\054\061",
		"\119\121\080\065\115\056\077\082",
		"\115\089\117\047\115\079\069\098\115\079\084\075\107\079\069\105\119\072\057\075\090\056\066\065\115\072\057\081\089\121\080\065\115\056\117\047",
		"\115\079\069\097\119\056\084\077",
		"\119\079\077\082",
		"\053\065\056\073",
		"\054\121\080\073\090\121\068\113\107\079\077\081\100\111\077\082\115\072\077\097\107\089\084\073\090\078\101\076\119\056\066\073\090\078\120\066",
		"\114\072\057\053\114\087\057\081\115\054\061\061",
		"\107\116\043\098\071\057\043\069\107\089\114\075\090\056\066\065\115\072\057\081",
		"\119\079\077\112\107\104\061\061",
		"\107\116\043\073\119\050\117\075\089\121\084\113\070\089\068\097\107\079\066\049\048\078\098\113\114\116\043\065\115\050\113\065",
		"\100\050\120\061",
		"\054\056\077\081\107\056\066\077",
		"\071\079\122\121\089\121\068\049\070\079\084\077\090\086\061\061",
		"\070\056\057\069\089\121\068\047\107\089\084\077",
		"\071\089\098\066",
		"\101\081\108\104\110\105\086\077\110\076\080\053\080\109\120\081\071\050\108\104\110\105\086\077\090\104\061\061",
		"\051\057\085\110\109\047\043\051\083\108\069\087\100\111\115\088\108\077\114\101\108\098\054\086\057\111\052\086\054\108\084\111\089\054\061\061",
		"\115\121\080\117\115\072\077\077\119\105\084\075\114\072\057\053\114\120\061\061",
		"\070\089\068\075\119\079\057\082\114\057\043\073\090\072\057\082",
		"\115\056\057\047\089\121\101\049\107\089\077\077\090\077\043\121\115\079\122\104\119\056\053\061",
		"\090\116\077\105\070\087\054\061",
		"\109\111\110\086\054\077\080\088\083\047\057\103",
		"\115\056\057\047\089\056\122\047\114\072\122\097\070\104\061\061",
		"\109\079\122\082\114\079\122\049\100\111\122\081\090\116\043\121\090\104\061\061",
		"\083\079\053\086\054\079\077\081",
		"\114\116\057\049\119\056\068\065\114\087\098\061",
		"\109\120\061\061",
		"\119\057\043\056\115\079\068\079\070\079\057\121\109\056\115\116\090\056\057\047",
		"\070\079\069\047\090\087\084\081\089\121\054\061",
		"\119\079\122\082\114\079\122\049\089\056\066\077\115\105\084\075\115\072\077\081",
		"\057\116\077\112\114\079\122\049\090\104\061\061",
		"\071\057\043\073\115\116\115\112\115\089\054\061",
		"\090\056\077\085\114\079\066\117\114\072\077\073\119\077\043\047\070\079\106\077",
		"\119\072\122\112\114\122\043\085\070\089\068\112\089\121\084\065\119\079\108\061",
		"\108\056\117\073\119\121\084\065\119\116\090\086\057\087\080\065\115\056\114\077\090\078\101\076\119\056\069\098\070\089\084\065\119\056\053\061",
		
		"",
		"\070\089\068\075\107\079\068\047\070\089\115\077",
		"\054\056\077\081\107\056\066\077\100\111\068\073\119\072\043\081",
		"\107\079\069\065\119\079\122\047\070\079\043\082\089\056\080\081\115\079\122\055\115\089\100\061",
		"\070\072\077\098\115\057\043\117\119\087\101\113\107\054\061\061",
		"\119\057\043\065\083\089\084\077\119\108\084\077\115\116\077\082\070\089\084\065\119\056\069\080\119\116\084\077\071\120\061\061",
		"\109\108\057\089\057\122\114\088\051\077\084\122\054\047\086\061",
		"\115\105\080\117\119\079\057\097\119\121\057\082\114\120\061\061",
		"\054\121\080\073\090\121\068\113\107\079\077\081\100\111\077\082\115\072\077\097\107\089\084\073\090\086\061\061",
		"\090\056\057\047\089\056\057\056\115\079\069\047\089\056\068\117\119\072\066\078\107\079\068\055",
		"\114\089\101\098\107\089\084\077\089\056\106\117\119\105\057\117\119\120\061\061",
		"\114\087\080\117\107\056\057\075\119\072\077\082\115\054\061\061",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\057\082\114\072\077\047\071\054\061\061",
		"\057\111\057\076\083\120\061\061",
		"\079\079\122\121\100\072\065\065\114\087\084\077\090\086\061\061",
		"\070\079\069\112\115\089\080\047",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\117\047\114\087\120\061",
		"\090\121\115\075\115\121\080\117\114\116\077\047\071\054\061\061",
		"\119\057\043\056\115\079\068\079\115\079\066\073\107\056\077\047\071\057\049\081\089\054\061\061",
		"\109\079\077\112\107\081\101\072\114\079\069\097\114\072\077\073\119\105\110\061",
		"\070\089\068\075\115\072\043\081\119\079\122\082\114\120\061\061",
		"\090\056\057\047\089\056\068\117\119\072\066\078\107\079\068\055",
		"\057\116\057\081\071\083\101\076\119\072\043\112\115\054\061\061",
		"\107\079\069\047\070\057\043\078\090\105\057\047\115\079\115\073\090\116\068\077",
		"\107\089\080\081\119\121\114\112\089\056\068\065\090\116\068\106\119\072\122\081\089\056\068\073\119\072\043\081",
		"\115\116\115\065\089\056\117\077\119\087\101\077\090\105\110\061",
		"\115\105\080\117\119\079\057\047\070\079\106\077",
		"\107\105\080\077\107\079\085\077\090\077\043\049\119\121\114\077\090\077\043\078\119\056\084\069",
		"\051\109\110\073\068\083\101\089\054\057\098\086\083\098\077\108\057\111\057\083\051\050\101\076\057\057\068\108\109\047\106\080\079\098\122\050\109\111\108\086\083\108\053\086\084\057\115\122\108\077\077\089\054\057\098\061",
		"\071\076\111\061",
		"\114\079\069\065\071\122\043\047\070\079\106\077",
		"\107\056\122\049\107\106\043\098\107\079\106\117\115\056\108\061",
		"\084\072\057\078\114\079\090\086\057\056\077\082\115\072\043\121",
		"\107\056\122\085\115\089\080\117\089\121\101\073\090\056\077\047\070\079\043\082",
		"\090\116\122\098",
		"\115\116\115\065",
		"\107\056\117\117\090\086\061\061",
		"\107\121\080\073\114\079\068\113",
		"\115\105\080\077\115\089\068\047\107\079\069\098",
		"\051\057\049\055\089\083\101\101\084\111\084\122\084\050\101\068\084\057\114\108\057\047\052\086\108\098\057\109\109\047\066\079\084\057\100\086\108\047\122\072\084\083\101\054\109\047\077\103\057\050\101\110\109\047\114\080\054\081\120\113\084\108\122\083\109\122\098\086\108\106\084\101\057\111\108\065",
		"\119\056\069\075\115\121\080\073\114\079\069\098",
		"\109\106\110\061",
		"\119\057\043\078\054\056\043\082\119\116\057\097\114\072\057\098",
		"\054\098\122\080\109\054\061\061",
		"\114\089\068\077\090\116\077\098",
		"\086\112\121\110\112\110\112\110\112\087\054\118\113\054\061\061",
		"\115\105\110\061",
		"\107\079\080\112",
		"\119\057\043\056\115\079\068\068\107\089\117\112",
		"\119\072\122\112\114\122\043\112\070\079\084\077",
		"\119\079\057\082\114\057\043\104\119\121\068\065\114\072\077\073\119\086\061\061",
		"\115\089\117\047\115\079\069\098\115\079\084\075\107\079\069\105\119\072\057\075\115\089\117\047\090\116\111\061",
		"\090\116\043\049\119\120\061\061",
		"\115\056\057\047\089\121\101\049\107\089\077\077\090\077\043\082\107\079\106\077",
		"\109\056\053\086\090\056\117\073\114\050\101\117\119\105\084\065\051\079\122\065\119\054\061\061",
		"\119\057\043\056\115\079\068\079\115\079\066\073\107\056\077\047\071\054\061\061",
		"\084\116\122\055\115\083\101\049\107\079\090\061",
		"\115\079\066\077\119\079\057\082\114\087\110\061",
		"\057\072\057\053\114\050\101\076\119\056\066\073\090\086\061\061",
		"\079\047\106\077\114\121\084\121\119\106\047\086\054\056\043\082\115\116\077\105\100\087\068\106\107\056\068\077\090\121\068\116\114\079\066\049\071\083\101\065\119\089\101\073\090\105\084\077\115\050\101\116\090\116\043\085\100\111\068\049\070\089\101\078\119\056\122\081\115\050\111\061",
		"\090\121\084\081\070\079\069\105\070\079\115\069",
		"\084\111\043\057\054\098\066\122\057\111\122\054",
		"\084\105\080\077\115\089\068\047\107\079\069\098\070\079\069\105\100\072\080\073\115\087\098\086\071\079\122\121",
		"\083\116\077\047\114\072\057\081",
		"\108\056\057\047\114\072\077\082\115\121\110\061",
		"\119\057\043\082\057\072\077\097\070\047\080\117\090\056\108\061",
		"\119\072\122\112\114\072\043\106\114\072\114\073\070\079\069\105\107\056\043\085\119\079\122\082\115\120\061\061",
		"\090\116\057\117\119\087\084\065\119\079\108\061",
		"\084\056\057\047\109\116\122\085\115\054\061\061",
		"\115\056\057\047\089\121\101\081\119\121\120\061",
		"\119\057\043\116\119\111\069\077\071\087\084\101\114\087\084\117\107\056\049\061",
		"\054\121\080\073\090\121\068\113\107\079\077\081\100\111\077\082\115\072\077\097\107\089\084\073\090\078\101\076\119\056\066\073\090\078\120\081",
		"\104\055\120\061",
		"\071\089\098\121",
		"\084\098\043\083\100\122\068\057\108\122\101\088\108\077\054\086\109\106\100\086\057\111\052\086\108\098\057\054\109\106\080\108\100\111\080\057\084\106\110\086\108\111\066\122\054\057\068\122\100\111\065\088\083\108\053\086\109\106\057\083\100\111\084\080\108\047\068\088\108\098\054\117",
		"\115\089\117\047\115\079\069\098\115\079\084\075\107\079\069\105\119\072\057\075\090\056\066\065\115\072\057\081",
		"\107\056\122\112\114\120\061\061",
		"\115\056\066\073\114\104\061\061",
		"\108\116\122\082\115\072\043\085",
		"\115\089\080\081\119\121\080\075\119\072\043\105",
		"\109\121\084\113\115\089\100\061",
		"\050\054\098\080\079\081\057\112\089\083\101\054\070\089\084\097\070\120\061\061",
		"\119\116\057\121\089\056\106\106\119\087\084\065\090\056\057\049\115\079\068\047",
		"\115\056\122\085\115\057\043\082\115\089\114\085\107\089\120\061",
		"\119\057\043\116\119\122\068\065\119\089\057\049\107\089\084\065\119\056\069\108\070\079\106\077",
		"\115\089\117\047\115\079\069\098\115\079\084\075\107\079\069\105\119\072\108\061",
		"\107\056\100\055",
		"\109\108\057\089\057\122\114\088\051\077\084\122\054\047\117\103\109\047\066\088\084\047\077\122\108\104\061\061",
		"\090\072\122\065\119\105\054\061",
		"\119\116\057\121\089\056\068\073\119\072\043\081\089\121\101\065\107\056\085\077\090\086\061\061",
		"\050\078\057\112\100\111\080\073\115\087\098\086\071\079\122\121\100\122\068\049\070\079\084\077\090\086\061\061",
		"\114\072\057\053\114\111\068\073\119\072\043\081\109\072\122\078\115\079\104\061",
		"\114\072\057\053\114\120\061\061",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\121\084\081\107\079\068\077",
		"\115\056\122\085\115\089\068\077\119\105\068\077\051\056\068\112\115\056\043\075\114\056\057\117\090\072\043\082\090\104\061\061",
		"\115\079\069\117\107\116\066\077",
		"\108\072\077\082\115\081\101\112\090\072\077\055\115\054\061\061",
		"\071\089\098\081",
		"\054\079\069\047\070\083\106\117\070\079\106\078\119\121\054\061",
	};
local function iC(S)
	return QC[S - 46639];
end;
for S, K in ipairs({ { 1, 618 }, { 1, 617 }, { 618, 618 } }) do
	while K[1] < K[2] do
		QC[K[1]], QC[K[2]], K[1], K[2] = QC[K[2]], QC[K[1]], K[1] + 1, K[2] - 1;
	end;
end;
do
	local S = table.insert;
	local K = QC;
	local Z = string.char;
	local O = math.floor;
	local d = string.sub;
	local C = string.len;
	local f = {
			X = 15,
			b = 36,
			V = 32,
			R = 46,
			P = 9,
			["\047"] = 52,
			B = 49,
			["\043"] = 61,
			J = 62,
			r = 29,
			s = 25,
			["\056"] = 54,
			U = 45,
			o = 4,
			["\053"] = 56,
			A = 41,
			C = 63,
			["\050"] = 2,
			z = 5,
			a = 35,
			v = 42,
			["\054"] = 16,
			c = 58,
			T = 17,
			["\049"] = 44,
			l = 20,
			["\055"] = 43,
			E = 57,
			m = 19,
			i = 39,
			N = 34,
			n = 12,
			O = 22,
			["\057"] = 21,
			W = 7,
			G = 30,
			I = 47,
			S = 18,
			u = 33,
			x = 0,
			M = 37,
			F = 26,
			["\048"] = 10,
			q = 40,
			Q = 50,
			d = 8,
			H = 6,
			y = 55,
			Z = 28,
			["\051"] = 11,
			f = 59,
			e = 1,
			t = 38,
			p = 51,
			L = 3,
			["\052"] = 60,
			K = 31,
			D = 13,
			w = 27,
			j = 53,
			h = 48,
			k = 24,
			g = 14,
			Y = 23,
		};
	local L = table.concat;
	local R = type;
	for I = 1, #K, 1 do
		local X = K[I];
		if R(X) == "\115\116\114\105\110\103" then
			local R = C(X);
			local y = {};
			local h = 1;
			local e = 0;
			local V = 0;
			while h <= R do
				local K = d(X, h, h);
				local C = f[K];
				if C then
					e = e + C * 64 ^ (3 - V);
					V = V + 1;
					if V == 4 then
						V = 0;
						local K = O(e / 65536);
						local d = O((e % 65536) / 256);
						local C = e % 256;
						S(y, Z(K, d, C));
						e = 0;
					end;
				elseif K == "\061" then
					S(y, Z(O(e / 65536)));
					if h >= R or d(X, h + 1, h + 1) ~= "\061" then
						S(y, Z(O((e % 65536) / 256)));
					end;
					break;
				end;
				h = h + 1;
			end;
			K[I] = L(y);
		end;
	end;
end;
local S = {};
local K = require(iC(47193));
local Z = require(iC(46886));
local O = require(iC(46967));
local d = require(iC(46927));
local C = require(iC(46923));
local f = require(iC(46781));
local L = require(iC(47252));
local R = require(iC(47251));
local I = require(iC(46983));
local X = require(iC(47174));
local e = panorama[iC(46799)]();
local V = e[iC(47056)];
local F = V[iC(47226)]();
local m, A, P, M, s, a, z, r, u, E, D, o, H, t, n, b, c, Q, i, p, g, l, k, v, J, x, B, N, G, q, T, W, U, j, Y, SF, KF, ZF, OF, dF, CF, fF, LF, RF, IF, XF, yF, hF, eF, VF, FF, mF, AF, PF, MF, sF, aF, zF, rF, uF, EF, wF, DF, oF, HF, tF, nF, bF, cF, QF, iF, pF, gF, lF, kF, vF, JF, xF, BF, NF, GF, qF, TF, WF, UF, jF, YF, SZ, KZ, ZZ, OZ, dZ, CZ, fZ, LZ, RZ, IZ, XZ, yZ, hZ = globals[iC(47225)], client[iC(47022)], client[iC(47167)], client[iC(46912)], client[iC(47071)], client[iC(46918)], client[iC(46941)], client[iC(47191)], client[iC(46644)], client[iC(46674)], client[iC(46866)], client[iC(47032)], client[iC(47101)], client[iC(47169)], client[iC(47028)], client[iC(47063)], client[iC(47135)], client[iC(46911)], client[iC(47188)], client[iC(47237)], client[iC(47090)], client[iC(46669)], client[iC(46841)], client[iC(46745)], client[iC(46716)], client[iC(46742)], entity[iC(47035)], entity[iC(46816)], entity[iC(46786)], entity[iC(47062)], entity[iC(46868)], entity[iC(46966)], entity[iC(46677)], entity[iC(47001)], entity[iC(47178)], entity[iC(47211)], entity[iC(46646)], entity[iC(46848)], entity[iC(47141)], entity[iC(46784)], entity[iC(47227)], globals[iC(46788)], globals[iC(47099)], globals[iC(47039)], globals[iC(47043)], globals[iC(47224)], globals[iC(46714)], globals[iC(46721)], globals[iC(47165)], globals[iC(47184)], ui[iC(47026)], ui[iC(46670)], ui[iC(47010)], ui[iC(46793)], ui[iC(46687)], ui[iC(47247)], ui[iC(46732)], ui[iC(47240)], ui[iC(47065)], ui[iC(46825)], ui[iC(47179)], ui[iC(46899)], ui[iC(46920)], ui[iC(46964)], renderer[iC(46779)], renderer[iC(46893)], renderer[iC(46738)], renderer[iC(46999)], renderer[iC(46773)], renderer[iC(47250)], renderer[iC(46744)], renderer[iC(46794)], renderer[iC(46905)], renderer[iC(46909)], math[iC(46942)], math[iC(47192)], math[iC(46755)], math[iC(46876)], math[iC(46797)], math[iC(47257)], math[iC(46739)], math[iC(47116)], math[iC(47114)], math[iC(46940)], math[iC(46704)], math[iC(46795)], math[iC(46665)], math[iC(46850)], math[iC(46727)], math[iC(47205)], math[iC(47125)], math[iC(46756)], math[iC(46682)], table[iC(46805)], string[iC(46789)], string[iC(46958)], string[iC(47194)], bit[iC(47006)], panorama[iC(46877)], panorama[iC(46799)];
S[iC(47010)] = {
		[iC(46945)] = ui[iC(47010)](iC(47079), iC(47214), iC(46780)),
		[iC(46857)] = { AF(iC(47053), iC(47013), iC(46931)) },
		[iC(47210)] = AF(iC(47079), iC(46963), iC(47084)),
		[iC(46685)] = AF(iC(47053), iC(47238), iC(46820)),
		[iC(47074)] = { AF(iC(47079), iC(47238), iC(47212)) },
		[iC(46740)] = AF(iC(47079), iC(46963), iC(47095)),
		[iC(46883)] = { AF(iC(47079), iC(46963), iC(46968)) },
		[iC(46734)] = { AF(iC(47079), iC(47238), iC(46832)) },
		[iC(46666)] = AF(iC(47053), iC(47013), iC(46765)),
		[iC(46653)] = AF(iC(47079), iC(47214), iC(46929)),
		[iC(46833)] = AF(iC(47079), iC(47214), iC(47023)),
		[iC(47007)] = AF(iC(47079), iC(47238), iC(47098)),
		[iC(46777)] = { AF(iC(47079), iC(46963), iC(47172)) },
		[iC(47204)] = { AF(iC(47079), iC(46963), iC(47016)) },
		[iC(46991)] = ui[iC(47010)](iC(46956), iC(47222), iC(46702)),
		[iC(46743)] = AF(iC(47079), iC(46963), iC(46809)),
		[iC(46890)] = AF(iC(47079), iC(46963), iC(46872)),
		[iC(47109)] = { ui[iC(47010)](iC(46657), iC(46760), iC(47254)) },
		[iC(47064)] = { AF(iC(47079), iC(46963), iC(46813)) },
		[iC(47009)] = ui[iC(47010)](iC(47053), iC(47013), iC(46720)),
		[iC(46652)] = AF(iC(47079), iC(46963), iC(47220)),
	};
S[iC(47183)] = { [iC(46936)] = (K[iC(47234)](iC(46874), K[iC(47234)](iC(47150), client[iC(47032)](iC(46800), iC(47203))) + 2))[0], [iC(47066)] = (function()
			local S = K[iC(46751)](iC(46875));
			local Z = client[iC(46644)](iC(46969), iC(47017));
			local O = K[iC(47234)](S, Z);
			local d = K[iC(47234)](iC(47131), O[0][26]);
			return d;
		end)() };
S[iC(47077)] = {
		[iC(46643)] = 0,
		[iC(46748)] = 0,
		[iC(46959)] = 1,
		[iC(47050)] = {},
		[iC(46921)] = false,
		[iC(46990)] = iC(46994),
		[iC(47048)] = { false, 0 },
		[iC(46815)] = { iC(47079), iC(46954) },
		[iC(47155)] = yF() + .005,
		[iC(47196)] = {
			[iC(46904)] = 1,
			[iC(47207)] = 0,
			[iC(46711)] = 0,
			[iC(46901)] = 0,
		},
		[iC(46651)] = {
			iC(46994),
			iC(46985),
			iC(47104),
			iC(46888),
			iC(47146),
			iC(47036),
			iC(46986),
		},
		[iC(47034)] = (panorama[iC(46877)](iC(46892)))(),
		[iC(46882)] = { [iC(47004)] = false, [iC(47142)] = false, [iC(46910)] = false },
		[iC(46719)] = {
			[iC(46857)] = 0,
			[iC(46803)] = 0,
			[iC(46685)] = 0,
			[iC(47204)] = 0,
			[iC(46798)] = 0,
			[iC(46650)] = 0,
			[iC(47111)] = 0,
			[iC(46709)] = 0,
			[iC(46880)] = 0,
			[iC(47187)] = 0,
			[iC(47067)] = 0,
			[iC(46834)] = 0,
			[iC(46642)] = 0,
			[iC(46839)] = 0,
			[iC(46710)] = 0,
			[iC(46705)] = 0,
			[iC(46785)] = 0,
			[iC(47136)] = 0,
			[iC(47255)] = 0,
			[iC(46694)] = 0,
			[iC(46827)] = 0,
			[iC(46699)] = 0,
			[iC(46802)] = 0,
			[iC(47231)] = 0,
			[iC(46772)] = 0,
			[iC(47115)] = 0,
			[iC(47162)] = 0,
			[iC(46697)] = 0,
			[iC(46961)] = 0,
			[iC(46843)] = 0,
			[iC(46869)] = 0,
			[iC(47235)] = 0,
			[iC(46879)] = 0,
		},
	};
local eZ, VZ = PF(S[iC(47010)][iC(47204)][1], S[iC(47010)][iC(47204)][2], iC(46867));
S[iC(47077)][iC(47215)] = {
		[iC(46707)] = { [iC(47108)] = aF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47157)), [iC(46930)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47107), { iC(47256), iC(47152), iC(46956) }), [iC(47029)] = ui[iC(46920)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46935)) },
		[iC(46996)] = {
			[iC(47108)] = aF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46828)),
			[iC(47119)] = zF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46696), { iC(46722), iC(46812), iC(47113) }),
			[iC(47151)] = rF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47121)),
			[iC(46830)] = rF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46645)),
			[iC(47088)] = rF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47014)),
			[iC(46952)] = rF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47019)),
			[iC(46906)] = rF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46975)),
			[iC(46856)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46855), 0, 3, 0),
			[iC(47181)] = zF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47091), { iC(46725), iC(46715) }),
			[iC(46759)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47011), S[iC(47077)][iC(46651)]),
			[iC(47110)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47156), { iC(46913), iC(46822), iC(46747) }),
			[iC(46819)] = (function()
				local K = {};
				for Z, O in pairs(S[iC(47077)][iC(46651)]) do
					K[Z] = {
							[iC(46891)] = aF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46680)):format(O)),
							[iC(46740)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(47239)):format(O), {
								iC(46654),
								iC(46994),
								iC(47008),
								iC(47003),
								iC(46796),
								iC(47236),
								iC(47113),
							}),
							[iC(46743)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46840)):format(O), { iC(46998), iC(47047) }),
							[iC(46883)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(47058)):format(O), {
								iC(46654),
								iC(46761),
								iC(46647),
								iC(46938),
								iC(46925),
								iC(46808),
							}),
							[iC(47134)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46736)):format(O), -180, 180, 0, true, iC(47230)),
							[iC(47060)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46700)):format(O), -180, 180, 0, true, iC(47230)),
							[iC(46775)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46706)):format(O), {
								iC(46654),
								iC(46724),
								iC(46762),
								iC(47236),
								iC(46858),
							}),
							[iC(47096)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46735)):format(O), -180, 180, 0, true, iC(47230)),
							[iC(47018)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46778)):format(O), -180, 180, 0, true, iC(47230)),
							[iC(46681)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46853)):format(O), {
								iC(46654),
								iC(46938),
								iC(47221),
								iC(46895),
								iC(46867),
								iC(46863),
								iC(47012),
							}),
							[iC(47129)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(47248)):format(O), -180, 180, 0, true, iC(47230)),
							[iC(46937)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(47000)):format(O), {
								iC(46654),
								iC(47221),
								iC(47236),
								iC(46767),
							}),
							[iC(46771)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46835)):format(O), 0, 60, 60, true, iC(47230)),
							[iC(46987)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46664)):format(O), 0, 60, 60, true, iC(47230)),
							[iC(46878)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46729)):format(O), 0, 60, 60, true, iC(47230)),
							[iC(47243)] = aF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46684)):format(O)),
							[iC(47086)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(47089)):format(O), {
								iC(46654),
								iC(47221),
								iC(47236),
								iC(46767),
							}),
							[iC(47233)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(47082)):format(O), -100, 100, 0, true, iC(47230)),
							[iC(47123)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46854)):format(O), -100, 100, 0, true, iC(47230)),
							[iC(47209)] = FF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], (iC(46698)):format(O), -100, 100, 0, true, iC(47230)),
						};
				end;
				ui[iC(46825)](K[1][iC(46891)], true);
				ui[iC(46793)](K[1][iC(46891)], false);
				return K;
			end)(),
		},
		[iC(46851)] = {
			[iC(47108)] = aF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46695)),
			[iC(46957)] = zF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46922), { iC(47166), iC(47145), iC(47190) }),
			[iC(47080)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47105), { iC(46660), iC(46787) }),
			[iC(46679)] = ui[iC(46920)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46884)),
			[iC(46688)] = ui[iC(47247)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47127), 155, 255, 255, 85),
			[iC(46993)] = ui[iC(46920)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46859)),
			[iC(46977)] = ui[iC(47247)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47229), 255, 155, 255, 255),
			[iC(46726)] = mF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46973), { iC(46791), iC(47133) }),
			[iC(47120)] = ui[iC(46920)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47160)),
			[iC(47182)] = ui[iC(47247)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47160), 255, 255, 255, 255),
			[iC(47106)] = ui[iC(47026)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46811), 8, 14, 8),
			[iC(46928)] = ui[iC(46920)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46837)),
			[iC(46916)] = ui[iC(47247)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46837), 255, 255, 255, 255),
			[iC(46768)] = ui[iC(47026)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47054), -1000, 1000, 0),
			[iC(47153)] = ui[iC(47026)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46844), -1000, 1000, 0),
		},
		[iC(47130)] = { [iC(47083)] = zF(S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(47177), {
				iC(46970),
				iC(47052),
				iC(46962),
				iC(46810),
			}), [iC(46939)] = ui[iC(46732)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46766)), [iC(46770)] = ui[iC(47026)](S[iC(47077)][iC(46815)][1], S[iC(47077)][iC(46815)][2], iC(46749), 1, 10, 4) },
	};
S[iC(47033)] = function(S, K)
		for S, Z in pairs(type(S) == iC(46926) and S or ui[iC(46964)](S)) do
			if Z == K then
				return true;
			end;
		end;
		return false;
	end;
S[iC(46752)] = function()
		local K = {};
		for S, Z in pairs(S[iC(47077)][iC(47215)][iC(46996)][iC(46819)]) do
			for Z, O in pairs(Z) do
				K[(iC(47103)):format(S, Z)] = O;
			end;
		end;
		return K;
	end;
S[iC(46746)] = function()
		local K = S[iC(46752)]();
		local Z = json[iC(46754)](O[iC(46955)](C[iC(46964)]()));
		for S, K in pairs(K) do
			if Z[S] then
				ui[iC(46825)](K, Z[S]);
			end;
		end;
		print(iC(47217));
	end;
S[iC(46946)] = function()
		local K = {};
		local Z = S[iC(46752)]();
		for S, Z in pairs(Z) do
			K[S] = ui[iC(46964)](Z);
		end;
		C[iC(46825)](O[iC(47124)](json[iC(47218)](K)));
		print(iC(46924));
	end;
ui[iC(46920)](iC(47079), iC(46976), iC(46640));
ui[iC(46920)](iC(47079), iC(46976), iC(46806));
ui[iC(46899)](iC(47079), iC(46976), iC(46782), S[iC(46946)]);
ui[iC(46899)](iC(47079), iC(46976), iC(47100), S[iC(46746)]);
S[iC(46995)] = function()
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)], false);
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46707)][iC(47029)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)])));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(46906)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(46722)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(47151)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(46722)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(46830)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(46722)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(47088)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(46722)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(46952)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(46722)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(47181)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(46812)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46996)][iC(47110)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == iC(46986)))));
		for K, Z in pairs(S[iC(47077)][iC(47215)][iC(46996)][iC(46819)]) do
			ui[iC(46793)](Z[iC(46891)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and K ~= 1)))));
			ui[iC(46793)](Z[iC(46883)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and ui[iC(46964)](Z[iC(46891)]))))));
			ui[iC(46793)](Z[iC(46740)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and ui[iC(46964)](Z[iC(46891)]))))));
			ui[iC(46793)](Z[iC(46743)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and ui[iC(46964)](Z[iC(46891)]))))));
			ui[iC(46793)](Z[iC(46681)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and ui[iC(46964)](Z[iC(46891)]))))));
			ui[iC(46793)](Z[iC(46775)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46883)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(47134)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46883)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(46937)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46681)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(47060)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46883)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(46771)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46681)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(47243)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46681)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(46987)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and ui[iC(46964)](Z[iC(46681)]) ~= iC(46654)))))));
			ui[iC(46793)](Z[iC(47096)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46883)]) ~= iC(46654) and ui[iC(46964)](Z[iC(46775)]) ~= iC(46654))))))));
			ui[iC(46793)](Z[iC(47018)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46883)]) ~= iC(46654) and ui[iC(46964)](Z[iC(46775)]) ~= iC(46654))))))));
			ui[iC(46793)](Z[iC(47233)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46681)]) ~= iC(46654) and ui[iC(46964)](Z[iC(47243)]))))))));
			ui[iC(46793)](Z[iC(47086)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46681)]) ~= iC(46654) and ui[iC(46964)](Z[iC(47243)]))))))));
			ui[iC(46793)](Z[iC(47129)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46681)]) ~= iC(46654) and ui[iC(46964)](Z[iC(46681)]) ~= iC(46895))))))));
			ui[iC(46793)](Z[iC(47123)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46681)]) ~= iC(46654) and ui[iC(46964)](Z[iC(47243)]))))))));
			ui[iC(46793)](Z[iC(46878)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46681)]) ~= iC(46654) and ui[iC(46964)](Z[iC(46937)]) ~= iC(46654))))))));
			ui[iC(46793)](Z[iC(47209)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47256) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47119)], iC(47113)) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46759)]) == S[iC(47077)][iC(46651)][K] and (ui[iC(46964)](Z[iC(46891)]) and (ui[iC(46964)](Z[iC(46681)]) ~= iC(46654) and (ui[iC(46964)](Z[iC(47243)]) and ui[iC(46964)](Z[iC(47086)]) ~= iC(46654)))))))));
		end;
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)])));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46688)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47166)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46679)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47166)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47190)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47190)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(47080)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47166)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(47106)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)]) == iC(47133)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(47120)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)]) == iC(47133)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(47182)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)]) == iC(47133)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46916)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)]) == iC(46953)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46928)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)]) == iC(46953)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46977)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47166)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47080)]) == iC(46787)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(46851)][iC(46993)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(47152) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47166)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47080)]) == iC(46787)))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(46956));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(47130)][iC(46939)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(46956) and S[iC(47033)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], iC(46970))));
		ui[iC(46793)](S[iC(47077)][iC(47215)][iC(47130)][iC(46770)], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) and (ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(46930)]) == iC(46956) and (S[iC(47033)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], iC(46970)) and ui[iC(46964)](S[iC(47077)][iC(47215)][iC(47130)][iC(46939)]))));
	end;
S[iC(46774)] = function(S, K, Z)
		return S + (K - S) * Z;
	end;
S[iC(46934)] = function()
		ui[iC(46825)](S[iC(47010)][iC(46991)], true);
	end;
S[iC(46943)] = function(S, K, Z, O, d, C)
		return math[iC(46795)](((O - S) ^ 2 + (d - K) ^ 2) + (C - Z) ^ 2);
	end;
S[iC(46971)] = function(S)
		if not S or not entity[iC(46868)](S) then
			return false;
		end;
		return bit[iC(47006)](entity[iC(47227)](S, iC(47092)), 1) == 0;
	end;
S[iC(47195)] = function(S)
		if not S or not entity[iC(46868)](S) then
			return false;
		end;
		return bit[iC(47006)](entity[iC(47227)](S, iC(47092)), 2) == 2;
	end;
S[iC(47147)] = function(S)
		if not S or not entity[iC(46868)](S) then
			return 0;
		end;
		local K, Z, O = CF(S, iC(47213));
		return jF(K ^ 2 + Z ^ 2);
	end;
client[iC(47167)](iC(46668), function(K)
	if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46952)]) then
		ui[iC(46825)](S[iC(47010)][iC(46890)], true);
	else
		ui[iC(46825)](S[iC(47010)][iC(46890)], false);
	end;
end);
S[iC(47168)] = function()
		ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(47151)], iC(46750));
		local K = ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)]);
		ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(46830)], iC(46750));
		ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(47088)], iC(46750));
		local Z, O, d = ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47151)]), ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46830)]), ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47088)]);
		if Z == S[iC(47077)][iC(46882)][iC(47004)] and (O == S[iC(47077)][iC(46882)][iC(47142)] and d == S[iC(47077)][iC(46882)][iC(46910)]) then
			return;
		end;
		S[iC(47077)][iC(46882)][iC(47004)], S[iC(47077)][iC(46882)][iC(47142)], S[iC(47077)][iC(46882)][iC(46910)] = Z, O, d;
		if Z and K == 1 or O and K == 2 then
			ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)], 0);
			return;
		end;
		if Z and K ~= 1 then
			ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)], 1);
		end;
		if O and K ~= 2 then
			ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)], 2);
		end;
		if d and K ~= 0 then
			ui[iC(46825)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)], 0);
		end;
	end;
S[iC(47161)] = function()
		local K = B();
		if not K or not entity[iC(46868)](K) then
			return;
		end;
		if S[iC(47033)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], iC(46970)) then
			ui[iC(46825)](S[iC(47010)][iC(47007)], iC(47042));
			if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(47130)][iC(46939)]) then
				if math[iC(46739)](1, 10) > ui[iC(46964)](S[iC(47077)][iC(47215)][iC(47130)][iC(46770)]) then
					entity[iC(47062)](K, iC(46804), 1, 0);
				end;
			else
				entity[iC(47062)](K, iC(46804), 1, 0);
			end;
		end;
		if S[iC(47033)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], iC(47052)) then
			entity[iC(47062)](K, iC(46804), 1, 6);
		end;
		if S[iC(47033)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], iC(46962)) then
			local Z = S[iC(46971)](K);
			if not Z then
				S[iC(47077)][iC(46748)] = S[iC(47077)][iC(46748)] + 1;
			else
				S[iC(47077)][iC(46748)] = 0;
				S[iC(47077)][iC(46643)] = globals[iC(46714)]() + 1;
			end;
			if S[iC(47077)][iC(46748)] > ui[iC(46964)](S[iC(47010)][iC(46945)]) + 1 and S[iC(47077)][iC(46643)] > globals[iC(46714)]() then
				entity[iC(47062)](K, iC(46804), .5, 12);
			end;
		end;
	end;
S[iC(46988)] = function()
		if not S[iC(47033)](S[iC(47077)][iC(47215)][iC(47130)][iC(47083)], iC(46810)) then
			return false;
		end;
		local K = entity[iC(46784)](true);
		local Z, O, d = entity[iC(47227)](entity[iC(47035)](), iC(46989));
		for K, C in pairs(K) do
			local f = entity[iC(47141)](C);
			local L, R, I = entity[iC(47227)](C, iC(46989));
			local X = S[iC(46943)](Z, O, d, L, R, I);
			if entity[iC(46677)](f) == iC(46823) and X <= 164 then
				return true;
			end;
		end;
		return false;
	end;
S[iC(47185)] = function(S)
		if math[iC(47205)](S[iC(46690)]) > 1 or math[iC(47205)](S[iC(47031)]) > 1 or S[iC(47070)] == 1 then
			return;
		end;
		local K = f[iC(46831)](2);
		if K == nil then
			return;
		end;
		if math[iC(47205)](K) < 15 or S[iC(47099)] == 0 then
			return;
		end;
		if (entity[iC(47227)](entity[iC(47035)](), iC(46648)) or 0) == 9 then
			return;
		end;
		S[iC(46690)] = 1e-033;
		S[iC(46898)] = 1;
	end;
S[iC(46908)] = function(K)
		local Z = B();
		if K == nil or not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) or not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) or yF() - S[iC(47077)][iC(47155)] <= .005 or not S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47181)], iC(47118)) then
			return;
		end;
		local O = client[iC(47022)](K[iC(47202)]);
		local d = client[iC(47022)](K[iC(46712)]);
		if O ~= Z then
			return;
		end;
		if S[iC(47077)][iC(47050)][d] == nil then
			S[iC(47077)][iC(47050)][d] = false;
		end;
		S[iC(47077)][iC(47050)][d] = not S[iC(47077)][iC(47050)][d];
	end;
S[iC(46944)] = function(K)
		local O, d = B(), A(K[iC(47202)]);
		if not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) or not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) or not T(O) or not N(d) or Y(d) or yF() - S[iC(47077)][iC(47155)] <= .005 or not S[iC(47033)](S[iC(47077)][iC(47215)][iC(46996)][iC(47181)], iC(46960)) then
			return;
		end;
		if S[iC(47077)][iC(47050)][d] == nil then
			S[iC(47077)][iC(47050)][d] = false;
		end;
		local C = Z(entity[iC(47227)](d, iC(46989)));
		local f = Z(entity[iC(47227)](O, iC(46989)));
		local L = ((((K[iC(46814)] - C[iC(46814)]) * f[iC(47073)] - (K[iC(47073)] - C[iC(47073)]) * f[iC(46814)]) + K[iC(47073)] * C[iC(46814)]) - K[iC(46814)] * C[iC(47073)]) / jF((K[iC(46814)] - C[iC(46814)]) ^ 2 + (K[iC(47073)] - C[iC(47073)]) ^ 2);
		if ZZ(L) <= 35 then
			S[iC(47077)][iC(47155)] = yF();
			S[iC(47077)][iC(47050)][d] = not S[iC(47077)][iC(47050)][d];
		end;
	end;
S[iC(46900)] = function()
		S[iC(47077)][iC(46959)] = 1;
		S[iC(47077)][iC(47050)] = {};
		S[iC(47077)][iC(47196)][iC(46901)] = 0;
		S[iC(47077)][iC(47196)][iC(47207)] = 0;
		S[iC(47077)][iC(47196)][iC(46711)] = globals[iC(46714)]();
	end;
S[iC(46758)] = function(K)
		local Z = entity[iC(47035)]();
		local O = client[iC(47022)](K[iC(47202)]);
		if O ~= Z then
			return;
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47110)]) == iC(46822) then
			S[iC(47077)][iC(47048)][1] = false;
			S[iC(47077)][iC(47048)][2] = yF() + .8;
		elseif ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47110)]) == iC(46747) then
			S[iC(47077)][iC(47048)][2] = 0;
			S[iC(47077)][iC(47048)][1] = true;
		end;
	end;
S[iC(47144)] = function(S)
		local K = entity[iC(47035)]();
		if not K or not entity[iC(46868)](K) then
			return false;
		end;
		local Z = entity[iC(47141)](K);
		local O = entity[iC(47227)](K, iC(47223));
		local d = globals[iC(46721)]() * (O - S);
		if d < entity[iC(47227)](K, iC(47228)) then
			return false;
		end;
		if d < entity[iC(47227)](Z, iC(47112)) then
			return false;
		end;
		return true;
	end;
S[iC(47041)] = function(K)
		local Z = B();
		if not Z or not entity[iC(46868)](Z) then
			return;
		end;
		local O = 1;
		local d = S[iC(46971)](Z);
		S[iC(47077)][iC(46990)] = iC(46994);
		local C = S[iC(47195)](Z);
		local f = S[iC(47147)](Z);
		local L = ui[iC(46964)](S[iC(47010)][iC(46734)][1]) and ui[iC(46964)](S[iC(47010)][iC(46734)][2]);
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][2][iC(46891)]) and f <= 1.1 then
			O = 2;
			S[iC(47077)][iC(46990)] = iC(46889);
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][3][iC(46891)]) and f > 1.1 then
			O = 3;
			S[iC(47077)][iC(46990)] = iC(47104);
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][4][iC(46891)]) and L then
			O = 4;
			S[iC(47077)][iC(46990)] = iC(46888);
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][6][iC(46891)]) and C then
			O = 6;
			S[iC(47077)][iC(46990)] = iC(47036);
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][5][iC(46891)]) and d then
			O = 5;
			S[iC(47077)][iC(46990)] = iC(47146);
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][7][iC(46891)]) then
			if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47110)]) == iC(46913) and not S[iC(47144)](13) then
				O = 7;
				S[iC(47077)][iC(46990)] = iC(46818);
			elseif ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47110)]) == iC(46822) and yF() < S[iC(47077)][iC(47048)][2] then
				O = 7;
				S[iC(47077)][iC(46990)] = iC(46818);
			elseif ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47110)]) == iC(46747) and S[iC(47077)][iC(47048)][1] then
				O = 7;
				S[iC(47077)][iC(46990)] = iC(46818);
				if K[iC(47099)] == 0 and S[iC(47077)][iC(47048)][1] then
					S[iC(47077)][iC(47048)][1] = type(S[iC(47077)][iC(47048)][1]) == iC(46764) and 1 or S[iC(47077)][iC(47048)][1] + 1;
					if S[iC(47077)][iC(47048)][1] >= 2 then
						S[iC(47077)][iC(47048)][1] = false;
					end;
				end;
			end;
		end;
		return O;
	end;
S[iC(46950)] = function(S)
		while S > 180 do
			S = S - 360;
		end;
		while S < -180 do
			S = S + 360;
		end;
		return S;
	end;
S[iC(46881)] = function(S, K)
		local Z, O = dZ(vF(K)), BF(vF(K));
		local d, C = dZ(vF(S)), BF(vF(S));
		return C * O, C * Z, -d;
	end;
S[iC(46861)] = function(K, Z, O, d)
		if K == nil or Z == nil or O == nil or d == nil then
			return 0;
		end;
		local C = Z - d;
		local f = K - O;
		local L = math[iC(46850)](C / f);
		L = S[iC(46950)]((L * 180) / math[iC(47114)]);
		if f >= 0 then
			L = S[iC(46950)](L + 180);
		end;
		return L;
	end;
S[iC(47189)] = function(S, K, Z, O, d)
		local C = {};
		local f = {};
		local L = {};
		local R = { [iC(46870)] = nil, [iC(46864)] = 0 };
		C[0], f[0], L[0] = ZF(K, 1);
		if C[0] == nil or f[0] == nil or L[0] == nil then
			return 0;
		end;
		C[6], f[6], L[6] = C[0], f[0], L[0] - 40;
		C[3], f[3], L[3] = C[0] - 40, f[0], L[0];
		C[4], f[4], L[4] = C[0], f[0] - 40, L[0];
		C[1], f[1], L[1] = C[0] + 40, f[0], L[0];
		C[2], f[2], L[2] = C[0], f[0] + 40, L[0];
		C[5], f[5], L[5] = C[0], f[0], L[0] + 40;
		for S = 0, 6, 1 do
			local I, X = s(K, C[S], f[S], L[S], Z, O, d);
			if X > R[iC(46864)] then
				R[iC(46870)] = I;
				R[iC(46864)] = X;
			end;
		end;
		return R[iC(46870)] == nil and client[iC(46902)](S, 1, R[iC(46864)] == nil and 0 or R[iC(46864)]) or R[iC(46864)];
	end;
S[iC(46731)] = function()
		local K, Z, O = client[iC(46745)]();
		local d = globals[iC(46714)]();
		local C, f = client[iC(46841)]();
		local L = { [iC(47004)] = 0, [iC(47142)] = 0 };
		if S[iC(47077)][iC(47196)][iC(46901)] ~= 0 and d - S[iC(47077)][iC(47196)][iC(46711)] > 5 then
			S[iC(47077)][iC(47196)][iC(46711)] = 0;
			S[iC(47077)][iC(47196)][iC(46901)] = 0;
			S[iC(47077)][iC(47196)][iC(47207)] = 0;
		end;
		for S = f - 90, f + 90, 30 do
			if S ~= f then
				local d = math[iC(47192)](S);
				local C = S < f and iC(47004) or iC(47142);
				local R, I, X = K + 256 * math[iC(46797)](d), Z + 256 * math[iC(46756)](d), O;
				local y = client[iC(47169)](entity[iC(47035)](), K, Z, O, R, I, X);
				L[C] = L[C] + y;
			end;
		end;
		S[iC(47077)][iC(47196)][iC(46904)] = L[iC(47004)] < L[iC(47142)] and 2 or 1;
		if S[iC(47077)][iC(47196)][iC(46904)] == S[iC(47077)][iC(47196)][iC(47207)] then
			return;
		end;
		S[iC(47077)][iC(47196)][iC(47207)] = S[iC(47077)][iC(47196)][iC(46904)];
		if S[iC(47077)][iC(47196)][iC(46901)] ~= 0 then
			S[iC(47077)][iC(47196)][iC(46904)] = S[iC(47077)][iC(47196)][iC(46901)] == 1 and 1 or 2;
		end;
	end;
S[iC(47081)] = function(K)
		local Z = entity[iC(47035)]();
		local O, d = client[iC(47022)](K[iC(47202)]), client[iC(47022)](K[iC(46712)]);
		if Z == O and Z ~= d then
			S[iC(47077)][iC(47196)][iC(47207)] = 0;
			S[iC(47077)][iC(47196)][iC(46711)] = globals[iC(46714)]();
			S[iC(47077)][iC(47196)][iC(46901)] = S[iC(47077)][iC(47196)][iC(46904)];
		end;
	end;
S[iC(46974)] = function(K)
		S[iC(47077)][iC(46959)] = 1;
		local Z = client[iC(46790)]();
		local O = B();
		if Z == nil then
			return;
		end;
		local d, C, f = v();
		local L, R, I = k();
		local X, y, h = ZF(Z, 0);
		local e = S[iC(46861)](d, C, X, y);
		local V, F, m = S[iC(46881)](0, e + 90);
		local A = d + V * 15;
		local P = C + F * 15;
		local M, s, a = S[iC(46881)](0, e - 90);
		local z = d + M * 15;
		local r = C + s * 15;
		local u, E, w = S[iC(46881)](0, e + 90);
		local D = d + u * 100;
		local o = C + E * 100;
		local H, t, n = S[iC(46881)](0, e - 90);
		local b = d + H * 100;
		local c = C + t * 100;
		local Q = S[iC(47189)](O, Z, z, r, f);
		local i = S[iC(47189)](O, Z, A, P, f);
		local p = S[iC(47189)](O, Z, b, c, f);
		local g = S[iC(47189)](O, Z, D, o, f);
		if g > p or i > Q then
			S[iC(47077)][iC(46959)] = 1;
		elseif p > g or Q > i then
			S[iC(47077)][iC(46959)] = 2;
		end;
		S[iC(47077)][iC(46959)] = K == 1 and S[iC(47077)][iC(46959)] or ({ 2, 1 })[S[iC(47077)][iC(46959)]];
		if K == 3 then
			S[iC(46731)]();
			S[iC(47077)][iC(46959)] = S[iC(47077)][iC(47196)][iC(46904)];
		end;
	end;
S[iC(47078)] = function(Z)
		local O = B();
		if not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) or not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(47108)]) or not O or not entity[iC(46868)](O) then
			return;
		end;
		S[iC(47168)]();
		local d = ui[iC(46964)](S[iC(47010)][iC(47064)][2]) > 0;
		local C = S[iC(47077)][iC(47215)][iC(46996)][iC(46819)][S[iC(47041)](Z)];
		if Z[iC(47099)] == 0 then
			S[iC(47077)][iC(46921)] = not S[iC(47077)][iC(46921)];
		end;
		ui[iC(46825)](S[iC(47010)][iC(46740)], ui[iC(46964)](C[iC(46740)]));
		ui[iC(46825)](S[iC(47010)][iC(46883)][1], ui[iC(46964)](C[iC(46883)]));
		ui[iC(46825)](S[iC(47010)][iC(46777)][1], ui[iC(46964)](C[iC(46775)]));
		ui[iC(46825)](S[iC(47010)][iC(46743)], ui[iC(46964)](C[iC(46743)]));
		ui[iC(46825)](S[iC(47010)][iC(46777)][2], ui[iC(46964)](d and C[iC(47018)] or C[iC(47096)]));
		ui[iC(46825)](S[iC(47010)][iC(46883)][2], S[iC(46988)]() and 180 or ({ -90, 90 })[ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)])] or ui[iC(46964)](d and C[iC(47060)] or C[iC(47134)]));
		if ui[iC(46964)](C[iC(46681)]) ~= iC(46654) then
			if not ui[iC(46964)](C[iC(47243)]) then
				local K = client[iC(46790)]();
				local Z = ui[iC(46964)](d and C[iC(46987)] or C[iC(46771)]);
				if ui[iC(46825)](C[iC(46937)]) == iC(47221) then
					Z = S[iC(47077)][iC(46921)] and ui[iC(46964)](C[iC(46878)]) or Z;
				elseif ui[iC(46825)](C[iC(46937)]) == iC(47236) then
					Z = math[iC(46739)](ui[iC(46964)](C[iC(46878)]), Z);
				elseif ui[iC(46825)](C[iC(46937)]) == iC(46767) then
					Z = globals[iC(47039)]() % 2 == 0 and ui[iC(46964)](C[iC(46878)]) or Z;
				end;
				if S[iC(47033)]({ iC(46938), iC(47221), iC(46895) }, ui[iC(46964)](C[iC(46681)])) then
					local Z = ui[iC(46964)](C[iC(47129)]);
					ui[iC(46825)](S[iC(47010)][iC(47064)][1], ui[iC(46964)](C[iC(46681)]));
					if S[iC(47077)][iC(47050)][K] then
						Z = -Z;
					end;
					ui[iC(46825)](S[iC(47010)][iC(47064)][2], Z);
				else
					ui[iC(46825)](S[iC(47010)][iC(47064)][1], iC(46938));
					S[iC(46974)](({ [iC(46867)] = 1, [iC(46863)] = 2, [iC(47012)] = 3 })[ui[iC(46964)](C[iC(46681)])]);
					local Z = S[iC(47077)][iC(46959)] == 2 and ui[iC(46964)](C[iC(47129)]) or -ui[iC(46964)](C[iC(47129)]);
					if S[iC(47077)][iC(47050)][K] then
						Z = -Z;
					end;
					ui[iC(46825)](S[iC(47010)][iC(47064)][2], Z);
				end;
			else
				ui[iC(46825)](S[iC(47010)][iC(47210)], 50);
				ui[iC(46825)](S[iC(47010)][iC(47064)][1], iC(46938));
				ui[iC(46825)](S[iC(47010)][iC(47064)][2], ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46906)]) and 180 or -180);
				local O = ui[iC(46964)](ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46906)]) and C[iC(47123)] or C[iC(47233)]);
				if ui[iC(46825)](C[iC(47086)]) == iC(47221) then
					O = S[iC(47077)][iC(46921)] and ui[iC(46964)](C[iC(47209)]) or O;
				elseif ui[iC(46825)](C[iC(47086)]) == iC(47236) then
					O = math[iC(46739)](ui[iC(46964)](C[iC(47209)]), O);
				elseif ui[iC(46825)](C[iC(47086)]) == iC(46767) then
					O = globals[iC(47039)]() % 2 == 0 and ui[iC(46964)](C[iC(47209)]) or O;
				end;
				Z[iC(47210)] = O;
				S[iC(47185)](Z);
				local d = K[iC(47234)](iC(46667), S[iC(47183)][iC(46936)][0] + 124);
				if d ~= nil then
					d[0] = 0;
					ui[iC(46825)](S[iC(47010)][iC(46991)], false);
				end;
			end;
		else
			ui[iC(46825)](S[iC(47010)][iC(47210)], 0);
			ui[iC(46825)](S[iC(47010)][iC(47064)][1], iC(46654));
		end;
		if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)]) == 1 or ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)]) == 2 then
			ui[iC(46825)](S[iC(47010)][iC(46777)][1], iC(46654));
			ui[iC(46825)](S[iC(47010)][iC(47064)][1], iC(46938));
		end;
	end;
S[iC(46862)] = function()
		local K = B();
		if not K or not entity[iC(46868)](K) or not oF(S[iC(47010)][iC(46857)][1]) or not oF(S[iC(47010)][iC(46857)][2]) or oF(S[iC(47010)][iC(46685)]) then
			return false;
		end;
		local Z = entity[iC(47227)](K, iC(46733));
		if Z == nil then
			return false;
		end;
		local O = entity[iC(47227)](K, iC(47228)) + .25;
		local d = entity[iC(47227)](Z, iC(47112));
		return O - globals[iC(46714)]() < 0 and (d + .5) - globals[iC(46714)]() < 0;
	end;
S[iC(47139)] = function(S, K, Z, O, d, C, f, L, R)
		local I = iC(47158);
		local X = #R - 1;
		local y = (d - S) / X;
		local h = (L - O) / X;
		local e = (C - K) / X;
		local V = (f - Z) / X;
		for d = 1, X + 1, 1 do
			I = I .. (iC(47137)):format(S, K, Z, O, R:sub(d, d));
			S = S + y;
			K = K + e;
			Z = Z + V;
			O = O + h;
		end;
		return I;
	end;
S[iC(46851)] = function()
		local K = B();
		if not K or not entity[iC(46868)](K) or not ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47108)]) then
			return;
		end;
		local O, C = M();
		local f = m() % 3;
		local L = math[iC(46704)](math[iC(46756)](f * 4) * 84 + 127.5) or 255;
		local R = math[iC(47125)](57, entity[iC(47227)](K, iC(46804), 11) * 120 - 60);
		if S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47166)) then
			local Z = 0;
			local d = { ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46688)]) };
			if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47080)]) == iC(46660) then
				renderer[iC(47250)](O / 2 + 15, (C / 2 + Z * 10) + 30, 255, 255, 255, 255, iC(46949), 0, iC(46933));
				local f = math[iC(47125)](57, entity[iC(47227)](K, iC(46804), 11) * 120 - 60);
				renderer[iC(47250)]((O / 2 + 15) + gF(iC(46949), iC(46672)), (C / 2 + Z * 10) + 30, d[1], d[2], d[3], L, iC(46949), 0, iC(47171));
				Z = Z + 1;
				renderer[iC(47250)](O / 2 + 15, (C / 2 + Z * 10) + 30, 157, 47, 188, 255, iC(46949), 0, S[iC(47077)][iC(46990)]:upper());
				renderer[iC(47250)]((O / 2 + 15) + gF(iC(46949), S[iC(47077)][iC(46990)]:upper() .. iC(47132)), (C / 2 + Z * 10) + 30, 255, 255, 255, 255, iC(46949), 0, f > 0 and iC(47148) or iC(47097));
				Z = Z + 1;
				if ui[iC(46964)](S[iC(47010)][iC(46857)][1]) and ui[iC(46964)](S[iC(47010)][iC(46857)][2]) then
					if S[iC(46862)]() then
						renderer[iC(47250)](O / 2 + 15, (C / 2 + Z * 10) + 30, 0, 255, 0, 255, iC(46949), 0, iC(46673));
					else
						renderer[iC(47250)](O / 2 + 15, (C / 2 + Z * 10) + 30, 255, 0, 0, 255, iC(46949), 0, iC(46673));
					end;
					Z = Z + 1;
				end;
				renderer[iC(47250)](O / 2 + 15, (C / 2 + Z * 10) + 30, ui[iC(46964)](S[iC(47010)][iC(47009)]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47009)]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47009)]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47009)]) and 255 or 155, iC(46949), 0, iC(47201));
				renderer[iC(47250)](O / 2 + 37, (C / 2 + Z * 10) + 30, ui[iC(46964)](S[iC(47010)][iC(47204)][2]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47204)][2]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47204)][2]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47204)][2]) and 255 or 155, iC(46949), 0, iC(46713));
				renderer[iC(47250)](O / 2 + 50, (C / 2 + Z * 10) + 30, ui[iC(46964)](S[iC(47010)][iC(47074)][2]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47074)][2]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47074)][2]) and 255 or 155, ui[iC(46964)](S[iC(47010)][iC(47074)][2]) and 255 or 155, iC(46949), 0, iC(47199));
			else
				if ui[iC(46964)](S[iC(47010)][iC(47204)][2]) then
					S[iC(47077)][iC(46719)][iC(47067)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47067)], 15, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47136)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47136)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46772)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46772)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(47067)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47067)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47136)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47136)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46772)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46772)], 0, globals[iC(47184)]() * 6);
				end;
				if oF(S[iC(47010)][iC(46857)][2]) then
					S[iC(47077)][iC(46719)][iC(46834)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46834)], 15, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47255)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47255)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47115)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47115)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(46834)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46834)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47255)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47255)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47115)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47115)], 0, globals[iC(47184)]() * 6);
				end;
				if ui[iC(46964)](S[iC(47010)][iC(47074)][2]) then
					S[iC(47077)][iC(46719)][iC(46642)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46642)], 15, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46694)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46694)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47162)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47162)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(46642)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46642)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46694)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46694)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47162)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47162)], 0, globals[iC(47184)]() * 6);
				end;
				if ui[iC(46964)](S[iC(47010)][iC(47009)]) then
					S[iC(47077)][iC(46719)][iC(46839)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46839)], 15, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46827)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46827)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46697)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46697)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(46839)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46839)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46827)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46827)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46697)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46697)], 0, globals[iC(47184)]() * 6);
				end;
				if ui[iC(46964)](S[iC(47010)][iC(46685)]) then
					S[iC(47077)][iC(46719)][iC(46710)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46710)], 15, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46699)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46699)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46961)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46961)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(46710)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46710)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46699)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46699)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46961)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46961)], 0, globals[iC(47184)]() * 6);
				end;
				if ui[iC(46964)](S[iC(47010)][iC(46666)]) then
					S[iC(47077)][iC(46719)][iC(46705)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46705)], 15, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46802)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46802)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46869)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46869)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(46705)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46705)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46802)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46802)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46869)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46869)], 0, globals[iC(47184)]() * 6);
				end;
				if ui[iC(46964)](S[iC(47010)][iC(47109)][1]) and ui[iC(46964)](S[iC(47010)][iC(47109)][2]) then
					S[iC(47077)][iC(46719)][iC(46785)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46785)], 10, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47231)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47231)], 80, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46843)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46843)], 255, globals[iC(47184)]() * 6);
				else
					S[iC(47077)][iC(46719)][iC(46785)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46785)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(47231)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47231)], 0, globals[iC(47184)]() * 6);
					S[iC(47077)][iC(46719)][iC(46843)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46843)], 0, globals[iC(47184)]() * 6);
				end;
				local K = entity[iC(47035)]();
				local Z = CF(OF(B()), iC(47002));
				local d = entity[iC(47141)](K);
				local f = entity[iC(47227)](entity[iC(47141)](entity[iC(47035)]()), iC(47163));
				local I = ({
						[43] = true,
						[44] = true,
						[45] = true,
						[46] = true,
						[47] = true,
						[48] = true,
						[68] = true,
					})[f] or false;
				if Z == nil then
					Z = 0;
				end;
				if Z >= 1 or I then
					S[iC(47077)][iC(46719)][iC(46709)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46709)], 20, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(46880)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46880)], 5, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(47187)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47187)], 22, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(47235)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47235)], 0, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(46879)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46879)], 255, globals[iC(47184)]() * 8);
				else
					S[iC(47077)][iC(46719)][iC(47235)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47235)], 255, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(46879)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46879)], 0, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(46709)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46709)], 0, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(46880)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(46880)], 0, globals[iC(47184)]() * 8);
					S[iC(47077)][iC(46719)][iC(47187)] = S[iC(46774)](S[iC(47077)][iC(46719)][iC(47187)], 0, globals[iC(47184)]() * 8);
				end;
				local X = { ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46688)]) };
				local y = { ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46977)]) };
				local h = S[iC(47077)][iC(46719)][iC(47067)];
				local e = h + S[iC(47077)][iC(46719)][iC(46834)];
				local V = e + S[iC(47077)][iC(46719)][iC(46642)];
				local F = V + S[iC(47077)][iC(46719)][iC(46839)];
				local m = F + S[iC(47077)][iC(46719)][iC(46710)];
				local A = m + S[iC(47077)][iC(46719)][iC(46705)];
				local P = A + S[iC(47077)][iC(46719)][iC(46785)];
				local M = R;
				local s = math[iC(47205)](R) / 60;
				local a = math[iC(46704)](s * 60);
				local z = S[iC(47139)](X[1], X[2], X[3], 255, y[1], y[2], y[3], L, iC(47164));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], C / 2 + 30, 255, 255, 255, 255, iC(46984), 0, z:upper());
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(46709)], C / 2 + 40, 255, 255, 255, S[iC(47077)][iC(46719)][iC(47235)], iC(46984), 0, M > 0 and iC(47158) or iC(47158), string[iC(47020)](iC(47132) .. S[iC(47077)][iC(46990)]), iC(47132), string[iC(47020)](math[iC(46704)](math[iC(47205)](a))) .. iC(46845));
				renderer[iC(46999)]((O / 2 - 3) + S[iC(47077)][iC(46719)][iC(46880)], C / 2 + 39, math[iC(46704)](math[iC(47205)](a)), 4, S[iC(47077)][iC(47215)][iC(46851)][iC(46688)], S[iC(47077)][iC(46719)][iC(46879)], S[iC(47077)][iC(47215)][iC(46851)][iC(46977)], S[iC(47077)][iC(46719)][iC(46879)], true);
				renderer[iC(47250)]((O / 2 + 2) + S[iC(47077)][iC(46719)][iC(47187)], C / 2 + 40, 255, 255, 255, S[iC(47077)][iC(46719)][iC(46879)], iC(46984), 0, string[iC(47020)](iC(47132) .. S[iC(47077)][iC(46990)]), iC(47132), string[iC(47020)](math[iC(46704)](math[iC(47205)](a))) .. iC(46845));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], (C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(47067)]) / 1.5, 220, 220, 220, S[iC(47077)][iC(46719)][iC(46772)], iC(46984), nil, iC(46919));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], ((C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(46834)]) / 1.5) + h / 1.5, 0, 255, 0, S[iC(47077)][iC(46719)][iC(47115)], iC(46984), nil, iC(47219));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], ((C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(46642)]) / 1.5) + e / 1.5, 255, 38, 104, S[iC(47077)][iC(46719)][iC(47162)], iC(46984), nil, iC(46683));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], ((C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(46839)]) / 1.5) + V / 1.5, 170, 50, 255, S[iC(47077)][iC(46719)][iC(46697)], iC(46984), nil, iC(47201));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], ((C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(46710)]) / 1.5) + F / 1.5, 80, 80, 255, S[iC(47077)][iC(46719)][iC(46961)], iC(46984), nil, iC(47076));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], ((C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(46705)]) / 1.5) + m / 1.5, 210, 124, 11, S[iC(47077)][iC(46719)][iC(46869)], iC(46984), nil, iC(46978));
				renderer[iC(47250)](O / 2 + S[iC(47077)][iC(46719)][iC(47187)], ((C / 2 + 41) + UF(S[iC(47077)][iC(46719)][iC(46785)]) / .95) + A / 1.5, 20, 229, 236, S[iC(47077)][iC(46719)][iC(46843)], iC(46984), nil, iC(46658));
			end;
		end;
		if S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47145)) then
			local d = { ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46916)]) };
			if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46726)]) == iC(46791) then
				if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)]) == 1 then
					QF(O / 2 - 55, C / 2, d[1], d[2], d[3], 255, iC(47244), 0, iC(46979));
					QF(O / 2 + 55, C / 2, 25, 25, 25, 255, iC(47244), 0, iC(47126));
				elseif ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)]) == 2 then
					QF(O / 2 - 55, C / 2, 25, 25, 25, 255, iC(47244), 0, iC(46979));
					QF(O / 2 + 55, C / 2, d[1], d[2], d[3], 255, iC(47244), 0, iC(47126));
				elseif ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46996)][iC(46856)]) == 0 then
					QF(O / 2 - 55, C / 2, 25, 25, 25, 255, iC(47244), 0, iC(46979));
					QF(O / 2 + 55, C / 2, 25, 25, 25, 255, iC(47244), 0, iC(47126));
				end;
			else
				local O = ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47106)]);
				local d = { ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47182)]) };
				local C = Z(k());
				local f = Z(ZF(K, iC(47069)));
				local L = Z(ZF(K, iC(46730)));
				local R, I = client[iC(46912)]();
				local X, y = R / 2, I / 2.003;
				local h = S[iC(46950)]((S[iC(46861)](L[iC(47073)], L[iC(46814)], f[iC(47073)], f[iC(46814)]) - C[iC(46814)]) + 120);
				renderer[iC(46893)](X + 1, y, d[1], d[2], d[3], d[4], O * 1.833, h * -1 - 15, .14, 3.6);
			end;
		end;
		local I, X = client[iC(46912)]();
		if S[iC(47033)](S[iC(47077)][iC(47215)][iC(46851)][iC(46957)], iC(47190)) then
			local K, Z = client[iC(46912)]();
			local O, C = K / 2, Z / 2.003;
			local f = d[iC(47027)](entity[iC(46966)](entity[iC(47035)]()));
			f:draw((O - 952) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)]), (C - 4) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)]), nil, 33);
			renderer[iC(47250)]((O - 910) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)]), (C + 19) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)]), 255, 255, 255, 255, iC(47049), 0, iC(46829) .. string[iC(47087)](S[iC(47077)][iC(46990)]:upper()));
			local L = S[iC(47139)](132, 255, 255, 225, 89, 170, 255, 255, iC(46718));
			renderer[iC(47250)]((O - 910) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)]), (C - 7) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)]), 255, 255, 255, 255, iC(47049), 0, L);
			local R = S[iC(47139)](132, 255, 255, 160, 245, 60, 180, 255, iC(46723));
			renderer[iC(47250)]((O - 865) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)]), (C - 7) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)]), 255, 255, 255, 255, iC(47049), 0, R);
			renderer[iC(47250)]((O - 913) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)]), (C + 6) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)]), 255, 255, 255, 255, iC(47049), 0, iC(46693) .. F);
			renderer[iC(47250)]((O - 910) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(47153)]), (C + 19) + ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46851)][iC(46768)]), 255, 255, 255, 255, iC(47049), 0, iC(46829) .. string[iC(47087)](S[iC(47077)][iC(46990)]:upper()));
		end;
	end;
local FZ = ui[iC(47010)](iC(47053), iC(47238), iC(46728));
local mZ = entity[iC(47035)];
local AZ = entity[iC(46784)];
local PZ = entity[iC(46868)];
local MZ = client[iC(46779)];
local sZ = entity[iC(47211)];
local aZ = entity[iC(46980)];
local zZ = renderer[iC(46744)];
local rZ = globals[iC(46721)];
local uZ = globals[iC(47039)];
local EZ = entity[iC(47178)];
local wZ = entity[iC(47227)];
local DZ = math[iC(46704)];
local oZ = ui[iC(46964)];
local function HZ(S)
	return .5 + S / rZ();
end;
local function tZ(S, K, Z)
	if S < K then
		S = K;
	end;
	if S > Z then
		S = Z;
	end;
	return S;
end;
local nZ = function(S)
		return (S * 180) / math[iC(47114)];
	end;
local bZ = function(S)
		return (S * math[iC(47114)]) / 180;
	end;
local function cZ(S, K)
	return { S[1] - K[1], S[2] - K[2], S[3] - K[3] };
end;
local function QZ(S, K)
	return { S[1] + K[1], S[2] + K[2], S[3] + K[3] };
end;
local function iZ(S, K)
	return S * S + K * K;
end;
local pZ = {
		[iC(47005)] = nil,
		[iC(47045)] = 32,
		[iC(46824)] = {},
		[iC(46717)] = {},
	};
function pZ.should_lag_compensate(K, S)
	if pZ[iC(47005)] == nil or oZ(FZ) == iC(46654) then
		return false;
	end;
	if EZ(S) then
		return false;
	end;
	return true;
end;
function pZ.get_player_records(K, S)
	if S ~= nil and pZ[iC(46824)][S] ~= nil then
		return pZ[iC(46824)][S];
	end;
end;
function pZ.reset(K, S)
	pZ[iC(46824)][S] = {};
	pZ[iC(46717)][S] = {};
end;
function pZ.update_player_record_data(K, S)
	if S == nil then
		return;
	end;
	local Z = pZ[iC(46824)][S];
	local O = wZ(S, iC(47242));
	if Z == nil then
		pZ[iC(46824)][S] = {};
		Z = pZ[iC(46824)][S];
	end;
	if O > 0 and (#Z == 0 or #Z > 0 and Z[1][iC(47154)] ~= O) then
		local K = {
				[iC(47122)] = { wZ(S, iC(46989)) },
				[iC(47147)] = { wZ(S, iC(47213)) },
				[iC(46852)] = { wZ(S, iC(47072)) },
				[iC(47057)] = { wZ(S, iC(47057)) },
				[iC(47206)] = { wZ(S, iC(47206)) },
				[iC(47154)] = wZ(S, iC(47242)),
				[iC(47198)] = wZ(S, iC(47176)) ^ 2 > 0,
				[iC(46873)] = uZ(),
			};
		for K = pZ[iC(47045)], 2, -1 do
			pZ[iC(46824)][S][K] = pZ[iC(46824)][S][K - 1];
		end;
		pZ[iC(46824)][S][1] = K;
	end;
end;
function pZ.simulate_movement(K, S)
	local Z = cvar[iC(47175)]:get_int();
	local O = cvar[iC(46965)]:get_int();
	local d = Z * rZ();
	local C = S[iC(47122)];
	C = QZ(C, { S[iC(47147)][1] * rZ(), S[iC(47147)][2] * rZ(), S[iC(47147)][3] * rZ() });
	local f = client[iC(47169)](-1, S[iC(47122)][1], S[iC(47122)][2], S[iC(47122)][3], C[1], C[2], C[3]);
	if f == 1 then
		S[iC(47122)] = C;
	end;
	local L = client[iC(47169)](-1, S[iC(47122)][1], S[iC(47122)][2], S[iC(47122)][3], S[iC(47122)][1], S[iC(47122)][2], S[iC(47122)][3] - 2);
	S[iC(47198)] = L == 0;
	return S;
end;
function pZ.predict_player(O, S, K, Z)
	if not pZ:should_lag_compensate(S) then
		return;
	end;
	local d = {
			[iC(47015)] = S,
			[iC(47154)] = K[iC(47154)],
			[iC(47122)] = K[iC(47122)],
			[iC(47147)] = K[iC(47147)],
			[iC(47198)] = K[iC(47198)],
		};
	local C = K[iC(46873)] - Z[iC(46873)];
	local f = tZ(C, 1, 15);
	if f > 0 then
		local S = f;
		repeat
			d = pZ:simulate_movement(d);
			d[iC(47154)] = d[iC(47154)] + rZ();
			S = S - 1;
		until S == 0;
		return d;
	end;
end;
client[iC(47167)](iC(46783), function()
	pZ[iC(47005)] = mZ();
	if not pZ[iC(47005)] or not PZ(pZ[iC(47005)]) then
		return;
	end;
	local S = entity[iC(46784)](true);
	for K = 1, #S, 1 do
		local Z = S[K];
		if not pZ:should_lag_compensate(Z) then
			pZ:reset(Z);
		else
			pZ:update_player_record_data(Z);
		end;
	end;
end);
local function gZ(S, K, Z)
	if Z == nil or K == nil then
		return;
	end;
	local O = QZ({ wZ(K, iC(47057)) }, Z[iC(47122)]);
	local d = QZ({ wZ(K, iC(47206)) }, Z[iC(47122)]);
	local C = {
			{ O[1], O[2], O[3] },
			{ O[1], d[2], O[3] },
			{ d[1], d[2], O[3] },
			{ d[1], O[2], O[3] },
			{ O[1], O[2], d[3] },
			{ O[1], d[2], d[3] },
			{ d[1], d[2], d[3] },
			{ d[1], O[2], d[3] },
		};
	local f = {
			{ 0, 1 },
			{ 1, 2 },
			{ 2, 3 },
			{ 3, 0 },
			{ 5, 6 },
			{ 6, 7 },
			{ 1, 4 },
			{ 4, 8 },
			{ 0, 4 },
			{ 1, 5 },
			{ 2, 6 },
			{ 3, 7 },
			{ 5, 8 },
			{ 7, 8 },
			{ 3, 4 },
		};
	for K = 1, #f, 1 do
		if C[f[K][1]] ~= nil and C[f[K][2]] ~= nil then
			local Z = { MZ(S, C[f[K][1]][1], C[f[K][1]][2], C[f[K][1]][3]) };
			local O = { MZ(S, C[f[K][2]][1], C[f[K][2]][2], C[f[K][2]][3]) };
			zZ(Z[1], Z[2], O[1], O[2], 0, 252, 239, 220);
		end;
	end;
	local L = { wZ(K, iC(46989)) };
	local R = { MZ(S, L[1], L[2], L[3]) };
	local I = { MZ(S, O[1], O[2], O[3]) };
	if R[1] ~= nil and I[1] ~= nil then
		zZ(R[1], R[2], I[1], I[2], 0, 252, 239, 220);
	end;
	local X = sZ(K);
	local y = X == iC(47158) and -8 or 0;
	local h, e, V, F, m = aZ(K);
	if h ~= nil and (PZ(K) and m > 0) then
		local K = h + (V - h) / 2;
		if K ~= nil then
			local Z = m * 255;
			client[iC(46951)](S, K, (e - 15) + y, 0, 255, 0, Z > 220 and 220 or Z, iC(46984), 0, iC(47143));
		end;
	end;
end;
client[iC(47167)](iC(47246), function(S)
	local K = entity[iC(46784)](true);
	if not PZ(pZ[iC(47005)]) then
		return;
	end;
	for Z = 1, #K, 1 do
		local O = K[Z];
		if not pZ:should_lag_compensate(O) then
			return;
		end;
		local d = pZ:get_player_records(O);
		if d == nil then
			return;
		end;
		local C, f = d[1], d[2];
		if C == nil or f == nil then
			return;
		end;
		local L = cZ(C[iC(47122)], f[iC(47122)]);
		local R = iZ(L[1], L[2]);
		local I, X = C[iC(47147)][1], C[iC(47147)][2];
		local y = math[iC(46704)](math[iC(47125)](10000, math[iC(46795)](I * I + X * X) + .5));
		if y > 280 and iZ(L[1], L[2]) > 4096 then
			local K = pZ:predict_player(O, C, f);
			if K ~= nil then
				pZ[iC(46717)][O] = K;
				gZ(S, O, pZ[iC(46717)][O]);
			end;
		end;
	end;
end);
S[iC(46894)] = {
		[iC(47246)] = function()
			S[iC(46851)]();
		end,
		[iC(46903)] = function(K)
			S[iC(46758)](K);
		end,
		[iC(46821)] = function(K)
			S[iC(47078)](K);
		end,
		[iC(46885)] = function()
			S[iC(47161)]();
		end,
		[iC(46662)] = function(K)
			S[iC(47081)](K);
			S[iC(46908)](K);
		end,
		[iC(46972)] = function(K)
			S[iC(46944)](K);
		end,
		[iC(46871)] = function(K)
			S[iC(46900)]();
		end,
		[iC(47241)] = function(K)
			S[iC(46900)]();
		end,
		[iC(46817)] = function(K)
			S[iC(46900)]();
		end,
		[iC(47040)] = function(K)
			S[iC(46900)]();
		end,
		[iC(46649)] = function(K)
			S[iC(46934)]();
		end,
		[iC(47102)] = function(K)
			S[iC(46934)]();
		end,
		[iC(46686)] = function(K)
			S[iC(46934)]();
		end,
	};
S[iC(46703)] = function()
		local K = {};
		S[iC(46995)]();
		for S, Z in pairs(S[iC(47077)][iC(47215)][iC(47130)]) do
			table[iC(47173)](K, Z);
		end;
		for S, Z in pairs(S[iC(47077)][iC(47215)][iC(46707)]) do
			table[iC(47173)](K, Z);
		end;
		for S, Z in pairs(S[iC(47077)][iC(47215)][iC(46851)]) do
			table[iC(47173)](K, Z);
		end;
		for S, Z in pairs(S[iC(47077)][iC(47215)][iC(46996)]) do
			if S == iC(46819) then
				for S, Z in pairs(Z) do
					for S, Z in pairs(Z) do
						table[iC(47173)](K, Z);
					end;
				end;
			else
				table[iC(47173)](K, Z);
			end;
		end;
		ui[iC(46825)](S[iC(47010)][iC(46991)], true);
		for K, Z in pairs(K) do
			ui[iC(47179)](Z, S[iC(46995)]);
		end;
		for S, K in pairs(S[iC(46894)]) do
			client[iC(47167)](S, K);
		end;
	end;
S[iC(46703)]();
local function lZ()
	if ui[iC(46964)](S[iC(47077)][iC(47215)][iC(46707)][iC(47108)]) then
		ui[iC(46793)](S[iC(47010)][iC(46883)][2], false);
		ui[iC(46793)](S[iC(47010)][iC(46777)][1], false);
		ui[iC(46793)](S[iC(47010)][iC(46883)][1], false);
		ui[iC(46793)](S[iC(47010)][iC(46777)][2], false);
		ui[iC(46793)](S[iC(47010)][iC(46740)], false);
		ui[iC(46793)](S[iC(47010)][iC(47064)][1], false);
		ui[iC(46793)](S[iC(47010)][iC(47064)][2], false);
		ui[iC(46793)](S[iC(47010)][iC(46652)], false);
		ui[iC(46793)](S[iC(47010)][iC(46743)], false);
		ui[iC(46793)](S[iC(47010)][iC(46890)], false);
		ui[iC(46793)](S[iC(47010)][iC(47204)][1], false);
		ui[iC(46793)](S[iC(47010)][iC(47204)][2], false);
		ui[iC(46793)](S[iC(47010)][iC(47210)], false);
	else
		ui[iC(46793)](S[iC(47010)][iC(46883)][2], true);
		ui[iC(46793)](S[iC(47010)][iC(46777)][1], true);
		ui[iC(46793)](S[iC(47010)][iC(46883)][1], true);
		ui[iC(46793)](S[iC(47010)][iC(46777)][2], true);
		ui[iC(46793)](S[iC(47010)][iC(46740)], true);
		ui[iC(46793)](S[iC(47010)][iC(47064)][1], true);
		ui[iC(46793)](S[iC(47010)][iC(47064)][2], true);
		ui[iC(46793)](S[iC(47010)][iC(46652)], true);
		ui[iC(46793)](S[iC(47010)][iC(46743)], true);
		ui[iC(46793)](S[iC(47010)][iC(46890)], true);
		ui[iC(46793)](S[iC(47010)][iC(47204)][1], true);
		ui[iC(46793)](S[iC(47010)][iC(47204)][2], true);
		ui[iC(46793)](S[iC(47010)][iC(47210)], true);
	end;
end;
local kZ = 0;
local vZ = 0;
local JZ = 0;
local xZ = 0;
local BZ = 0;
local NZ = 0;
local function GZ(S)
 
end;
local function qZ(S)
	if S[iC(47099)] < kZ then
		NZ = BZ;
		BZ = xZ;
		xZ = JZ;
		JZ = vZ;
		vZ = kZ;
	end;
	kZ = S[iC(47099)];
end;
local TZ = ui[iC(46920)](iC(47152), iC(47059), iC(46935));
local WZ = ui[iC(46920)](iC(47152), iC(47059), iC(46708));
client[iC(47167)](iC(47246), GZ);
client[iC(47167)](iC(46821), qZ);
client[iC(47167)](iC(47246), lZ);
lZ();
local UZ = require(iC(47170));
local jZ = ui[iC(46732)](iC(47152), iC(47059), iC(46846));
local YZ = globals[iC(46663)];
local SC = require(iC(46886));
local KC = ui[iC(46732)](iC(46851), iC(47059), iC(46656));
local ZC = ui[iC(47247)](iC(46851), iC(47059), iC(46981), 255, 255, 255, 255);
local function OC()
	local S = j();
	local K = {};
	for Z = 1, YZ(), 1 do
		if wZ(S, iC(47200), Z) == 1 and N(Z) then
			K[#K + 1] = Z;
		end;
	end;
	return K;
end;
local function dC(S, K, Z, O, d, C, f, L, R)
	R = R or 1;
	nF(S, K, Z, R, d, C, f, L);
	nF(S, (K + O) - R, Z, R, d, C, f, L);
	nF(S, K + R, R, O - R * 2, d, C, f, L);
	nF((S + Z) - R, K + R, R, O - R * 2, d, C, f, L);
end;
local CC = {};
P(iC(47246), function()
	local S, K, Z, O = ui[iC(46964)](ZC);
	if not PZ(mZ()) then
		return;
	end;
	for S, K in ipairs(OC()) do
		local Z = (entity[iC(46982)](K))[iC(47068)];
		local O = SC(entity[iC(46646)](K));
		if Z > .05 then
			CC[K] = nil;
		elseif Z ~= 0 then
			CC[K] = O;
		end;
	end;
	for d, C in pairs(CC) do
		local f, L = HF(C[iC(47073)], C[iC(46814)], C[iC(47044)]);
		local R = SC(KF(mZ()));
		local I = R:dist(C);
		I = 4 - OZ(3, I / 1000);
		local X = 10 * I;
		local y = 20 * I;
		if f and ui[iC(46964)](ZC) then
			QF((f + X) - 49, (L - y) - 10, S, K, Z, O, iC(46949), nil, iC(47024));
			QF((f + X) - 14, (L - y) - 2, S, K, Z, O, iC(46949), nil, (sZ(d)):upper());
			dC(f - X / 2, L - y, X, y, S, K, Z, O);
			dC((f - X / 2) - 1, (L - y) - 1, X + 2, y + 2, 0, 0, 0, O / 1.875);
			dC((f - X / 2) + 1, (L - y) + 1, X - 2, y - 2, 0, 0, 0, O / 1.875);
		end;
	end;
end);
P(iC(46661), function()
	CC = {};
end);
P(iC(46659), function(S)
	local K = A(S[iC(47202)]);
	CC[K] = nil;
end);
client[iC(47167)](iC(46885), function()
	if not entity[iC(46868)](entity[iC(47035)]()) then
		return;
	end;
	if ui[iC(46964)](jZ) then
		local S = UZ[iC(47035)]();
		local K = S:get_prop(iC(47092));
		local Z = bit[iC(47006)](K, 1) ~= 0;
		if not Z then
			local K = S:get_anim_overlay(6);
			K[iC(47051)] = 1;
		end;
	end;
end);
local fC, LC = iC(47075), iC(46907);
local RC = table[iC(46805)]({
		fC,
		fC,
		LC,
		fC,
		LC,
		fC,
		LC,
		fC,
		LC,
		fC,
		fC,
		fC,
		LC,
		fC,
		LC,
		fC,
	});
local IC = renderer[iC(47061)](RC, 4, 4);
renderer[iC(47128)](IC, fC, y, w, h, 255, 255, 255, 255, iC(46763));
client[iC(47167)](iC(46668), function()
	local S, K = ui[iC(47208)]();
	if ui[iC(47140)]() then
		renderer[iC(46999)](S - 300, K + 80, 270, 2, 39, 245, 245, 255, 184, 39, 212, 255, true);
		renderer[iC(46738)](S - 300, K + 80, 270, 200, 0, 0, 0, 50);
		renderer[iC(47250)](S - 280, K + 90, 255, 255, 255, 255, iC(46949), 0, iC(47245));
		renderer[iC(47250)](S - 183, K + 90, 255, 135, 255, 255, iC(46949), 0, iC(46792));
		renderer[iC(47250)](S - 155, K + 90, 255, 255, 255, 255, iC(46949), 0, iC(46801));
		renderer[iC(47250)](S - 135, K + 90, 255, 255, 255, 255, iC(46949), 0, iC(47094));
		renderer[iC(47250)](S - 113.1, K + 90, 30, 255, 0, 255, iC(46949), 0, iC(46769));
		renderer[iC(47250)](S - 280, K + 105, 255, 255, 255, 255, iC(46949), 0, iC(46757));
		renderer[iC(47250)](S - 280, K + 120, 255, 255, 255, 255, iC(46949), 0, iC(46860));
		renderer[iC(47250)](S - 270, K + 130, 255, 255, 255, 255, iC(46949), 0, iC(46865));
		renderer[iC(47250)](S - 270, K + 140, 255, 255, 255, 255, iC(46949), 0, iC(46947));
		renderer[iC(47250)](S - 270, K + 150, 255, 255, 255, 255, iC(46949), 0, iC(46997));
		renderer[iC(47250)](S - 270, K + 160, 255, 255, 255, 255, iC(46949), 0, iC(47038));
		renderer[iC(47250)](S - 270, K + 170, 255, 255, 255, 255, iC(46949), 0, iC(47197));
		renderer[iC(47250)](S - 270, K + 180, 255, 255, 255, 255, iC(46949), 0, iC(46917));
		renderer[iC(47250)](S - 280, K + 200, 255, 255, 255, 255, iC(46949), 0, iC(47138));
		renderer[iC(47250)](S - 270, K + 210, 0, 255, 0, 255, iC(46949), 0, iC(46776));
		renderer[iC(47250)](S - 270, K + 220, 0, 255, 0, 255, iC(46949), 0, iC(47037));
		renderer[iC(47250)](S - 270, K + 230, 0, 255, 0, 255, iC(46949), 0, iC(47186));
		renderer[iC(47250)](S - 270, K + 245, 35, 235, 185, 255, iC(46949), 0, iC(47232));
		renderer[iC(47250)](S - 230, K + 260, 255, 0, 120, 255, iC(46949), 0, iC(47046));
	end;
end);
local XC, yC = 5, 120;
local hC = nil;
local eC = { iC(47152), iC(47059) };
local VC = {
		iC(47025),
		iC(46689),
		iC(46994),
		iC(46847),
		iC(46826),
	};
local FC = {
		iC(47180),
		iC(47117),
		iC(46994),
		iC(46671),
		iC(46753),
	};
local mC = {};
mC[iC(46992)] = ui[iC(46920)](eC[1], eC[2], iC(46935));
mC[iC(47253)] = ui[iC(46732)](eC[1], eC[2], iC(46849));
mC[iC(46842)] = ui[iC(47065)](eC[1], eC[2], iC(46678), mC[iC(47253)]);
mC[iC(46676)] = ui[iC(47026)](eC[1], eC[2], iC(46948), 1, 5, 3, true, iC(47158), 1, VC);
mC[iC(47021)] = ui[iC(47026)](eC[1], eC[2], iC(46932), 1, 5, 3, true, iC(47158), 1, FC);
mC[iC(47249)] = ui[iC(46920)](eC[1], eC[2], iC(47216));
mC[iC(46896)] = ui[iC(47247)](eC[1], eC[2], iC(46691), 255, 255, 255, 255);
mC[iC(46914)] = ui[iC(46920)](eC[1], eC[2], iC(46897));
mC[iC(46741)] = ui[iC(47247)](eC[1], eC[2], iC(47055), 255, 255, 255, 255);
local AC, PC = ui[iC(47010)](iC(47053), iC(47238), iC(46675));
local function MC(S, K)
	for Z, O in pairs(S) do
		if type(S[Z]) == iC(46926) then
			for O, d in pairs(S[Z]) do
				ui[iC(46793)](S[Z][O], K);
			end;
		else
			ui[iC(46793)](S[Z], K);
		end;
	end;
end;
local function sC(S, K, Z, O)
	if S == nil then
		return {
			[iC(46763)] = 255,
			[iC(46838)] = 255,
			[iC(47049)] = 255,
			[iC(47030)] = 255,
		};
	elseif type(S) == iC(47085) then
		return {
			[iC(46763)] = math[iC(46704)](S) or 255,
			[iC(46838)] = math[iC(46704)](K) or 255,
			[iC(47049)] = math[iC(46704)](Z) or 255,
			[iC(47030)] = math[iC(46704)](O) or 255,
		};
	elseif type(S) == iC(46926) then
		return {
			[iC(46763)] = math[iC(46704)](S[1]) or 255,
			[iC(46838)] = math[iC(46704)](S[2]) or 255,
			[iC(47049)] = math[iC(46704)](S[3]) or 255,
			[iC(47030)] = math[iC(46704)](S[4]) or 255,
		};
	else
		return error(iC(47093) .. type(S));
	end;
end;
local function aC(S, K, Z)
	local O = Z and client[iC(47167)] or client[iC(46918)];
	O(S, K);
end;
local function zC(S, K)
	local Z, O;
	if K == nil then
		O, Z = S, SC(client[iC(46745)]());
		if Z[iC(47073)] == nil then
			return;
		end;
	else
		Z, O = S, K;
	end;
	local d = O - Z;
	if d[iC(47073)] == 0 and d[iC(46814)] == 0 then
		return 0, d[iC(47044)] > 0 and 270 or 90;
	else
		local S = math[iC(46665)](math[iC(46942)](d[iC(46814)], d[iC(47073)]));
		local K = math[iC(46795)](d[iC(47073)] * d[iC(47073)] + d[iC(46814)] * d[iC(46814)]);
		local Z = math[iC(46665)](math[iC(46942)](-d[iC(47044)], K));
		return Z, S;
	end;
end;
local function rC(S, K)
	if S and not K then
		return S;
	elseif not S and K then
		return K;
	end;
	if S[iC(47159)] and K[iC(47159)] then
		if S[iC(47021)] < K[iC(47021)] then
			K[iC(47159)] = false;
			return S;
		elseif S[iC(47021)] > K[iC(47021)] then
			S[iC(47159)] = false;
			return K;
		end;
	else
		return S[iC(47159)] and S or K;
	end;
end;
local function uC(S, K, Z, O, d, C)
	local f, L, R = 15, 0, 0;
	local I = d;
	while L < 1 and f < scan_length do
		d = K + O * f;
		_, L = client[iC(47071)](S, Z[iC(47073)], Z[iC(46814)], Z[iC(47044)], d[iC(47073)], d[iC(46814)], d[iC(47044)]);
		f = f + scan_width;
		local C, X = client[iC(47169)](entity[iC(47035)](), I[iC(47073)], I[iC(46814)], I[iC(47044)], d[iC(47073)], d[iC(46814)], d[iC(47044)]);
		if C < 1 and R > 4 then
			return nil;
		end;
		I = d;
		R = R + 1;
	end;
	return f <= scan_length and {
		[iC(47159)] = true,
		[iC(46886)] = d,
		[iC(46701)] = S,
		[iC(47021)] = f,
		[iC(46904)] = C,
	} or nil;
end;
local function EC(S)
	local K = math[iC(46756)](math[iC(47192)](S[iC(47073)]));
	local Z = math[iC(46797)](math[iC(47192)](S[iC(47073)]));
	local O = math[iC(46756)](math[iC(47192)](S[iC(46814)]));
	local d = math[iC(46797)](math[iC(47192)](S[iC(46814)]));
	local C = math[iC(46756)](math[iC(47192)](S[iC(47044)]));
	local f = math[iC(46797)](math[iC(47192)](S[iC(47044)]));
	return SC(((-1 * C) * K) * d + (-1 * f) * -O, ((-1 * C) * K) * O + (-1 * f) * d, (-1 * C) * Z);
end;
local function wC(S)
	if S == -1 then
		return nil;
	end;
	if not entity[iC(46868)](S) or not entity[iC(46816)](S) then
		return nil;
	end;
	local K = entity[iC(47035)]();
	local Z = SC(client[iC(46745)]());
	local O = SC(entity[iC(46646)](K));
	local d = SC(entity[iC(47227)](S, iC(46989)));
	local C = d + SC(entity[iC(47227)](S, iC(47149)));
	local f, L = zC(O, d);
	local R = SC(f, L, 0);
	local I = EC(R);
	local X = I * -1;
	local y = Z + X * scan_width;
	local h = Z + I * scan_width;
	local e = SC(entity[iC(46848)](K, 1));
	local V, F = client[iC(47071)](S, C[iC(47073)], C[iC(46814)], C[iC(47044)], e[iC(47073)], e[iC(46814)], e[iC(47044)]);
	if F <= 0 then
		local K = uC(S, Z, C, X, y, iC(47004));
		local O = uC(S, Z, C, I, h, iC(47142));
		return (K or O) and rC(K, O) or nil;
	else
		return nil;
	end;
end;
local function DC(S, K)
	local Z = entity[iC(47035)]();
	local O = { ((SC(entity[iC(46646)](Z))):to(K)):angles() };
	local d, C = O[1], O[2];
	S[iC(46898)] = 1;
	S[iC(46887)] = 0;
	S[iC(46915)] = 0;
	S[iC(46655)] = 0;
	S[iC(46641)] = 0;
	S[iC(46690)] = 800;
	S[iC(47031)] = 0;
	S[iC(46836)] = C;
end;
local function oC()
	local S = client[iC(46790)]();
	if not S then
		return;
	end;
	local K = wC(S);
	local Z = wC(scan_result and scan_result[iC(46701)] or -1);
	if not Z and K then
		scan_result = K;
	elseif Z and K then
		scan_result = K[iC(47021)] < Z[iC(47021)] and K or Z;
	elseif not Z and not K then
		scan_result = nil;
	end;
end;
local function HC()
	if not scan_result then
		return;
	end;
	local S = entity[iC(47035)]();
	if not S or not entity[iC(46868)](S) then
		return;
	end;
	local K = SC(entity[iC(46646)](S));
	local Z = sC({ ui[iC(46964)](mC[iC(46896)]) });
	local O = sC({ ui[iC(46964)](mC[iC(46741)]) });
	local d = scan_result[iC(46886)];
	local C, f = renderer[iC(46779)](d[iC(47073)], d[iC(46814)], d[iC(47044)]);
	if C ~= nil and f ~= nil then
		local S, L = renderer[iC(46779)](d[iC(47073)], d[iC(46814)], K[iC(47044)]);
		renderer[iC(47250)](C, f - 15, Z[iC(46763)], Z[iC(46838)], Z[iC(47049)], Z[iC(47030)], iC(46692), 0, iC(46737));
		renderer[iC(46744)](C, f, S, L, O[iC(46763)], O[iC(46838)], O[iC(47049)], O[iC(47030)]);
	end;
end;
local function tC(S)
	if not scan_result or not ui[iC(46964)](mC[iC(46842)]) then
		return;
	end;
	if not scan_result[iC(46886)] then
		return;
	end;
	DC(S, scan_result[iC(46886)]);
end;
local function nC()
	local S = entity[iC(47035)]();
	if not S then
		return;
	end;
	local K = entity[iC(46868)](S);
	if not K then
		return;
	end;
	scan_width, scan_length = ui[iC(46964)](mC[iC(46676)]) * 2, ui[iC(46964)](mC[iC(47021)]) * 40;
	HC();
end;
local function bC(S)
	MC({
		mC[iC(46676)],
		mC[iC(47021)],
		mC[iC(47249)],
		mC[iC(46896)],
		mC[iC(46741)],
		mC[iC(46914)],
	}, S);
end;
local function cC()
	local S = ui[iC(46964)](mC[iC(47253)]);
	bC(S);
	local K = client[S and iC(47167) or iC(46918)];
	K(iC(47246), nC);
	K(iC(46821), tC);
	K(iC(46807), oC);
end;
ui[iC(47179)](mC[iC(47253)], cC);
bC();
print(name, " has been loaded!")
end
scripts["essentials"] = function(name, check)
scripts[name] = loader
if check ~= secret and not reached then return end
print("loading: ", name)
--Reqs
local images = require 'gamesense/images'
local http = require 'gamesense/http'
--Reqs End

--Mewtwo.Technologies Fakelag made by LynX
local fakelag_enabled = ui.new_checkbox("AA", "Fake lag", "\a12EC0997Enable \abbc4fbffMe\abbc4fbffwt\ac9bdf9ffwo.\ad6b6f7ffTe\ae4aff5ffch\ae4aff5ffno\afea1f1fflo\aff96edffgies Fakelag")
local amount_mode = ui.new_combobox("AA", "Fake lag", "Fakelag Amount", "Dynamic", "Maximum", "Fluctuate")
local variance_slider = ui.new_slider("AA", "Fake lag", "Fakelag Variance", 0, 100, 0, true, "%")
local fakelag_limit = ui.new_slider("AA", "Fake lag", " Fakelag Limit", 1, 16, 13, true)
local fakelag_fluctuate_limit = ui.new_slider("AA", "Fake lag", " Fakelag Fluctuate Limit", 1, 16, 1, true)
local variance_mode = ui.new_combobox("AA", "Fake lag", "Fakelag Variance Types", "Random", "Fluctuate")
local fakelag_slider_trigger = ui.new_multiselect("AA", "Fake lag", "Select Fake-Lag Limiters", {"In Air Limit", "Fired Limit", "Wall Peek Limit", "Visible Limit"})
local trigger_aerial_limit = ui.new_slider("AA", "Fake lag", "In Air Limit", 1, 16, 13, true)
local trigger_fired_limit = ui.new_slider("AA", "Fake lag", "Fired Limit", 1, 16, 1, true)
local trigger_wall_limit = ui.new_slider("AA", "Fake lag", "Wall Peek Limit", 1, 16, 13, true)
local trigger_visible_limit = ui.new_slider("AA", "Fake lag", "Visible Limit ", 1, 16, 13, true)
local fakelag_trigger_types = ui.new_combobox("AA", "Fake lag", "Fakelag Trigger Types", "Fakelag Send Packet Trigger","Fakelag Limiter")
local fakelag_send_packet_trigger = ui.new_multiselect("AA", "Fake lag", "Fakelag Triggers Settings", {"On Standing", "While Moving", "On Duck", "On High Speed", "On Jump", "On Exploit", "On Use", "On Freezetime", "Weapon Switch", "Weapon Reload", "Weapon Fired", "On Land", "While Climbing Ladder"})
local fakelag_limit_trigger_limit = ui.new_slider("AA", "Fake lag", "Unselected Triggers Limiter", 1, 16, 3, true)
local lagcomp_break = ui.new_checkbox("AA", "Fake lag", "Break Lag Compstation")

local limit = ui.reference("AA", "Fake lag", "Limit")
local amount = ui.reference("AA", "Fake lag", "Amount")
local variance = ui.reference("AA", "Fake lag", "Variance")
local ref_pitch = ui.reference("AA", "Anti-aimbot angles", "Pitch")
local ref_fakeduck = ui.reference("RAGE", "Other", "Duck peek assist")
local ref_yawbase = ui.reference("AA", "Anti-aimbot angles", "Yaw base")
local slow_walk, slow_hotkey =  ui.reference("AA", "Other", "Slow motion")
local ref_yaw, ref_yawslider = ui.reference("AA", "Anti-aimbot angles", "Yaw")
local on_shot, on_shot_hotkey = ui.reference("AA", "Other", "On shot anti-aim")
local double_tap, double_tap_hotkey = ui.reference("RAGE", "Aimbot", "Double tap")
local ref_jitter, ref_jitterslider = ui.reference("AA", "Anti-aimbot angles", "Yaw jitter")
local bodyyaw, bodyyaw_slider = ui.reference("AA", "Anti-aimbot angles", "Body yaw")
--local fakelag_urmaxprocess = ui.reference("MISC", "Settings", "sv_maxusrcmdprocessticks")
local freestanding_bodyyaw =  ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw")

--ui.set_visible(fakelag_urmaxprocess, true)
local directionadd = 0
local desyncside = LEFT
local noenemies = false
local LEFT, RIGHT = 1, 2
local aadirection = "LEFT"
local stored_target = false
local aadirection = "BACK"
local flags_on_land = false
local State = "Default"
local weapon_visible = false
local last_manual_presstime = 0
local trigger_send_packet = true

local lag_info = {
    current_phase = 1,
    prev_choked = 15
}

local lag_shit = {{
    variance = 0,
    limit = 13,
    break_lagcomp = true,
    amount = "Dynamic"
},

{
    variance = 0,
    limit = 13,
    break_lagcomp = false,
    amount = "Dynamic"
}}


local weapons_disabled = {
    "CKnife",
    "CWeaponTaser",
    "CC4",
    "CHEGrenade",
    "CSmokeGrenade",
    "CMolotovGrenade",
    "CSensorGrenade",
    "CFlashbang",
    "CDecoyGrenade",
    "CIncendiaryGrenade"
}

local cache = { }
local data = {
    threshold = false,
    stored_last_shot = 0,
    stored_item = 0
}

local function multi_select(tab, val, sys)
	for index, value in ipairs(tab) do
		if sys == 1 and index == val then
			return true
		elseif value == val then
			return true
		end
	end
		return false
end


local function vec_3(_x, _y, _z)
	return { x = _x or 0, y = _y or 0, z = _z or 0 }
end

local function ticks_to_time(ticks)
	return globals.tickinterval() * ticks
end

local function player_will_peek(e)
	local local_player = entity.get_local_player()
	if not local_player or not entity.is_alive(local_player) then
		return
	end

	local enemies = entity.get_players(true)
	if not enemies then
		return false
	end

	local eye_position = vec_3(client.eye_position())
	local velocity_prop_local = vec_3( entity.get_prop(entity.get_local_player(), "m_vecVelocity"))
	local predicted_eye_position = vec_3( eye_position.x + velocity_prop_local.x * ticks_to_time(16), eye_position.y + velocity_prop_local.y * ticks_to_time(16), eye_position.z + velocity_prop_local.z * ticks_to_time(16))

	for i = 1, #enemies do
		local player = enemies[i]
		local velocity_prop = vec_3(entity.get_prop(player, "m_vecVelocity"))
		local origin = vec_3(entity.get_prop(player, "m_vecOrigin"))
		local predicted_origin = vec_3(origin.x + velocity_prop.x * ticks_to_time(16), origin.y + velocity_prop.y * ticks_to_time(16), origin.z + velocity_prop.z * ticks_to_time(16))
		entity.get_prop(player, "m_vecOrigin", predicted_origin)
		local head_origin = vec_3(entity.hitbox_position(player, 0))
		local predicted_head_origin = vec_3( head_origin.x + velocity_prop.x * ticks_to_time(16), head_origin.y + velocity_prop.y * ticks_to_time(16), head_origin.z + velocity_prop.z * ticks_to_time(16))
		local trace_entity, damage = client.trace_bullet( entity.get_local_player(), predicted_eye_position.x, predicted_eye_position.y, predicted_eye_position.z, predicted_head_origin.x, predicted_head_origin.y, predicted_head_origin.z)
		entity.get_prop(player, "m_vecOrigin", origin)

		if damage > 0 then
			return true
		end
	end

	return false
end


local function vec2_distance(f_x, f_y, t_x, t_y)
	local delta_x, delta_y = f_x - t_x, f_y - t_y
	return math.sqrt(delta_x*delta_x + delta_y*delta_y)
end

local function get_all_player_positions(ctx, screen_width, screen_height, enemies_only)
	local local_player = entity.get_local_player()
	if not local_player or not entity.is_alive(local_player) then
		return
	end

	local player_indexes = {}
	local player_positions = {}
	local players = entity.get_players(enemies_only)

	if #players == 0 then
		return
	end

	for i=1, #players do
		local player = players[i]
		local px, py, pz = entity.get_prop(player, "m_vecOrigin")
		local vz = entity.get_prop(player, "m_vecViewOffset[2]")
		if pz ~= nil and vz ~= nil then
		pz = pz + (vz*0.5)

		local sx, sy = client.world_to_screen(ctx, px, py, pz)
			if sx ~= nil and sy ~= nil then
				if sx >= 0 and sx <= screen_width and sy >= 0 and sy <= screen_height then 
					player_indexes[#player_indexes+1] = player
					player_positions[#player_positions+1] = {sx, sy}
				end
			end
		end
	end
		return player_indexes, player_positions
	end

local function check_fov(ctx)
	local local_player = entity.get_local_player()
	if not local_player or not entity.is_alive(local_player) then
		return
	end

	local screen_width, screen_height = client.screen_size()
	local screen_center_x, screen_center_y = screen_width*0.5, screen_height*0.5
	local fov_limit = 250
	
	if get_all_player_positions(ctx, screen_width, screen_height, true) == nil then
		return
	end

	local enemy_indexes, enemy_coords = get_all_player_positions(ctx, screen_width, screen_height, true)
	if #enemy_indexes <= 0 then
		return true
	end

	if #enemy_coords == 0 then
		return true
	end

	local closest_fov = 133337
	local closest_entindex = 133337

	for i=1, #enemy_coords do
		local x = enemy_coords[i][1]
		local y = enemy_coords[i][2]
		local current_fov = vec2_distance(x, y, screen_center_x, screen_center_y)

		if current_fov < closest_fov then
			closest_fov = current_fov -- found a target that is closer to center of our screen
			closest_entindex = enemy_indexes[i]
		end
	end
		return closest_fov > fov_limit, closest_entindex
	end

local function can_see(ent)	
	for i=0, 18 do
		if client.visible(entity.hitbox_position(ent, i)) then
			return true
		end
	end
		return false
	end

local function visible_enemy(ctx)
	local local_entindex = entity.get_local_player()
	if entity.get_prop(local_entindex, "m_lifeState") ~= 0 then	
		weapon_visible = false
		return
	end
	
	local enemy_visible, enemy_entindex = check_fov(ctx)
	if enemy_entindex == nil then
		return
	end
	
	if enemy_visible and enemy_entindex ~= nil and stored_target ~= enemy_entindex then
		stored_target = enemy_entindex
	end

	local visible = can_see(enemy_entindex)
	if visible then
		weapon_visible = true
	else
		weapon_visible = false
	end

	stored_target = enemy_entindex
	local enemy_player_number = entity.get_players(true)
end

client.set_event_callback("paint",visible_enemy)

client.set_event_callback("weapon_fire", function(e)
	local localplayer = entity.get_local_player()
	if not localplayer or not entity.is_alive(localplayer) or not client.userid_to_entindex(e.userid) == localplayer then
		return
	end

	flags_weapon_reload = true
	client.delay_call(0.45, function(reload)
		flags_weapon_reload = false
	end)
end)


local function status_lagshift(e)
	local local_player = entity.get_local_player()
	if not local_player or not entity.is_alive(local_player) or not ui.get(fakelag_enabled) then
		return
	end

	local player_move_type = entity.get_prop(local_player, "m_movetype")
	local flags_status = entity.get_prop(local_player, "m_fFlags")
	local flags_climbing_adder = player_move_type == 9
	local can_fire_wall = player_will_peek()

	if ui.get(amount_mode) == "Dynamic" then
		lag_new_amo = "Dynamic"
		lag_get_limit = - ui.get(variance_slider) * 0.01
		lag_variance_limit = - lag_get_limit * ui.get(fakelag_limit)
		lag_variance_fixer = lag_variance_limit <= 0 and lag_variance_limit or lag_variance_limit
		lag_variance_status = ui.get(variance_mode) == "Random" and math.random(ui.get(fakelag_limit) - lag_variance_fixer, ui.get(fakelag_limit)) or ui.get(fakelag_limit) - ui.get(variance_slider) * 0.01 * ui.get(fakelag_limit)
		lag_first_limit = lag_variance_status
		lag_two_limit = ui.get(fakelag_limit)
	elseif ui.get(amount_mode) == "Maximum" then
		lag_new_amo = "Maximum"
		lag_get_limit = - ui.get(variance_slider) * 0.01
		lag_variance_limit = - lag_get_limit * ui.get(fakelag_limit)
		lag_variance_fixer = lag_variance_limit <= 0 and lag_variance_limit or lag_variance_limit
		lag_variance_status = ui.get(variance_mode) == "Random" and math.random(ui.get(fakelag_limit) - lag_variance_fixer, ui.get(fakelag_limit)) or ui.get(fakelag_limit) - ui.get(variance_slider) * 0.01 * ui.get(fakelag_limit)
		lag_first_limit = lag_variance_status
		lag_two_limit = ui.get(fakelag_limit)
	elseif ui.get(amount_mode) == "Fluctuate" then
		lag_new_amo = "Fluctuate"
		lag_get_limit = - ui.get(variance_slider) * 0.01
		lag_variance_limit = - lag_get_limit * ui.get(fakelag_limit)
		lag_variance_fixer = lag_variance_limit <= 0 and lag_variance_limit or lag_variance_limit
		lag_variance_status = ui.get(variance_mode) == "Random" and math.random(ui.get(fakelag_limit) - lag_variance_fixer, ui.get(fakelag_limit)) or ui.get(fakelag_limit) - ui.get(variance_slider) * 0.01 * ui.get(fakelag_limit)
		lag_first_limit = lag_variance_status
		lag_two_limit = ui.get(fakelag_fluctuate_limit)
	end

	if multi_select(ui.get(fakelag_slider_trigger), "Wall Peek Limit") and can_fire_wall == true and weapon_visible == false then
		lag_first_limit = ui.get(amount_mode) == "Fluctuate" and ui.get(fakelag_fluctuate_limit) or ui.get(trigger_wall_limit)
		lag_two_limit = ui.get(trigger_wall_limit)
	else
		lag_first_limit = lag_first_limit < 1 and 1 or lag_first_limit
		lag_two_limit = lag_two_limit < 1 and 1 or lag_two_limit
	end

	if multi_select(ui.get(fakelag_slider_trigger), "Visible Limit") and weapon_visible == true then
		lag_first_limit = ui.get(amount_mode) == "Fluctuate" and ui.get(fakelag_fluctuate_limit) or ui.get(trigger_visible_limit)
		lag_two_limit = ui.get(trigger_visible_limit)
	else
		lag_first_limit = lag_first_limit < 1 and 1 or lag_first_limit
		lag_two_limit = lag_two_limit < 1 and 1 or lag_two_limit
	end

	if multi_select(ui.get(fakelag_slider_trigger), "In Air Limit") and flags_status == 256 and not flags_climbing_adder then
		lag_first_limit = ui.get(amount_mode) == "Fluctuate" and ui.get(fakelag_fluctuate_limit) or ui.get(trigger_aerial_limit)
		lag_two_limit = ui.get(trigger_aerial_limit)
	else
		lag_first_limit = lag_first_limit < 1 and 1 or lag_first_limit
		lag_two_limit = lag_two_limit < 1 and 1 or lag_two_limit
	end

	lag_shit ={{
		variance = 0,
		limit = lag_first_limit,
		break_lagcomp = true,
		amount = lag_new_amo
	},
	{
		variance = 0,
		limit = lag_two_limit,
		break_lagcomp = false,
		amount = lag_new_amo
	}}
end

client.set_event_callback("setup_command", status_lagshift)

client.set_event_callback("setup_command", function(cmd)
	local localplayer = entity.get_local_player()
	if not localplayer or not entity.is_alive(localplayer) or not ui.get(fakelag_enabled) then
		return
	end

	local flags_weapon_switch = cmd.weaponselect
	local flags_on_use = cmd.in_use
	local trigger_choked = cmd.chokedcommands
	local vx, vy, vz = entity.get_prop(localplayer, "m_vecVelocity")
	local velocity_speed = math.sqrt((vx * vx) + (vy * vy))
	local onground = (bit.band(entity.get_prop(localplayer, "m_fFlags"), 1) == 1)
	local infiniteduck = (bit.band(entity.get_prop(localplayer, "m_fFlags"), 2) == 2)
	local slowwalking = ui.get(slow_walk) and ui.get(slow_hotkey)
	local exploit = ui.get(on_shot) and ui.get(on_shot_hotkey) or ui.get(double_tap) and ui.get(double_tap_hotkey) or ui.get(ref_fakeduck)
	local weapons = entity.get_player_weapon(localplayer)
	local next_attack = entity.get_prop(weapons, "m_flNextPrimaryAttack")
	local tickbase_shift = entity.get_prop(localplayer, "m_nTickBase")
	local fired_shoot = next_attack <= tickbase_shift * globals.tickinterval() - 0.12
	local in_freeze_time = entity.get_prop(entity.get_game_rules(), "m_bFreezePeriod") == 1
	local player_move_type = entity.get_prop(localplayer, "m_movetype")
	local flags_climbing_adder = player_move_type == 9

	local flags_on_land = false
	if not onground then
		client.delay_call(0.75, function(land)
			flags_on_land = true
		end)

		client.delay_call(0.9, function(land)
			flags_on_land = false
		end)
	end

	if velocity_speed < 5 and not slowwalking and onground and not infiniteduck and velocity_speed < 190 and not exploit and fired_shoot == true and flags_on_use == 0 and not in_freeze_time and flags_weapon_switch <= 0 and flags_on_land == false and not flags_climbing_adder then 
		State = "Default"
	elseif velocity_speed > 2 and not slowwalking and onground and not infiniteduck and velocity_speed < 190 and not exploit and fired_shoot == true and flags_on_use == 0 and not in_freeze_time and flags_weapon_switch <= 0 and flags_on_land == false and not flags_climbing_adder then
		State = "Running"
	elseif velocity_speed > 2 and slowwalking and onground and not infiniteduck and velocity_speed < 190 and not exploit and fired_shoot == true and flags_on_use == 0 and not in_freeze_time and flags_weapon_switch <= 0 and flags_on_land == false and not flags_climbing_adder then
		State = "Slow Motion"
	elseif velocity_speed > 190 and onground and not infiniteduck and not exploit and fired_shoot == true and flags_on_use == 0 and flags_weapon_switch <= 0 and flags_on_land == false and not flags_climbing_adder then
		State = "High Speed"
	elseif not onground and not exploit and fired_shoot == true and flags_on_use == 0 and not in_freeze_time and flags_weapon_switch <= 0 and flags_on_land == false and not flags_climbing_adder then
		State = "Air"
	elseif infiniteduck and velocity_speed < 190 and not exploit and fired_shoot == true and flags_on_use == 0 and not in_freeze_time and flags_weapon_switch <= 0 and flags_on_land == false and not flags_climbing_adder then
		State = "Crouching"
	elseif exploit and flags_on_use == 0 and not in_freeze_time and flags_weapon_switch <= 0 and not flags_climbing_adder then
		State = "Exploit"
	elseif flags_on_use == 1 and fired_shoot == true and not in_freeze_time and flags_weapon_switch <= 0 and not flags_climbing_adder then
		State = "In Use"
	elseif fired_shoot == false and not in_freeze_time and flags_weapon_switch <= 0 and flags_weapon_reload == true and not flags_climbing_adder then
		State = "Fired"
	elseif flags_weapon_switch >= 0.001 and not in_freeze_time and onground and flags_on_land == false and not flags_climbing_adder then
		State = "Weapon Switch"
	elseif fired_shoot == false and flags_weapon_reload == false and onground and not in_freeze_time and flags_on_land == false and flags_weapon_switch <= 0 and not flags_climbing_adder then
		State = "Weapon Reload"
	elseif flags_on_land == true and flags_weapon_switch <= 0 and not in_freeze_time and fired_shoot == false and not flags_climbing_adder then
		State = "On Land"
	elseif flags_climbing_adder and not in_freeze_time then
		State = "Climbing Ldder"
	elseif in_freeze_time then
		State = "Freeze Time"
	end

	local trigger_always_packet = true
	local trigger_send_packet = true
	if multi_select(ui.get(fakelag_send_packet_trigger), "On Standing") and State == "Default" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "While Moving") and State == "Running" or multi_select(ui.get(fakelag_send_packet_trigger), "While Moving") and State == "Slow Motion" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On Duck") and State == "Crouching" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On High Speed") and State == "High Speed" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On Jump") and State == "Air" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On Exploit") and State == "Exploit" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "Weapon Fired") and State == "Fired" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On Use") and State == "In Use" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On Freezetime") and State == "Freeze Time" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "Weapon Switch") and State == "Weapon Switch" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "Weapon Reload") and State == "Weapon Reload" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "On Land") and State == "On Land" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if multi_select(ui.get(fakelag_send_packet_trigger), "While Climbing Ladder") and State == "Climbing Ldder" then
		trigger_send_packet = trigger_choked >= ui.get(limit)
		trigger_always_packet = false
	end

	if ui.get(fakelag_trigger_types) == "Fakelag Limiter" then
		cmd.allow_send_packet = false
		fakelag_limit_trigger_status = trigger_always_packet == true and ui.get(fakelag_limit_trigger_limit) or lag_shit[lag_info.current_phase].limit
	elseif ui.get(fakelag_trigger_types) == "Fakelag Send Packet Trigger" then
		cmd.allow_send_packet = ui.get(amount_mode) == "Fluctuate" and false or trigger_send_packet
		fakelag_limit_trigger_status = lag_shit[lag_info.current_phase].limit
	end

end)


local function choke_cycle(cmd)
	local local_player = entity.get_local_player()
	if not local_player or not entity.is_alive(local_player) then
		return
	end

	if cmd.chokedcommands < lag_info.prev_choked then
		lag_info.current_phase = lag_info.current_phase + 1
		if lag_info.current_phase > #lag_shit then
			lag_info.current_phase = 1
		end
	end

	if ui.get(fakelag_enabled) then
		ui.set(amount, ui.get(ref_fakeduck) and "Maximum" or lag_shit[lag_info.current_phase].amount)
		ui.set(variance, ui.get(ref_fakeduck) and 0 or lag_shit[lag_info.current_phase].variance)
		ui.set(limit, ui.get(ref_fakeduck) and 15 or fakelag_limit_trigger_status)
	end

	ui.set(lagcomp_break, lag_shit[lag_info.current_phase].break_lagcomp)
	lag_info.prev_choked = cmd.chokedcommands
end

client.set_event_callback("setup_command",choke_cycle)

local set_cache = function(self)
	local localplayer = entity.get_local_player()
	local weapon = entity.get_player_weapon(localplayer)
	local player_move_type = entity.get_prop(localplayer, "m_movetype")
	local flags_status = entity.get_prop(localplayer, "m_fFlags")
	local flags_climbing_adder = player_move_type == 9
	local aerial_flags = not flags_climbing_adder and flags_status == 256
	if not localplayer or not entity.is_alive(localplayer) or not ui.get(fakelag_enabled) or ui.get(ref_fakeduck) or weapon == nil or multi_select(weapons_disabled, entity.get_classname(weapon)) or not multi_select(ui.get(fakelag_slider_trigger), "Avoid Fired Limit") or aerial_flags then
		return
	end

	local process = function(name, condition, should_call, VAR)
	local hotkey_modes = {
		[0] = "always on",
		[1] = "on hotkey",
		[2] = "toggle",
		[3] = "off hotkey"
	}

	local _cond = ui.get(condition)
	local _type = type(_cond)

	local value, mode = ui.get(condition)
	local finder = mode ~= nil and mode or (_type == "boolean" and tostring(_cond) or _cond)
	cache[name] = cache[name] ~= nil and cache[name] or finder

	if should_call then ui.set(condition, mode ~= nil and hotkey_modes[VAR] or VAR) else
		if cache[name] ~= nil then
			local _cache = cache[name]
			if _type == "boolean" then
				if _cache == "true" then 
					_cache = true 
				end

				if _cache == "false" then 
					_cache = false 
				end
			end
    
				ui.set(condition, mode ~= nil and hotkey_modes[_cache] or _cache)
				cache[name] = nil
			end
		end
	end

	process("limit", limit, (self == nil and false or self), ui.get(trigger_fired_limit))
end

client.set_event_callback("shutdown", set_cache)

client.set_event_callback("setup_command", function(cmd)
	local localplayer = entity.get_local_player()
	local weapon = entity.get_player_weapon(localplayer)
	local player_move_type = entity.get_prop(localplayer, "m_movetype")
	local flags_status = entity.get_prop(localplayer, "m_fFlags")
	local flags_climbing_adder = player_move_type == 9
	local aerial_flags = not flags_climbing_adder and flags_status == 256
	if not localplayer or not entity.is_alive(localplayer) or not ui.get(fakelag_enabled) or ui.get(ref_fakeduck) or weapon == nil or multi_select(weapons_disabled, entity.get_classname(weapon)) or not multi_select(ui.get(fakelag_slider_trigger), "Avoid Fired Limit") or aerial_flags then
		return
	end

	local last_shot_time = entity.get_prop(weapon, "m_fLastShotTime")
	local m_iItem = bit.band(entity.get_prop(weapon, "m_iItemDefinitionIndex"), 0xFFFF)
	local limitation = function(cmd)
	local in_accel = function()
		local localplayer = entity.get_local_player()
		local x, y = entity.get_prop(localplayer, "m_vecVelocity")
		return math.sqrt(x^2 + y^2) ~= 0
	end

	local max_commands = in_accel() and 1 or 2
	if not data.threshold and last_shot_time ~= data.stored_last_shot then
		data.stored_last_shot = last_shot_time
		if not onshot_mode then
			data.threshold = true
		end

		return true
	end

	if data.threshold and cmd.chokedcommands >= max_commands then
		data.threshold = false
		return true
	end
		return false
	end
    
	if data.stored_item ~= m_iItem then
		data.stored_last_shot = last_shot_time
		data.stored_item = m_iItem
	end

	set_cache(limitation(cmd))
end)

client.set_event_callback("paint",function(e)
	ui.set_visible(lagcomp_break, false)
	ui.set_visible(fakelag_limit, ui.get(fakelag_enabled))
	ui.set_visible(variance_slider, ui.get(fakelag_enabled))
	ui.set_visible(amount_mode, ui.get(fakelag_enabled))
	ui.set_visible(variance_mode, ui.get(fakelag_enabled))
	ui.set_visible(fakelag_slider_trigger, ui.get(fakelag_enabled))
	ui.set_visible(fakelag_trigger_types, ui.get(fakelag_enabled))
	ui.set_visible(fakelag_send_packet_trigger, ui.get(fakelag_enabled))
	ui.set_visible(fakelag_fluctuate_limit, ui.get(fakelag_enabled) and ui.get(amount_mode) == "Fluctuate" )
	ui.set_visible(trigger_wall_limit, ui.get(fakelag_enabled) and multi_select(ui.get(fakelag_slider_trigger), "Wall Peek Limit"))
	ui.set_visible(trigger_fired_limit, ui.get(fakelag_enabled) and multi_select(ui.get(fakelag_slider_trigger), "Fired Limit"))
	ui.set_visible(trigger_aerial_limit, ui.get(fakelag_enabled) and multi_select(ui.get(fakelag_slider_trigger), "In Air Limit"))
	ui.set_visible(trigger_visible_limit, ui.get(fakelag_enabled) and multi_select(ui.get(fakelag_slider_trigger), "Visible Limit"))
	ui.set_visible(fakelag_limit_trigger_limit, ui.get(fakelag_enabled) and ui.get(fakelag_trigger_types) == "Fakelag Limiter")
end)
--Clantag
local client_latency, client_set_clan_tag, client_log, client_draw_rectangle, client_draw_indicator, client_draw_circle_outline, client_timestamp, client_world_to_screen, client_userid_to_entindex = client.latency, client.set_clan_tag, client.log, client.draw_rectangle, client.draw_indicator, client.draw_circle_outline, client.timestamp, client.world_to_screen, client.userid_to_entindex 
local client_draw_circle, client_draw_gradient, client_set_event_callback, client_screen_size, client_trace_line, client_draw_text, client_color_log = client.draw_circle, client.draw_gradient, client.set_event_callback, client.screen_size, client.trace_line, client.draw_text, client.color_log 
local client_system_time, client_delay_call, client_visible, client_exec, client_open_panorama_context, client_set_cvar, client_eye_position = client.system_time, client.delay_call, client.visible, client.exec, client.open_panorama_context, client.set_cvar, client.eye_position 
local client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_local_player, entity_is_enemy, entity_is_dormant, entity_hitbox_position, entity_get_player_name, entity_get_steam64, entity_get_bounding_box, entity_get_all, entity_set_prop = entity.get_local_player, entity.is_enemy, entity.is_dormant, entity.hitbox_position, entity.get_player_name, entity.get_steam64, entity.get_bounding_box, entity.get_all, entity.set_prop 
local entity_is_alive, entity_get_player_weapon, entity_get_prop, entity_get_players, entity_get_classname = entity.is_alive, entity.get_player_weapon, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_is_menu_open, ui_new_color_picker, ui_set_callback, ui_set = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.is_menu_open, ui.new_color_picker, ui.set_callback, ui.set 
local ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_cos, math_sinh, math_pi, math_max, math_atan2, math_floor, math_sqrt, math_deg, math_atan, math_fmod, math_acos = math.ceil, math.tan, math.cos, math.sinh, math.pi, math.max, math.atan2, math.floor, math.sqrt, math.deg, math.atan, math.fmod, math.acos 
local math_pow, math_abs, math_min, math_sin, math_log, math_exp, math_cosh, math_asin, math_rad = math.pow, math.abs, math.min, math.sin, math.log, math.exp, math.cosh, math.asin, math.rad 
local table_sort, table_remove, table_concat, table_insert = table.sort, table.remove, table.concat, table.insert 
local string_find, string_format, string_gsub, string_len, string_gmatch, string_match, string_reverse, string_upper, string_lower, string_sub = string.find, string.format, string.gsub, string.len, string.gmatch, string.match, string.reverse, string.upper, string.lower, string.sub 
local renderer_line, renderer_indicator, renderer_world_to_screen, renderer_circle_outline, renderer_rectangle, renderer_gradient, renderer_circle, renderer_text = renderer.line, renderer.indicator, renderer.world_to_screen, renderer.circle_outline, renderer.rectangle, renderer.gradient, renderer.circle, renderer.text 
--end of local variables 

local visual_label_spacer = ui.new_label("Visuals","Other ESP", " ")

local function time_to_ticks(time)
	return math_floor(time / globals_tickinterval() + .5)
end

local skeet_tag_name = "Mewtwo.Tech"

local enabled_reference = ui.new_combobox("Visuals", "Other ESP", "Toggle Mewtwo Clantags (more are coming)", {"Off", skeet_tag_name})
local default_reference = ui.reference("MISC", "Miscellaneous", "Clan tag spammer")

local clan_tag_prev = ""
local enabled_prev = "Off"

ui.set_visible(default_reference, true)

local function on_enabled_changed()
	local enabled = ui_get(enabled_reference)

	ui_set(default_reference, enabled == "gamesense")
end
ui.set_callback(enabled_reference, on_enabled_changed)
on_enabled_changed()

local function gamesense_anim(text, indices)
	local text_anim = "               " .. text .. "                      " 
	local tickinterval = globals_tickinterval()
	local tickcount = globals_tickcount() + time_to_ticks(client_latency())
	local i = tickcount / time_to_ticks(0.3)
	i = math_floor(i % #indices)
	i = indices[i+1]+1

	return string_sub(text_anim, i, i+15)
end

local function run_tag_animation()
	if ui_get(enabled_reference) == skeet_tag_name then
		local clan_tag = gamesense_anim("Mewtwo.Tech", {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22})
		if clan_tag ~= clan_tag_prev then
			client_set_clan_tag(clan_tag)
		end
		clan_tag_prev = clan_tag
	end
end

local function on_paint(ctx)
	local enabled = ui_get(enabled_reference)
	if enabled == skeet_tag_name then
		local local_player = entity_get_local_player()
		if local_player ~= nil and (not entity_is_alive(local_player)) and globals_tickcount() % 2 == 0 then --missing noclip check
			run_tag_animation()
		end
	elseif enabled_prev == skeet_tag_name then
		client_set_clan_tag("\0")
	end
	enabled_prev = enabled
end
client.set_event_callback("paint", on_paint)

local function on_run_command(e)
	if ui_get(enabled_reference) == skeet_tag_name then
		if e.chokedcommands == 0 then
			run_tag_animation()
		end
	end
end
client.set_event_callback("run_command", on_run_command)

--Hitlogs
local function contains(b,c)for d,e in pairs(b)do if e==c then return true end end;return false end
local function set_table(b,c,d)for e,f in pairs(c)do if type(f)=='table'then set_table(b,f,d)else b(f,d)end end end
function renderer.outline(x, y, w, h, r, g, b, a) renderer.rectangle(x - 1, y - 1, w + 2, 1, r, g, b, a) renderer.rectangle(x - 1, y + h, w + 2, 1, r, g, b, a) renderer.rectangle(x - 1, y, 1, h, r, g, b, a) renderer.rectangle(x + w, y, 1, h, r, g, b, a) end
function math.clamp(a, b, c)return math.min(math.max(a, b), c)end

local icons = {
    info = images.get_panorama_image('icons/ui/info.svg'),
    error = images.get_panorama_image('icons/ui/warning.svg'),
    miss = images.get_panorama_image('hud/deathnotice/icon_suicide.svg'),
    buy = images.get_panorama_image('icons/ui/inventory.svg'),
    hit = images.get_panorama_image('icons/ui/deathmatch.svg'),
}


-- Load the HTTP library from the GameSense SDK
local http = require("gamesense/http")

-- Define the URL of the image to download
local imageUrl = "https://cdn.discordapp.com/attachments/1075928933503090728/1095507769999757433/level1315112.png"

-- Use the HTTP library to download the image
http.get(imageUrl, function(success, response)
  if success and response.status == 200 then
    -- Render the image using the renderer
    images.load(response.body, x, y, w, h, 255, 255, 255, 255, 'f')
    --(imageUrl, x, y, w, h, 255, 255, 255, 255, "f")
  else
    print("Failed to download image: " .. response.status)
  end
end)



local sizes = {}
for i, v in pairs(icons) do
    local i_w, i_h = v:measure();
    sizes[i] = { w = i_w, h = i_h }
end

local colorful_text = {
    lerp = function(self, from, to, duration)
        if type(from) == 'table' and type(to) == 'table' then
            return { 
                self:lerp(from[1], to[1], duration), 
                self:lerp(from[2], to[2], duration), 
                self:lerp(from[3], to[3], duration) 
            };
        end
    
        return from + (to - from) * duration;
    end,
    console = function(self, ...)
        for i, v in ipairs({ ... }) do
            if type(v[1]) == 'table' and type(v[2]) == 'table' and type(v[3]) == 'string' then
                for k = 1, #v[3] do
                    local l = self:lerp(v[1], v[2], k / #v[3]);
                    client.color_log(l[1], l[2], l[3], v[3]:sub(k, k) .. '\0');
                end
            elseif type(v[1]) == 'table' and type(v[2]) == 'string' then
                client.color_log(v[1][1], v[1][2], v[1][3], v[2] .. '\0');
            end
        end
    end,
    text = function(self, ...)
        local menu = false;
        local alpha = 255
        local f = '';
        
        for i, v in ipairs({ ... }) do
            if type(v) == 'boolean' then
                menu = v;
            elseif type(v) == 'number' then
                alpha = v;
            elseif type(v) == 'string' then
                f = f .. v;
            elseif type(v) == 'table' then
                if type(v[1]) == 'table' and type(v[2]) == 'string' then
                    f = f .. ('\a%02x%02x%02x%02x'):format(v[1][1], v[1][2], v[1][3], alpha) .. v[2];
                elseif type(v[1]) == 'table' and type(v[2]) == 'table' and type(v[3]) == 'string' then
                    for k = 1, #v[3] do
                        local g = self:lerp(v[1], v[2], k / #v[3])
                        f = f .. ('\a%02x%02x%02x%02x'):format(g[1], g[2], g[3], alpha) .. v[3]:sub(k, k)
                    end
                end
            end
        end
    
        return ('%s\a%s%02x'):format(f, (menu) and 'cdcdcd' or 'ffffff', alpha);
    end,
    log = function(self, ...)
        for i, v in ipairs({ ... }) do
            if type(v) == 'table' then
                if type(v[1]) == 'table' then
                    if type(v[2]) == 'string' then
                        self:console({ v[1], v[1], v[2] })
                        if (v[3]) then
                            self:console({ { 255, 255, 255 }, '\n' })
                        end
                    elseif type(v[2]) == 'table' then
                        self:console({ v[1], v[2], v[3] })
                        if v[4] then
                            self:console({ { 255, 255, 255 }, '\n' })
                        end
                    end
                elseif type(v[1]) == 'string' then
                    self:console({ { 205, 205, 205 }, v[1] });
                    if v[2] then
                        self:console({ { 255, 255, 255 }, '\n' })
                    end
                end
            end
        end
    end
}

local notify = {
    add = function(self, type, ...)
        table.insert(self.items, {
            ['text'] = table.concat({...}, ''),
            ['time'] = self.time,
            ['type'] = type or 'info',
            ['a'] = 255.0,
        });
    end,
    setup = function(self, data)
        self.max_logs = data.max_logs or 10
        self.position = data.position or { 8, 5 }
        self.time = data.time or 8.0
        self.images = data.images or false
        self.center_screen = data.center_screen or false
        self.center_additive = data.center_additive or 0
        self.simple = data.simple or false
        self.items = self.items or {}
    end,
    think = function(self)
        if #self.items <= 0 then return end
        if #self.items > self.max_logs then
            table.remove(self.items, 1);
        end

        for i, v in ipairs(self.items) do
            v.time = v.time - globals.frametime();
            if v.time <= 0 then
                table.remove(self.items, i);
            end
        end

        local s_w, s_h = client.screen_size();
        local c_w, c_h = s_w * 0.5, s_h * 0.5;

        local x, y, w, h, offset = 0, 0, 0, 0, { 5, 2 }
        local image_offset = 0;
        local text = ''
        local f = 0.0

        if (self.images) then
            offset[2] = 8;
            image_offset = 25;
        end

        if self.simple then
            offset = { 0, 0 }
            image_offset = 0;
        end

        local scale = 0.65

        if self.center_screen then
            x, y = c_w, c_h + 35 + self.center_additive;
            for i = #self.items, 1, -1 do
                local v = self.items[i]

                local text = string.gsub(v.text, '(%x%x%x%x%x%x%x%x)', function(hex) 
                    return ('%s%02x'):format(string.sub(hex, 1, -3), v.a); 
                end):gsub(' ', '  '):upper();
    
                local w, h = renderer.measure_text('cd-', text);
        
                local f = v.time;
                if (f < 0.5) then
                    math.clamp(f, 0.0, 0.5);
    
                    f = f / 0.5;
        
                    v.a = 255.0 * f;
        
                    if (i == 1 and f < 0.3) then
                        y = y + (h * (1.0 - f / 0.3));
                    end
                end
    
                if not self.simple then
                    renderer.rectangle(x - (w * 0.5), y, w + offset[1] * 2 + image_offset, h + offset[2] * 2, 20, 20, 20, v.a);
                    renderer.outline(x - (w * 0.5), y, w + offset[1] * 2 + image_offset, h + offset[2] * 2, 0, 0, 0, v.a);
                    renderer.rectangle(x - (w * 0.5), y + 1, w + offset[1] * 2 + image_offset, 1, 0, 0, 0, v.a);
                    renderer.gradient(x - (w * 0.5), y, math.min(w, w * (v.time / self.time)) + offset[1] * 2 + image_offset, 1, 155, 255, 255, v.a, 255, 155, 255, v.a, true);
                    if self.images then
                        icons[v.type]:draw(x - (w * 0.5) + offset[1], y + offset[2] * 0.5, sizes[v.type].w * scale, sizes[v.type].h * scale, 255, 255, 255, math.abs(math.cos(globals.realtime()))*v.a);
                    end
                end

                local text_pos = { x + offset[1] + image_offset, y + (h * 0.5) +  offset[2] }
                if self.simple then
                    text_pos = { x, y }
                end

                renderer.text(text_pos[1], text_pos[2], 255, 255, 255, v.a, 'cd-', 0, text);

                y = y + h + ((self.simple) and 0 or offset[2] * 2 + 5);
            end
        else
            x, y = self.position[1], self.position[2]
            for i, v in ipairs(self.items) do
                local text = string.gsub(v.text, '(%x%x%x%x%x%x%x%x)', function(hex) 
                    return ('%s%02x'):format(string.sub(hex, 1, -3), v.a); 
                end);
    
                local w, h = renderer.measure_text('d', text);
        
                local f = v.time;
                if (f < 0.5) then
                    math.clamp(f, 0.0, 0.5);
    
                    f = f / 0.5;
        
                    v.a = 255.0 * f;
        
                    if (i == 1 and f < 0.3) then
                        y = y - (h * (1.0 - f / 0.3));
                    end
                end
    
                if not self.simple then
                    renderer.rectangle(x, y + 800, w + offset[1] * 2 + image_offset, h + offset[2] * 2, 20, 20, 20, v.a);
                    renderer.outline(x, y + 800, w + offset[1] * 2 + image_offset, h + offset[2] * 2, 0, 0, 0, v.a);
                    renderer.rectangle(x, y + 800 + 1, w + offset[1] * 2 + image_offset, 1, 0, 0, 0, v.a);
                    renderer.gradient(x, y + 800, math.min(w, w * (v.time / self.time)) + offset[1] * 2 + image_offset, 1, 155, 255, 255, v.a, 255, 155, 255, v.a, true);
                    if self.images then
                        icons[v.type]:draw(x + offset[1], y + offset[2] * 0.5, sizes[v.type].w * scale, sizes[v.type].h * scale, 255, 255, 255, math.abs(math.cos(globals.realtime()))*v.a);
                    end
                end

                local text_pos = { x + offset[1] + image_offset, y + 800 + offset[2] }
                if self.simple then
                    text_pos = { x, y }
                end

                renderer.text(text_pos[1], text_pos[2], 255, 255, 255, v.a, 'd', 0, text);

                y = y + h + ((self.simple) and 0 or offset[2] * 2 + 5);
            end
        end
    end
}

local items = {
    colorful_text:text(true, { { 173, 173, 173 }, { 173, 173, 173 }, "Misses" } ), 
    colorful_text:text(true, { { 173, 173, 173 }, { 173, 173, 173 }, "Hit" } ), 
    colorful_text:text(true, { { 173, 173, 173 }, { 173, 173, 173 }, "Harmed" } ), 
    colorful_text:text(true, { { 173, 173, 173 }, { 173, 173, 173 }, "Buy Logs" } ),
}

local menu = {
    main = ui.new_checkbox("Visuals", "Other ESP", "[" .. colorful_text:text(true, { { 155, 255, 255 }, { 255, 155, 255 }, "Mewtwo" } ) .. "] Hitlogs"),
    entries = {
        options = ui.new_multiselect("Visuals", "Other ESP", "\noptions", items),
        simple_logs = ui.new_checkbox("Visuals", "Other ESP", colorful_text:text(true, { { 173, 173, 173 }, "" } ) .. "Toggle Animation Mode"),
        crosshair_logs = ui.new_checkbox("Visuals", "Other ESP", colorful_text:text(true, { { 173, 173, 173 }, "" } ) .. "Crosshair Logs"),
        crosshair_additive = ui.new_slider("Visuals", "Other ESP", colorful_text:text(true, { { 173, 173, 173 }, "" } ) .. "Crosshair Log Position", 0, 400, 200),
    }
}

local ref = {
    log_weapon_purchases = ui.reference('MISC', 'Miscellaneous', 'Log weapon purchases'),
    log_damage_dealt = ui.reference('MISC', 'Miscellaneous', 'Log damage dealt'),
    log_misses_due_to_spread = ui.reference('RAGE', 'Other', 'Log misses due to spread'),
    hitchance = ui.reference('RAGE', 'Aimbot', 'Minimum hit chance'),
    min_dmg = ui.reference('RAGE', 'Aimbot', 'Minimum damage'),
    legit_enabled = ui.reference('LEGIT', 'Aimbot', 'Enabled'),
    values = {
        log_weapon_purchases = false,
        log_damage_dealt = false,
        log_misses_due_to_spread = false,
    }
}

local vars = {
    local_player = 0,
    hitgroup_names = { 'generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', 'neck', '?', 'gear' }
}

local on_paint_ui = function()
    notify:think();
end

local on_aim_miss = function(data)
    if not contains(ui.get(menu.entries.options), items[1]) then return end

    if data.reason == "death" then
        if entity.is_alive(vars.local_player) then
            data.reason = "player death"
        else
            data.reason = "local death"
        end
    end

    if data.reason == "prediction error" then
        data.reason = "prediction"
    end

    if data.reason == "?" then
        data.reason = "resolver"
    end

    local ping = math.min(999, client.real_latency() * 1000)
    local ping_col = (ping >= 100) and { 255, 0, 0 } or { 150, 200, 60 }

    local hc = math.floor(data.hit_chance + 0.5);
    local hc_col = (hc < ui.get(ref.hitchance)) and { 255, 0, 0 } or { 150, 200, 60 };

    colorful_text:log(
        { { 155, 255, 255 }, { 255, 155, 255 }, "[Mewtwo] " },
        { { 205, 205, 205 }, ("Missed %s's %s due to "):format(entity.get_player_name(data.target), vars.hitgroup_names[data.hitgroup + 1] or '?') },
        { { 255, 0, 0 }, ("%s"):format((data.reason == '?' and 'resolver' or data.reason)) },
        { { 205, 205, 205 }, ". [ BT: "},
        { ping_col, ("%dms"):format(ping) },
        { { 205, 205, 205 }, " | Ang: " },
        { { 155, 255, 255 }, ("%d"):format(math.floor( entity.get_prop(data.target, 'm_flPoseParameter', 11 ) * 120 - 60 )) },
        { { 205, 205, 205 }, " | HC: "},
        { hc_col, ("%d%%"):format(hc) },
        { { 205, 205, 205 }, " ]", true }
    );

    notify:add(
        "miss",
        colorful_text:text({ { 255, 255, 255 }, ("Missed %s's %s due to "):format(entity.get_player_name(data.target), vars.hitgroup_names[data.hitgroup + 1] or '?') }),
        colorful_text:text({ { 255, 0, 0 }, ("%s"):format((data.reason == '?' and 'resolver' or data.reason))}),
        colorful_text:text({ { 255, 255, 255 }, ". [ BT: "}),
        colorful_text:text({ ping_col, ("%dms"):format(ping) }),
        colorful_text:text({ { 255, 255, 255 }, " | Ang: " }),
        colorful_text:text({ { 155, 255, 255 }, ("%d"):format(math.floor( entity.get_prop(data.target, 'm_flPoseParameter', 11 ) * 120 - 60 )) }),
        colorful_text:text({ { 255, 255, 255 }, " | HC: "}),
        colorful_text:text({ hc_col, ("%d%%"):format(hc) }),
        colorful_text:text({ { 255, 255, 255 }, " ]" })
    );
end

local on_item_purchase = function(event)
    if not contains(ui.get(menu.entries.options), items[4]) then return end

    local userid = event.userid
    if userid == nil then return end

    if event.team == entity.get_prop(vars.local_player, 'm_iTeamNum') then return end

    local buyer = client.userid_to_entindex(userid)
    if buyer == nil then return end

    if event.weapon == "weapon_unknown" then return end

    local item = event.weapon;
    item = item:gsub('weapon_', '')

    if item == 'item_assaultsuit' then
        item = 'kevlar + helmet'
    elseif item == 'item_kevlar' then
        item = 'kevlar'
    elseif item == 'item_defuser' then
        item = 'defuser'
    else
        item = item:gsub('grenade', ' grenade');
    end

    colorful_text:log(
        { { 155, 255, 255 }, { 255, 155, 255 }, "[Mewtwo] " },
        { { 205, 205, 205 }, ("%s purchased "):format(entity.get_player_name(buyer)) },
        { { 255, 0, 0 }, ("%s"):format(item) },
        { { 205, 205, 205 }, ".", true }
    )

    notify:add(
        "buy",
        colorful_text:text({ { 255, 255, 255 }, ("%s purchased "):format(entity.get_player_name(duder))}),
        colorful_text:text({ { 255, 0, 0 }, ("%s"):format(item) }),
        colorful_text:text({ { 255, 255, 255 }, "." })
    );
end

local on_player_hurt = function(event)
    local victim_idx, attacker_idx = event.userid, event.attacker
	if victim_idx == nil or attacker_idx == nil then
		return
	end

    local dmg_color = (ui.get(ref.min_dmg) <= event.dmg_health and not ui.get(ref.legit_enabled)) and { 150, 200, 60 } or { 255, 0, 0 }
    local baimable = (ui.get(ref.min_dmg) <= event.health and not ui.get(ref.legit_enabled)) and { 150, 200, 60 } or { 255, 0, 0 }

    local victim, attacker = client.userid_to_entindex(victim_idx), client.userid_to_entindex(attacker_idx)
    if attacker ~= vars.local_player or victim == vars.local_player then 
        if (victim == vars.local_player and attacker ~= vars.local_player) then
            if contains(ui.get(menu.entries.options), items[3]) then
                local attacker_name = entity.get_player_name(attacker)
                if attacker_name == 'unknown' then return end

                colorful_text:log(
                    { { 155, 255, 255 }, { 255, 155, 255 }, "[Mewtwo] " },
                    { { 205, 205, 205 }, ("Harmed by %s in the %s for "):format(attacker_name, vars.hitgroup_names[event.hitgroup + 1] or '?') },
                    { { 160, 200, 50 }, ("%s"):format(event.dmg_health) },
                    { { 205, 205, 205 }, ".", true}
                );

                notify:add(
                    "error",
                    colorful_text:text({ { 255, 255, 255 }, ("Harmed by %s in the %s for "):format(attacker_name, vars.hitgroup_names[event.hitgroup + 1] or '?') }),
                    colorful_text:text({ { 160, 200, 50 }, ("%s"):format(event.dmg_health) }),
                    colorful_text:text({ { 255, 255, 255 }, "." })
                );
            end
        end
        return
    end

    if contains(ui.get(menu.entries.options), items[2]) then 
        colorful_text:log(
            { { 155, 255, 255 }, { 255, 155, 255 }, "[Mewtwo] " },
            { { 205, 205, 205 }, ("Hit %s's %s for "):format(entity.get_player_name(victim), vars.hitgroup_names[event.hitgroup + 1] or '?') },
            { dmg_color, ("%s"):format(event.dmg_health) },
            { { 205, 205, 205 }, ". ( " },
            { baimable, ("%s"):format(event.health) },
            { { 205, 205, 205 }, " health remaining )", true }
        );

        notify:add(
            "Hit",
            colorful_text:text({ { 255, 255, 255 }, ("Hit %s's %s for "):format(entity.get_player_name(victim), vars.hitgroup_names[event.hitgroup + 1] or '?') }),
            colorful_text:text({ dmg_color, ("%s"):format(event.dmg_health) }),
            colorful_text:text({ { 255, 255, 255 }, ". ( " }),
            colorful_text:text({ baimable, ("%s"):format(event.health) }),
            colorful_text:text({ { 255, 255, 255 }, " health remaining )" })
        );
    end
end

local on_setup_command = function(cmd)
    vars.local_player = entity.get_local_player();
end 

local on_load = function(state)
    local func = (state) and client.set_event_callback or client.unset_event_callback

    set_table(ui.set_visible, { ref.log_weapon_purchases, ref.log_damage_dealt, ref.log_misses_due_to_spread }, not state);
    if not state then
        ui.set(ref.log_weapon_purchases, ref.values.log_weapon_purchases);
        ui.set(ref.log_damage_dealt, ref.values.log_damage_dealt);
        ui.set(ref.log_misses_due_to_spread, ref.values.log_misses_due_to_spread);
    else
        set_table(ui.set, { ref.log_weapon_purchases, ref.log_damage_dealt, ref.log_misses_due_to_spread }, false);
    end

    set_table(ui.set_visible, { menu.entries }, state);
    ui.set_visible(menu.entries.crosshair_additive, ui.get(menu.entries.crosshair_logs) and state)

    func("paint_ui", on_paint_ui);
    func("item_purchase", on_item_purchase);
    func("player_hurt", on_player_hurt);
    func("setup_command", on_setup_command);
    func("aim_miss", on_aim_miss);

    notify:setup({ center_screen = ui.get(menu.entries.crosshair_logs), simple = ui.get(menu.entries.simple_logs), center_additive = ui.get(menu.entries.crosshair_additive) });
end

ui.set_callback(menu.main, function()
    local state = ui.get(menu.main);
    on_load(state)
end)

ui.set_callback(menu.entries.crosshair_logs, function()
    local state = ui.get(menu.entries.crosshair_logs)

    set_table(ui.set_visible, { menu.entries.crosshair_additive }, state);

    notify:setup({ center_screen = state, simple = ui.get(menu.entries.simple_logs), center_additive = ui.get(menu.entries.crosshair_additive) });
end)

ui.set_callback(menu.entries.simple_logs, function()
    local state = ui.get(menu.entries.simple_logs)
    notify:setup({ center_screen = ui.get(menu.entries.crosshair_logs), simple = state, center_additive = ui.get(menu.entries.crosshair_additive) });
end)

ui.set_callback(menu.entries.crosshair_additive, function()
    local value = ui.get(menu.entries.crosshair_additive);


    notify:setup({ center_screen = ui.get(menu.entries.crosshair_logs), simple = ui.get(menu.entries.simple_logs), center_additive = value });
end)

ref.values.log_weapon_purchases = ui.get(ref.log_weapon_purchases);
ref.values.log_damage_dealt = ui.get(ref.log_damage_dealt);
ref.values.log_misses_due_to_spread = ui.get(ref.log_misses_due_to_spread);

on_load(false);

print(name, " has been loaded!")
end
scripts["adaptive"] = function(name, check)
scripts[name] = loader
if check ~= secret and not reached then return end
print("loading: ", name)
local vector = require 'vector'

local ffi = require('ffi')
local ffi_cast = ffi.cast

ffi.cdef [[
	typedef int(__thiscall* get_clipboard_text_count)(void*);
	typedef void(__thiscall* set_clipboard_text)(void*, const char*, int);
	typedef void(__thiscall* get_clipboard_text)(void*, int, const char*, int);
]]

local dependencies = {
    ["gamesense/csgo_weapons"] = "https://gamesense.pub/forums/viewtopic.php?id=18807",
}

local missing_libs = { }

for i, v in pairs(dependencies) do
    if not pcall(require, i) then
        missing_libs[#missing_libs + 1] = dependencies[i]
    end
end

for i=1, #missing_libs do
    error("Miss the lib: \n" .. table_concat(missing_libs, ", \n"))
end

local csgo_weapons = require "gamesense/csgo_weapons"

local includes = function (table,key)
    for i=1, #table do
      if table[i] == key then
        return true;
      end; 
    end;
    return false;
end

local function vtable_thunk(index, typedef)
    return function(v0, ...)
        local instance = ffi.cast(ffi.typeof('void***'), v0)

        local tdef = nil

        if seen[typedef] then
            tdef = seen[typedef]
        else
            tdef = ffi.typeof(typedef)

            seen[typedef] = tdef
        end

        return ffi.cast(tdef, instance[0][index])(instance, ...)
    end
end

local function vtable_bind(interface, index, typedef)
    local instance = ffi.cast('void***', interface);

    return function(...)
        return ffi.cast(typedef, instance[0][index])(instance, ...)
    end
end

local VGUI_System010 =  client.create_interface("vgui2.dll", "VGUI_System010") or print( "Error finding VGUI_System010")
local VGUI_System = ffi_cast(ffi.typeof('void***'), VGUI_System010 )

local IEngineClient__GetNetChannelInfo = vtable_bind("engine.dll", "VEngineClient014", 78, "void* (__thiscall*)(void* ecx)")
local INetChannelInfo__GetAvgLoss = vtable_thunk(11, "float (__thiscall*)(void* ecx, int flow)")
local INetChannelInfo__GetAvgChoke = vtable_thunk(12, "float (__thiscall*)(void* ecx, int flow)")

local get_clipboard_text_count = ffi_cast( "get_clipboard_text_count", VGUI_System[ 0 ][ 7 ] ) or print( "get_clipboard_text_count Invalid")
local set_clipboard_text = ffi_cast( "set_clipboard_text", VGUI_System[ 0 ][ 9 ] ) or print( "set_clipboard_text Invalid")
local get_clipboard_text = ffi_cast( "get_clipboard_text", VGUI_System[ 0 ][ 11 ] ) or print( "get_clipboard_text Invalid")

local function clipboard_import( )
  	local clipboard_text_length = get_clipboard_text_count( VGUI_System )
	local clipboard_data = ""

	if clipboard_text_length > 0 then
		buffer = ffi.new("char[?]", clipboard_text_length)
		size = clipboard_text_length * ffi.sizeof("char[?]", clipboard_text_length)

		get_clipboard_text( VGUI_System, 0, buffer, size )

		clipboard_data = ffi.string( buffer, clipboard_text_length-1 )
	end
	return clipboard_data
end

local function clipboard_export(string)
	if string then
		set_clipboard_text(VGUI_System, string, string:len())
	end
end

local function arr_to_string(arr)
	arr = ui.get(arr)
	local str = ""
	for i=1, #arr do
		str = str .. arr[i] .. (i == #arr and "" or ",")
	end

	if str == "" then
		str = "-"
	end

	return str
end

local function str_to_sub(input, sep)
	local t = {}
	for str in string.gmatch(input, "([^"..sep.."]+)") do
		t[#t + 1] = string.gsub(str, "\n", "")
	end
	return t
end

local function to_boolean(str)
	if str == "true" or str == "false" then
		return (str == "true")
	else
		return str
	end
end

local version = '[Beta]'
local label = ui.new_label("RAGE", "Aimbot", " ")
local label = ui.new_label("RAGE", "Aimbot", "                     \abbc4fbffMe\abbc4fbffwt\ac9bdf9ffwo\ad6b6f7ff.T\ae4aff5ffec\ae4aff5ffh")
local label2 = ui.new_label("RAGE", "Aimbot", "                   \abbc4fbffWea\abbc4fbffpon \ac9bdf9ffAd\ad6b6f7ffap\ae4aff5ffti\ae4aff5ffve")
local label3 = ui.new_label("RAGE", "Aimbot", "                    \abbc4fbffVersion: \ae4aff5ff[Beta]")
local label = ui.new_label("RAGE", "Aimbot", " ")

local weapon_name = { "Global", "Taser", "Revolver", "Pistol", "Auto", "Scout", "AWP", "Rifle", "SMG", "Shotgun", "Deagle" }
local name_to_num = { ["Global"] = 1, ["Taser"] = 2, ["Revolver"] = 3, ["Pistol"] = 4, ["Auto"] = 5, ["Scout"] = 6, ["AWP"] = 7, ["Rifle"] = 8, ["SMG"] = 9, ["Shotgun"] = 10, ["Deagle"] = 11 }
local weapon_idx_list = { [1] = 11, [2] = 4,[3] = 4,[4] = 4,[7] = 8,[8] = 8,[9] = 7,[10] = 8,[11] = 5,[13] = 8,[14] = 8,[16] = 8,[17] = 9,[19] = 9,[23] = 9,[24] = 9,[25] = 10,[26] = 9,[27] = 10,[28] = 8,[29] = 10,[30] = 4,[31] = 2,  [32] = 4,[33] = 9,[34] = 9,[35] = 10,[36] = 4,[38] = 5,[39] = 8,[40] = 6,[60] = 8,[61] = 4,[63] = 4,[64] = 3}
local damage_idx  = { [0] = "Auto", [101] = "HP + 1", [102] = "HP + 2", [103] = "HP + 3", [104] = "HP + 4", [105] = "HP + 5", [106] = "HP + 6", [107] = "HP + 7", [108] = "HP + 8", [109] = "HP + 9", [110] = "HP + 10", [111] = "HP + 11", [112] = "HP + 12", [113] = "HP + 13", [114] = "HP + 14", [115] = "HP + 15", [116] = "HP + 16", [117] = "HP + 17", [118] = "HP + 18", [119] = "HP + 19", [120] = "HP + 20", [121] = "HP + 21", [122] = "HP + 22", [123] = "HP + 23", [124] = "HP + 24", [125] = "HP + 25", [126] = "HP + 26" }
local scoped_wpn_idx = {
    name_to_num["Scout"],
    name_to_num["Auto"],
    name_to_num["AWP"],
}
local screen_size_x,screen_size_y = client.screen_size()
local weapon = {
    main_switch = ui.new_checkbox("Rage", "Aimbot", "\a12EC0997Enable Mewtwo Weapon Adaptive"), 
    adjust = ui.new_checkbox("Rage", "Aimbot", "Adjust weapon selection if menu not opened"),
    run_hide = ui.new_checkbox("Rage", "Aimbot", "Hide skeet rage menu"),
    allow_fake_ping = ui.new_checkbox("Rage", "Aimbot", "Allow ping-spike adjustment in lua"),
    fake_ping_key = ui.new_hotkey("Rage", "Aimbot", "Ping spike"),
    lua_label = ui.new_combobox("Rage", "Aimbot","\aB0C4DEFFMin DMG Indicator:",{'Screen center','Skeet indicator'}),
    lua_clr = ui.new_color_picker("Rage", "Aimbot", "\aB0C4DEFFMin DMG Indicator", 100,149,237, 255),
    high_pro = ui.new_multiselect("Rage", "Aimbot","High priority target:",{'Bomb carrier','AWP user'}),
    key_text = ui.new_label("Rage", "Aimbot","\aFFE7BAFFOverride keys:"),
    available = ui.new_multiselect("Rage", "Aimbot","Select Keys:",{'Min DMG','Hit chance','Hitbox','Multipoint','Unsafe hitbox','Quick stop','Delay shot'}),
    ovr_dmg = ui.new_hotkey("Rage", "Aimbot", "Min damage [1]"),
    ovr_dmg_2 = ui.new_hotkey("Rage", "Aimbot", "Min damage [2]"),
    ovr_hc = ui.new_hotkey("Rage", "Aimbot", "Hitchance [1]"),
    ovr_hc_2 = ui.new_hotkey("Rage", "Aimbot", "Hitchance [2]"),
    ovr_box = ui.new_hotkey("Rage", "Aimbot", "Hitbox [1]"),
    ovr_box_2 = ui.new_hotkey("Rage", "Aimbot", "Hitbox [2]"),
    ovr_multi = ui.new_hotkey("Rage", "Aimbot", "Multi-point"),
    ovr_unsafe = ui.new_hotkey("Rage", "Aimbot", "Unsafe hitbox"),
    ovr_stop = ui.new_hotkey("Rage", "Aimbot", "Quick stop"),
    ovr_forcehead = ui.new_hotkey("Rage", "Aimbot", "Force head"),
    ovr_delay = ui.new_hotkey("Rage", "Aimbot", "Delay shot"),
    ovr_dmg_smart = ui.new_hotkey("Rage", "Aimbot", "Smart penetration dmg"),
    key_text_1 = ui.new_label("Rage", "Aimbot","\aFFE7BAFFWeapon config:"),
    weapon_select = ui.new_combobox("Rage", "Aimbot", "Weapon:", weapon_name),
}

weapon.cfg = {}

for i,o in ipairs(weapon_name) do 
    weapon.cfg[i] = {
        enable = ui.new_checkbox("Rage", "Aimbot", "Enable "..o.." config"),
        extra_feature = ui.new_multiselect("Rage", "Aimbot","["..o.."] Available extra tweak",{'Hitbox','Multi-Point','Unsafe hitbox','Hitchance','Damage','Quick stop'}),
        target_selection = ui.new_combobox("Rage", "Aimbot", "[" .. o .. "] Target selection", {"Cycle", "Cycle (2x)", "Near crosshair", "Highest damage", "Lowest ping", "Best K/D ratio", "Best hit chance"}),
        hitbox_text = ui.new_label("Rage", "Aimbot","                 ------ Hitbox ------"),
        hitbox_mode = ui.new_multiselect("Rage", "Aimbot","["..o.."] Extra hitbox tweak",{'Double-tap','In-air','Override 1','Override 2'}), 
        target_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target hitbox", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        dt_target_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target hitbox \a87CEEBFF[Double-tap]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        air_target_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target hitbox \a87CEEBFF[In-air]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        ovr_target_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target hitbox \a87CEEBFF[Override 1]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        ovr_target_hitbox_2 = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target hitbox \a87CEEBFF[Override 2]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        multi_text = ui.new_label("Rage", "Aimbot","              ------ Multi-point ------"),
        multi_mode = ui.new_multiselect("Rage", "Aimbot","["..o.."] Extra multi-point tweak",{'Ping-spike','Double-tap','In-air','Override'}),
        multi_complex = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Target multi-point complexity",0,1,0,true,'',1, {[0] = 'Original',[1] = 'Visible/Autowall'}),
        target_multi = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        multipoint_scale = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        multi_hitbox_v = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \aF08080FF[Visible]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        multipoint_scale_v = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \aF08080FF[Visible]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        multi_hitbox_a = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \aF08080FF[Autowall]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        multipoint_scale_a = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \aF08080FF[Autowall]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        ping_avilble = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Therehold value \a87CEEBFF[Ping-spike]", 0, 200, 100, true),
        ping_multi_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \a87CEEBFF[Ping-spike]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        ping_multipoint_scale = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \a87CEEBFF[Ping-spike]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        dt_multi_complex = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Target multi-point complexity \a87CEEBFF[Double-tap]",0,1,0,true,'',1, {[0] = 'Original',[1] = 'Visible/Autowall'}),
        dt_multi_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \a87CEEBFF[Double-tap]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        dt_multipoint_scale = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \a87CEEBFF[Double-tap]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        dt_multi_hitbox_v = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \aF08080FF[Visible] \a87CEEBFF[Double-tap]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        dt_multipoint_scale_v = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \aF08080FF[Visible] \a87CEEBFF[Double-tap]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        dt_multi_hitbox_a = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \aF08080FF[Autowall] \a87CEEBFF[Double-tap]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        dt_multipoint_scale_a = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \aF08080FF[Autowall] \a87CEEBFF[Double-tap]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        air_multi_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \a87CEEBFF[In-air]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        air_multipoint_scale = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \a87CEEBFF[In-air]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        ovr_multi_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Target multi-point \a87CEEBFF[Override]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        ovr_multipoint_scale = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Multi-point scale \a87CEEBFF[Override]", 24, 100, 60, true, "%", 1, { [24] = "Auto" }),
        unsafe_text = ui.new_label("Rage", "Aimbot","           ------ Unsafe Hitbox ------"),
        unsafe_mode = ui.new_multiselect("Rage", "Aimbot","["..o.."] Extra unsafe hitbox tweak",{'Double-tap','In-air','Override'}),
        unsafe_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Unsafe hitbox", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        dt_unsafe_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Unsafe hitbox \a87CEEBFF[Double-tap]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        air_unsafe_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Unsafe hitbox \a87CEEBFF[In-air]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        ovr_unsafe_hitbox = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Unsafe hitbox \a87CEEBFF[Override]", { "Head", "Chest", "Arms", "Stomach", "Legs", "Feet" }),
        general_text = ui.new_label("Rage", "Aimbot","                ------ General ------"),
        safepoint = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Prefer safepoint", { 'In-air','Double-tap','Always on' }),
        automatic_fire = ui.new_checkbox("Rage", "Aimbot", "[" .. o .. "] Automatic fire"),
        automatic_penetration = ui.new_checkbox("Rage", "Aimbot", "[" .. o .. "] Automatic penetration"),
        automatic_scope_e = ui.new_checkbox("Rage", "Aimbot", "[" .. o .. "] Automatic scope"),
        automatic_scope = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Automatic scope disabler",{'In distance','On doubletap'}),
        autoscope_therehold = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Therehold for distance", 0, 3000, 500, true, "f", 1),
        silent_aim = ui.new_checkbox("Rage", "Aimbot", "[" .. o .. "] Silent aim"),
        max = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Maximum FOV", 1, 180, 180, true, "°", 1),
        fps_boost = ui.new_multiselect("Rage", "Aimbot", "[" .. o .. "] Low FPS mitigations",{'Force low accuracy boost','Disable multipoint: feet','Disable multipoint: arms','Disable multipoint: legs','Disable hitbox: feet','Lower hit chance precision','Limit targets per tick'}),
        hitchance_text = ui.new_label("Rage", "Aimbot","               ------ Hitchance ------"),
        hitchance_mode = ui.new_multiselect("Rage", "Aimbot","["..o.."] Extra hitchance tweak",{'Double-tap','On-shot','Fake duck','In-air','Unscoped','Crouching','Override 1','Override 2'}),
        hitchance = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance ", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_ovr = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[Override 1]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_ovr_2 = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[Override 2]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_air = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[In-air]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_os = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[On-shot]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_fd = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[Fake-duck]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_usc = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[Unscoped]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_dt = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[Double-tap]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),
        hitchance_cro = ui.new_slider("Rage", "Aimbot", "[" .. o .. "] Hitchance \a87CEEBFF[Crouching]", 0, 100, 60, true, "%", 1, { [0] = "Off" }),  
        damage_text = ui.new_label("Rage", "Other","                 ------ Damage ------"),
        damage_mode = ui.new_multiselect("Rage", "Other","["..o.."] Extra Damage tweak",{'Double-tap','On-shot','Fake duck','In-air','Unscoped','Override 1','Override 2'}),
        damage_complex = ui.new_combobox("Rage", "Other", "[" .. o .. "] Damage complexity",{'Original','Visible/autowall'}), 
        damage = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage ", 0, 126, 60, true,nil,1,damage_idx),
        damage_cro = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \aF08080FF[Visible]", 0, 126, 60, true,nil,1,damage_idx),
        damage_aut = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \aF08080FF[Autowall]", 0, 126, 60, true,nil,1,damage_idx),
        damage_ovr = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[Override 1]", 0, 126, 60, true,nil,1,damage_idx),
        damage_ovr_2 = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[Override 2]", 0, 126, 60, true,nil,1,damage_idx),
        damage_air = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[In-air]", 0, 126, 60, true,nil,1,damage_idx),
        damage_os = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[On-shot]", 0, 126, 60, true,nil,1,damage_idx),
        damage_fd = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[Fake-duck]", 0, 126, 60, true,nil,1,damage_idx),
        damage_usc = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[Unscoped]", 0, 126, 60, true,nil,1,damage_idx),   
        damage_complex_dt = ui.new_combobox("Rage", "Other", "[" .. o .. "] Damage complexity \a87CEEBFF[Double-tap]",{'Original','Visible/autowall'}), 
        damage_dt = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \a87CEEBFF[Double-tap]", 0, 126, 60, true,nil,1,damage_idx),
        damage_cro_dt = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \aF08080FF[Visible] \a87CEEBFF[Double-tap]", 0, 126, 60, true,nil,1,damage_idx),
        damage_aut_dt = ui.new_slider("Rage", "Other", "[" .. o .. "] Damage \aF08080FF[Autowall] \a87CEEBFF[Double-tap]", 0, 126, 60, true,nil,1,damage_idx),
        c = ui.new_label("Rage", "Other","\n"),
        accuarcy_boost = ui.new_combobox("Rage", "Other", "[" .. o .. "] Accuracy boost",{'Low','Medium','High','Maximum'}),
        delay_shot = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Delay shot",{'On key','Always on'}),
        stop_text = ui.new_label("Rage", "Other","               ------ Quick stop ------"),
        stop_mode = ui.new_multiselect("Rage", "Other","["..o.."] Extra Quick stop tweak",{'Double-tap','Unscoped','Override'}),
        stop = ui.new_checkbox("Rage", "Other", "[" .. o .. "] Quick stop"),
        stop_option = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Quick stop options", {'Early','Slow motion','Duck','Fake duck','Move between shots','Ignore molotov','Taser', 'Jump scout'}),
        stop_dt = ui.new_checkbox("Rage", "Other", "[" .. o .. "] Quick stop \a87CEEBFF[Double-tap]"),
        stop_option_dt = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Quick stop options \a87CEEBFF[Double-tap]", {'Early','Slow motion','Duck','Fake duck','Move between shots','Ignore molotov','Taser', 'Jump scout'}),
        stop_unscoped = ui.new_checkbox("Rage", "Other", "[" .. o .. "] Quick stop \a87CEEBFF[Unscoped]"),
        stop_option_unscoped = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Quick stop options \a87CEEBFF[Unscoped]", {'Early','Slow motion','Duck','Fake duck','Move between shots','Ignore molotov','Taser', 'Jump scout'}),
        stop_ovr = ui.new_checkbox("Rage", "Other", "[" .. o .. "] Quick stop \a87CEEBFF[Override]"),
        stop_option_ovr = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Quick stop options \a87CEEBFF[Override]", {'Early','Slow motion','Duck','Fake duck','Move between shots','Ignore molotov','Taser', 'Jump scout'}),
        ext_text = ui.new_label("Rage", "Other","                  ------ Extra ------"),
        fp = ui.new_combobox("Rage", "Other", "[" .. o .. "] Use ping-spike",{'On key','Always on'}),
        preferbm = ui.new_checkbox("Rage", "Other", "[" .. o .. "] Prefer body aim"),
        lethal = ui.new_checkbox("Rage", "Other", "[" .. o .. "] Prefer lethal baim"),
        prefer_baim_disablers = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Prefer body aim disablers", {"Low inaccuracy", "Target shot fired", "Target resolved", "Safe point headshot",'High pitch','Side way'}),
        dt = ui.new_multiselect("Rage", "Other",'['..o..'] Available doubletap option',{'Doubletap mode','Doubletap hitchance','Doubletap quick stop','Doubletap fakelag'}),
        doubletap_mode =  ui.new_combobox("Rage", "Other", "[" .. o .. "] Double tap mode",{'Offensive','Defensive'}),
        doubletap_hc = ui.new_slider("Rage", "Other", "[" .. o .. "] Double tap hit chance", 0, 100, 0, true, "%", 1),
        doubletap_fl = ui.new_slider("Rage", "Other", "[" .. o .. "] Double tap fake lag limit", 1, 10, 1),
        doubletap_stop = ui.new_multiselect("Rage", "Other", "[" .. o .. "] Double tap quick stop", { "Slow motion", "Duck", "Move between shots" }),
    }
end

local function export_cfg()
	local str = ""

    for i,o in ipairs(weapon_name) do 
		str = str .. tostring(ui.get(weapon.cfg[i].enable)) .. "|"
		.. arr_to_string((weapon.cfg[i].extra_feature)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].target_selection)) .. "|"
		.. arr_to_string((weapon.cfg[i].hitbox_mode)) .. "|"
		.. arr_to_string((weapon.cfg[i].target_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].dt_target_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].air_target_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].ovr_target_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].ovr_target_hitbox_2)) .. "|"
		.. arr_to_string((weapon.cfg[i].multi_mode)) .. "|"
        .. tostring(ui.get(weapon.cfg[i].multi_complex)) .. "|"
		.. arr_to_string((weapon.cfg[i].target_multi)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].multipoint_scale)) .. "|"
		.. arr_to_string((weapon.cfg[i].multi_hitbox_v)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].multipoint_scale_v)) .. "|"
		.. arr_to_string((weapon.cfg[i].multi_hitbox_a)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].multipoint_scale_a)) .. "|"

        .. tostring(ui.get(weapon.cfg[i].ping_avilble)) .. "|"
		.. arr_to_string((weapon.cfg[i].ping_multi_hitbox)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].ping_multipoint_scale)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].dt_multi_complex)) .. "|"
		.. arr_to_string((weapon.cfg[i].dt_multi_hitbox)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].dt_multipoint_scale)) .. "|"
		.. arr_to_string((weapon.cfg[i].dt_multi_hitbox_v)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].dt_multipoint_scale_v)) .. "|"
		.. arr_to_string((weapon.cfg[i].dt_multi_hitbox_a)) .. "|"
        .. tostring(ui.get(weapon.cfg[i].dt_multipoint_scale_a)) .. "|"
		.. arr_to_string((weapon.cfg[i].air_multi_hitbox)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].air_multipoint_scale)) .. "|"
		.. arr_to_string((weapon.cfg[i].ovr_multi_hitbox)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].ovr_multipoint_scale)) .. "|"
		.. arr_to_string((weapon.cfg[i].unsafe_mode)) .. "|"
		.. arr_to_string((weapon.cfg[i].unsafe_hitbox)) .. "|"

        .. arr_to_string((weapon.cfg[i].dt_unsafe_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].ovr_unsafe_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].air_unsafe_hitbox)) .. "|"
		.. arr_to_string((weapon.cfg[i].safepoint)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].automatic_fire)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].automatic_penetration)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].automatic_scope_e)) .. "|"
		.. arr_to_string((weapon.cfg[i].automatic_scope)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].autoscope_therehold)) .. "|"
        .. tostring(ui.get(weapon.cfg[i].silent_aim)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].max)) .. "|"
		.. arr_to_string((weapon.cfg[i].fps_boost)) .. "|"
		.. arr_to_string((weapon.cfg[i].hitchance_mode)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_ovr)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_ovr_2)) .. "|"

        .. tostring(ui.get(weapon.cfg[i].hitchance_air)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_os)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_fd)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_usc)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].hitchance_cro)) .. "|"
		.. arr_to_string((weapon.cfg[i].damage_mode)) .. "|"
        .. tostring(ui.get(weapon.cfg[i].damage_complex)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_cro)) .. "|"
        .. tostring(ui.get(weapon.cfg[i].damage_aut)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_ovr)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_ovr_2)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_air)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_os)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_fd)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_usc)) .. "|"

        .. tostring(ui.get(weapon.cfg[i].damage_complex_dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_cro_dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].damage_aut_dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].accuarcy_boost)) .. "|"
		.. arr_to_string((weapon.cfg[i].delay_shot)) .. "|"
		.. arr_to_string((weapon.cfg[i].stop_mode)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].stop)) .. "|"
		.. arr_to_string((weapon.cfg[i].stop_option)) .. "|"
        .. tostring(ui.get(weapon.cfg[i].stop_dt)) .. "|"
		.. arr_to_string((weapon.cfg[i].stop_option_dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].stop_unscoped)) .. "|"
		.. arr_to_string((weapon.cfg[i].stop_option_unscoped)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].stop_ovr)) .. "|"
		.. arr_to_string((weapon.cfg[i].stop_option_ovr)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].fp)) .. "|"

        .. tostring(ui.get(weapon.cfg[i].preferbm)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].lethal)) .. "|"
		.. arr_to_string((weapon.cfg[i].prefer_baim_disablers)) .. "|"
		.. arr_to_string((weapon.cfg[i].dt)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].doubletap_mode)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].doubletap_hc)) .. "|"
		.. tostring(ui.get(weapon.cfg[i].doubletap_fl)) .. "|"
		.. arr_to_string((weapon.cfg[i].doubletap_stop)) .. "|"
	end

	clipboard_export(str)
end

local function load_cfg()
	local tbl = str_to_sub(clipboard_import(), "|")

    for i,o in ipairs(weapon_name) do 
		ui.set(weapon.cfg[i].enable, to_boolean(tbl[1 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].extra_feature, str_to_sub(tbl[2 + (90 * (i - 1))],","))
        ui.set(weapon.cfg[i].target_selection, tbl[3 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].hitbox_mode, str_to_sub(tbl[4 + (90 * (i - 1))], ","))
        ui.set(weapon.cfg[i].target_hitbox, str_to_sub(tbl[5 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].dt_target_hitbox, str_to_sub(tbl[6 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].air_target_hitbox, str_to_sub(tbl[7 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].ovr_target_hitbox, str_to_sub(tbl[8 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].ovr_target_hitbox_2, str_to_sub(tbl[9 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].multi_mode, str_to_sub(tbl[10 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].multi_complex, tbl[11 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].target_multi, str_to_sub(tbl[12 + (90 * (i - 1))], ","))	
		ui.set(weapon.cfg[i].multipoint_scale, tbl[13 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].multi_hitbox_v, str_to_sub(tbl[14 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].multipoint_scale_v, tbl[15 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].multi_hitbox_a, str_to_sub(tbl[16 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].multipoint_scale_a, tbl[17 + (90 * (i - 1))])

		ui.set(weapon.cfg[i].ping_avilble, (tbl[18 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].ping_multi_hitbox, str_to_sub(tbl[19 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].ping_multipoint_scale, (tbl[20 + (90 * (i - 1))]))	
		ui.set(weapon.cfg[i].dt_multi_complex, tbl[21 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].dt_multi_hitbox, str_to_sub(tbl[22 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].dt_multipoint_scale, tbl[23 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].dt_multi_hitbox_v, str_to_sub(tbl[24 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].dt_multipoint_scale_v, tbl[25 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].dt_multi_hitbox_a, str_to_sub(tbl[26 + (90 * (i - 1))], ","))
        ui.set(weapon.cfg[i].dt_multipoint_scale_a, (tbl[27 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].air_multi_hitbox, str_to_sub(tbl[28 + (90 * (i - 1))], ","))	
		ui.set(weapon.cfg[i].air_multipoint_scale, tbl[29 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].ovr_multi_hitbox, str_to_sub(tbl[30 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].ovr_multipoint_scale, tbl[31 + (90 * (i - 1))])
		ui.set(weapon.cfg[i].unsafe_mode, str_to_sub(tbl[32 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].unsafe_hitbox, str_to_sub(tbl[33 + (90 * (i - 1))], ","))

		ui.set(weapon.cfg[i].dt_unsafe_hitbox, str_to_sub(tbl[34 + (90 * (i - 1))], ","))
        ui.set(weapon.cfg[i].air_unsafe_hitbox, str_to_sub(tbl[35 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].ovr_unsafe_hitbox, str_to_sub(tbl[36 + (90 * (i - 1))], ","))	
		ui.set(weapon.cfg[i].safepoint, to_boolean(tbl[37 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].automatic_fire, to_boolean(tbl[38 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].automatic_penetration, to_boolean(tbl[39 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].automatic_scope_e, to_boolean(tbl[40 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].automatic_scope, str_to_sub(tbl[41 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].autoscope_therehold, (tbl[42 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].silent_aim, to_boolean(tbl[43 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].max, (tbl[44 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].fps_boost, str_to_sub(tbl[45 + (90 * (i - 1))], ","))
        ui.set(weapon.cfg[i].hitchance_mode, str_to_sub(tbl[46 + (90 * (i - 1))], ","))	
		ui.set(weapon.cfg[i].hitchance, (tbl[47 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].hitchance_ovr, (tbl[48 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].hitchance_ovr_2, (tbl[49 + (90 * (i - 1))]))

		ui.set(weapon.cfg[i].hitchance_air, (tbl[50 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].hitchance_os, (tbl[51 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].hitchance_fd, (tbl[52 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].hitchance_usc, (tbl[53 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].hitchance_dt, (tbl[54 + (90 * (i - 1))]))	
		ui.set(weapon.cfg[i].hitchance_cro, (tbl[55 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_mode, str_to_sub(tbl[56 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].damage_complex, (tbl[57 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage, (tbl[58 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_cro, (tbl[59 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_aut, (tbl[60 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].damage_ovr, (tbl[61 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_ovr_2, (tbl[62 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_air, (tbl[63 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].damage_os, (tbl[64 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_fd, (tbl[65 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_usc, (tbl[66 + (90 * (i - 1))]))

        ui.set(weapon.cfg[i].damage_complex_dt, (tbl[67 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_dt, (tbl[68 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].damage_cro_dt, (tbl[69 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].damage_aut_dt, (tbl[70 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].accuarcy_boost, (tbl[71 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].delay_shot, str_to_sub(tbl[72 + (90 * (i - 1))], ","))	
		ui.set(weapon.cfg[i].stop_mode, str_to_sub(tbl[73 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].stop, to_boolean(tbl[74 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].stop_option, str_to_sub(tbl[75 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].stop_dt, to_boolean(tbl[76 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].stop_option_dt, str_to_sub(tbl[77 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].stop_unscoped, to_boolean(tbl[78 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].stop_option_unscoped, str_to_sub(tbl[79 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].stop_ovr, to_boolean(tbl[80 + (90 * (i - 1))]))	
		ui.set(weapon.cfg[i].stop_option_ovr, str_to_sub(tbl[81 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].fp, (tbl[82 + (90 * (i - 1))]))

		ui.set(weapon.cfg[i].preferbm, to_boolean(tbl[83 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].lethal, to_boolean(tbl[84 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].prefer_baim_disablers, str_to_sub(tbl[85 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].dt, str_to_sub(tbl[86 + (90 * (i - 1))], ","))
		ui.set(weapon.cfg[i].doubletap_mode, (tbl[87 + (90 * (i - 1))]))
        ui.set(weapon.cfg[i].doubletap_hc, (tbl[88 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].doubletap_fl, (tbl[89 + (90 * (i - 1))]))
		ui.set(weapon.cfg[i].doubletap_stop, str_to_sub(tbl[90 + (90 * (i - 1))], ","))
	end


end

ui.new_label("Rage", "Aimbot","\n")
ui.new_label("Rage", "Other","\n")
local cfg1 = ui.new_label("Rage", "Other","      \ad6b6f7ffImport/Export Weapon Settings")
local cfg2 = ui.new_button("Rage", "Other",'\aF0E68CFFExport',export_cfg)
local cfg3 = ui.new_button("Rage", "Other",'\aF0E68CFFImport',load_cfg)

--References

local ref_enabled, ref_enabledkey = ui.reference("RAGE", "Aimbot", "Enabled")
local ref_fov = ui.reference("RAGE", "Other", "Maximum FOV")
local ref_target_selection = ui.reference("RAGE", "Aimbot", "Target selection")
local ref_target_hitbox = ui.reference("RAGE", "Aimbot", "Target hitbox")
local ref_multipoint, ref_multipointkey = ui.reference("RAGE", "Aimbot", "Multi-point")
local ref_unsafe = ui.reference("RAGE", "Aimbot", "Avoid unsafe hitboxes")
local ref_multipoint_scale = ui.reference("RAGE", "Aimbot", "Multi-point scale")
local ref_prefer_safepoint = ui.reference("RAGE", "Aimbot", "Prefer safe point")
local ref_force_safepoint = ui.reference("RAGE", "Aimbot", "Force safe point")
local ref_automatic_fire = ui.reference("RAGE", "Other", "Automatic fire")
local ref_automatic_penetration = ui.reference("RAGE", "Other", "Automatic penetration")
local ref_silent_aim = ui.reference("RAGE", "Other", "Silent aim")
local ref_hitchance = ui.reference("RAGE", "Aimbot", "Minimum hit chance")
local ref_mindamage = ui.reference("RAGE", "Aimbot", "Minimum damage")
local ref_automatic_scope = ui.reference("RAGE", "Aimbot", "Automatic scope")
local ref_reduce_aimstep = ui.reference("RAGE", "Other", "Reduce aim step")
local ref_log_spread = ui.reference("RAGE", "Other", "Log misses due to spread")
local ref_low_fps_mitigations = ui.reference("RAGE", "Other", "Low FPS mitigations")
local ref_remove_recoil = ui.reference("RAGE", "Other", "Remove recoil")
local ref_accuracy_boost = ui.reference("RAGE", "Other", "Accuracy boost")
local ref_delay_shot = ui.reference("RAGE", "Other", "Delay shot")
local ref_quickstop, ref_quickstopkey, ref_quickstop_options = ui.reference("RAGE", "Aimbot", "Quick stop")
local ref_quickpeek, ref_quickpeek_key, ref_quickpeek_mode = ui.reference("RAGE", "Other", "Quick peek assist")
local ref_antiaim_correction = ui.reference("RAGE", "Other", "Anti-aim correction")
--local ref_antiaim_correction_override = ui.reference("RAGE", "Other", "Anti-aim correction override")
--local ref_prefer_bodyaim = ui.reference("RAGE", "Other", "Prefer body aim")
--local ref_prefer_bodyaim_disablers = ui.reference("RAGE", "Other", "Prefer body aim disablers")
local ref_force_bodyaim = ui.reference("RAGE", "Aimbot", "Force body aim")
local ref_duck_peek_assist = ui.reference("RAGE", "Other", "Duck peek assist")
local ref_doubletap, ref_doubletapkey, ref_doubletap_mode = ui.reference("RAGE", "Aimbot", "Double tap")
local ref_slowwalk, ref_slowwalk_key = ui.reference("AA", "Other", "Slow motion")
local ref_osaa, ref_osaakey = ui.reference("AA", "Other", "On shot anti-aim")
local ref_doubletap_hc = ui.reference("RAGE", "Aimbot", "Double tap hit chance")
local ref_doubletap_stop = ui.reference("RAGE", "Aimbot", "Double tap quick stop")
local ref_doubletap_fl = ui.reference("RAGE", "Aimbot", "Double tap fake lag limit")
--local ref_doubletap_mode = ui.reference("RAGE", "Aimbot", "Double tap mode")
local ping_spike = { ui.reference("MISC", "Miscellaneous", "Ping spike") }
local ref_skeet_min_dmg = ui.reference("Rage", "Aimbot", "Minimum damage override")

local function hide_skeet()
    local disable_show = not ui.get(weapon.run_hide)
    ui.set_visible(ref_enabled,disable_show)
    ui.set_visible(ref_log_spread,disable_show)
    ui.set_visible(ref_fov,disable_show)
    ui.set_visible(ref_enabledkey,disable_show)
    ui.set_visible(ref_remove_recoil,disable_show)
    ui.set_visible(ref_reduce_aimstep,disable_show)
    ui.set_visible(ref_target_selection,disable_show)
    ui.set_visible(ref_target_hitbox,disable_show)
    ui.set_visible(ref_multipoint,disable_show)
    ui.set_visible(ref_multipointkey,disable_show)
    ui.set_visible(ref_unsafe,disable_show)
    ui.set_visible(ref_multipoint_scale,disable_show)
    ui.set_visible(ref_prefer_safepoint,disable_show)
    ui.set_visible(ref_automatic_fire,disable_show)
    ui.set_visible(ref_automatic_penetration,disable_show)
    ui.set_visible(ref_silent_aim,disable_show)
    ui.set_visible(ref_hitchance,disable_show)
    ui.set_visible(ref_mindamage,disable_show)
    ui.set_visible(ref_automatic_scope,disable_show)
    ui.set_visible(ref_low_fps_mitigations,disable_show)
    ui.set_visible(ref_accuracy_boost,disable_show)
    ui.set_visible(ref_delay_shot,disable_show)
    ui.set_visible(ref_doubletap_fl,disable_show)
    ui.set_visible(ref_quickstop,disable_show)
    ui.set_visible(ref_quickstopkey,disable_show)
    ui.set_visible(ref_quickstop_options,disable_show)
    ui.set_visible(ref_doubletap_hc,disable_show)
    ui.set_visible(ref_doubletap_stop,disable_show)
    ui.set_visible(ref_doubletap_mode,disable_show)
    ui.set_visible(ref_skeet_min_dmg,disable_show)
end

local function in_air()
    if entity.get_local_player( ) == nil then return false end
    return bit.band( entity.get_prop( entity.get_local_player( ), "m_fFlags" ), 1 ) == 0
end

local check = {0,3,8}

local function enemy_visible(idx)

    if idx == nil then return false end

    for k, v in pairs(check) do

        local cx, cy, cz = entity.hitbox_position(idx, v)
        if client.visible(cx, cy, cz) then
            return true
        end

    end
    return false
end

local vector_angles = function(x1, y1, z1, x2, y2, z2)
    local origin_x, origin_y, origin_z
    local target_x, target_y, target_z
    if x2 == nil then
        target_x, target_y, target_z = x1, y1, z1
        origin_x, origin_y, origin_z = client.eye_position()
        if origin_x == nil then
            return
        end
    else
        origin_x, origin_y, origin_z = x1, y1, z1
        target_x, target_y, target_z = x2, y2, z2
    end

    local delta_x, delta_y, delta_z = target_x-origin_x, target_y-origin_y, target_z-origin_z

    if delta_x == 0 and delta_y == 0 then
        return (delta_z > 0 and 270 or 90), 0
    else

        local yaw = math.deg(math.atan2(delta_y, delta_x))


        local hyp = math.sqrt(delta_x*delta_x + delta_y*delta_y)
        local pitch = math.deg(math.atan2(-delta_z, hyp))

        return pitch, yaw
    end
end

local normalize_yaw = function(yaw)
    while yaw > 180 do yaw = yaw - 360 end
    while yaw < -180 do yaw = yaw + 360 end

    return yaw
end

local is_player_moving = function(ent)
    local vec_vel = { entity.get_prop(ent, 'm_vecVelocity') }
    local velocity = math.floor(math.sqrt(vec_vel[1]^2 + vec_vel[2]^2) + 0.5)

    return velocity > 1
end

local predict_positions = function(posx, posy, posz, ticks, ent)
    local x, y, z = entity.get_prop(ent, 'm_vecVelocity')

    for i = 0, ticks, 1 do
        posx = posx + x * globals.tickinterval()
        posy = posy + y * globals.tickinterval()
        posz = posz + z * globals.tickinterval() + 9.81 * globals.tickinterval() * globals.tickinterval() / 2
    end

    return posx, posy, posz
end

local calculate_damage = function(local_player, target, predictive)

    local entindex, dmg = -1, -1
    local lx, ly, lz = client.eye_position()

    local px, py, pz = entity.hitbox_position(target, 6) -- middle chest
    local px1, py1, pz1 = entity.hitbox_position(target, 4) -- upper chest
    local px2, py2, pz2 = entity.hitbox_position(target, 2) -- pelvis

    if predictive and is_player_moving(local_player) then
        lx, ly, lz = predict_positions(lx, ly, lz, 20, local_player)
    end
    
    for i=0, 2 do
        if i == 0 then
            entindex, dmg = client.trace_bullet(local_player, lx, ly, lz, px, py, pz)
        else 
            if i==1 then
                entindex, dmg = client.trace_bullet(local_player, lx, ly, lz, px1, py1, pz1)
            else
                entindex, dmg = client.trace_bullet(local_player, lx, ly, lz, px2, py2, pz2)
            end
        end

        if entindex == nil or entindex == local_player or not entity.is_enemy(entindex) then
            return -1
        end
        
        return dmg
    end

    return -1
end

local clamp = function(v, min, max)
    return ((v > max) and max) or ((v < min) and min or v)
end

local function angle_forward(angle) 
    local sin_pitch = math.sin(math.rad(angle[1]))
    local cos_pitch = math.cos(math.rad(angle[1]))
    local sin_yaw = math.sin(math.rad(angle[2]))
    local cos_yaw = math.cos(math.rad(angle[2]))

    return {        
        cos_pitch * cos_yaw,
        cos_pitch * sin_yaw,
        -sin_pitch
    }
end

function weapon:get_weapon_idx()
    local local_player = entity.get_local_player()
    if local_player == nil then return nil end
    local weapon_ent = entity.get_player_weapon(local_player)
    if weapon_ent == nil then return nil end
    local weapon_idx = bit.band(entity.get_prop(weapon_ent, "m_iItemDefinitionIndex"), 0xFFFF)
    if weapon_idx == nil then return nil end
    local get_idx = weapon_idx_list[weapon_idx] ~= nil and weapon_idx_list[weapon_idx] or 1
    return get_idx
end

function weapon:recorrect()
    local idx = self:get_weapon_idx()
    if idx == nil then return 1 end
    if ui.get(self.cfg[idx].enable) then
        return idx
    else     
        return 1
    end
end

function weapon:get_hitbox(idx)
    local complex = includes(ui.get(self.cfg[idx].extra_feature),'Hitbox')
    if ui.get(self.ovr_forcehead) and includes(ui.get(self.available),'Hitbox') then
        return {'Head'}
    elseif ui.get(self.ovr_box) and includes(ui.get(self.available),'Hitbox') and includes(ui.get(self.cfg[idx].hitbox_mode),'Override 1') and complex then
        return ui.get(self.cfg[idx].ovr_target_hitbox) -- override 1
    elseif ui.get(self.ovr_box_2) and includes(ui.get(self.available),'Hitbox') and includes(ui.get(self.cfg[idx].hitbox_mode),'Override 2') and complex then
        return ui.get(self.cfg[idx].ovr_target_hitbox_2) -- override 2
    elseif in_air() and includes(ui.get(self.cfg[idx].hitbox_mode),'In-air') and complex then
        return ui.get(self.cfg[idx].air_target_hitbox) -- air
    elseif ui.get(ref_doubletap) and ui.get(ref_doubletapkey) and includes(ui.get(self.cfg[idx].hitbox_mode),'Double-tap') and complex then
        return ui.get(self.cfg[idx].dt_target_hitbox) -- dt
    end
    return ui.get(self.cfg[idx].target_hitbox) -- global
end

local is_visible = false

function weapon:get_multipoint(idx)
    local complex = includes(ui.get(self.cfg[idx].extra_feature),'Multi-Point')

    if ui.get(self.ovr_multi) and includes(ui.get(self.available),'Multipoint') and includes(ui.get(self.cfg[idx].multi_mode),'Override') and complex then
        return { [1] = ui.get(self.cfg[idx].ovr_multi_hitbox) , [2] = ui.get(self.cfg[idx].ovr_multipoint_scale) } -- override
    elseif ui.get(ping_spike[1]) and ui.get(ping_spike[2]) and ui.get(ping_spike[3]) >= ui.get(self.cfg[idx].ping_avilble) and includes(ui.get(weapon.cfg[idx].multi_mode),'Ping-spike') and complex then
        return { [1] = ui.get(self.cfg[idx].ping_multi_hitbox) , [2] = ui.get(self.cfg[idx].ping_multipoint_scale)} -- ping spike
    elseif in_air() and includes(ui.get(self.cfg[idx].multi_mode),'In-air') and complex then
        return { [1] = ui.get(self.cfg[idx].air_multi_hitbox) , [2] = ui.get(self.cfg[idx].air_multipoint_scale)} -- inair
    elseif ui.get(ref_doubletap) and ui.get(ref_doubletapkey) and includes(ui.get(self.cfg[idx].multi_mode),'Double-tap') and complex then
        if ui.get(self.cfg[idx].dt_multi_complex) == 0 then
            return { [1] = ui.get(self.cfg[idx].dt_multi_hitbox) , [2] = ui.get(self.cfg[idx].dt_multipoint_scale) } -- dt
        elseif ui.get(self.cfg[idx].dt_multi_complex) == 1 and is_visible then
            return { [1] = ui.get(self.cfg[idx].dt_multi_hitbox_v) , [2] = ui.get(self.cfg[idx].dt_multipoint_scale_v) } -- dt
        elseif ui.get(self.cfg[idx].dt_multi_complex) == 1 and not is_visible then
            return { [1] = ui.get(self.cfg[idx].dt_multi_hitbox_a) , [2] = ui.get(self.cfg[idx].dt_multipoint_scale_a) } -- dt
        end
    end
    if ui.get(self.cfg[idx].multi_complex) == 0  or not includes(ui.get(weapon.cfg[idx].extra_feature),'Multi-Point') then
        return { [1] = ui.get(self.cfg[idx].target_multi) , [2] = ui.get(self.cfg[idx].multipoint_scale) } -- dt
    elseif ui.get(self.cfg[idx].multi_complex) == 1 and is_visible then
        return { [1] = ui.get(self.cfg[idx].multi_hitbox_v) , [2] = ui.get(self.cfg[idx].multipoint_scale_v) } -- dt
    elseif ui.get(self.cfg[idx].multi_complex) == 1 and not is_visible then
        return { [1] = ui.get(self.cfg[idx].multi_hitbox_a) , [2] = ui.get(self.cfg[idx].multipoint_scale_a) } -- dt
    end
end

function weapon:get_unsafe_hitbox(idx)
    local complex = includes(ui.get(self.cfg[idx].extra_feature),'Unsafe hitbox')
    if ui.get(self.ovr_unsafe) and includes(ui.get(self.available),'Unsafe hitbox') and includes(ui.get(self.cfg[idx].unsafe_mode),'Override') and complex then
        return ui.get(self.cfg[idx].ovr_unsafe_hitbox) -- override
    elseif in_air() and includes(ui.get(self.cfg[idx].unsafe_mode),'In-air') and complex then
        return ui.get(self.cfg[idx].air_unsafe_hitbox) -- inair
    elseif ui.get(ref_doubletap) and ui.get(ref_doubletapkey) and includes(ui.get(self.cfg[idx].unsafe_mode),'Double-tap') and complex then
        return ui.get(self.cfg[idx].dt_unsafe_hitbox) -- dt
    end
    return ui.get(self.cfg[idx].unsafe_hitbox) -- global
end

function weapon:get_prefer_safe_point(idx)
    if includes(ui.get(self.cfg[idx].safepoint),'Always on') then
        return true
    elseif includes(ui.get(self.cfg[idx].safepoint),'In-air') and in_air() then
        return true
    elseif includes(ui.get(self.cfg[idx].safepoint),'Double-tap') and ui.get(ref_doubletap) and ui.get(ref_doubletapkey) then
        return true
    end
    return false
end

function weapon:get_dis()
    local target = client.current_threat()
    if target == nil then return 99999999 end
    local target_vector = vector(entity.get_origin(target))

    local local_player = entity.get_local_player()
    if local_player == nil then return 99999999 end
    local local_vector = vector(entity.get_origin(local_player))

    local dis = local_vector:dist(target_vector)
    return dis
end

function weapon:get_scope(idx)
    if not ui.get(self.cfg[idx].automatic_scope_e) then
        return false
    end
    local dis = self:get_dis()
    if includes(ui.get(self.cfg[idx].automatic_scope),'In distance') and dis < ui.get(self.cfg[idx].autoscope_therehold) then
        return false
    elseif includes(ui.get(self.cfg[idx].automatic_scope),'On doubletap') and ui.get(ref_doubletap) and ui.get(ref_doubletapkey) then
        return false
    end
    return true
end

function weapon:get_hitchance(idx)

    local complex = includes(ui.get(self.cfg[idx].extra_feature),'Hitchance')
    if ui.get(self.ovr_hc) and includes(ui.get(self.available),'Hit chance') and includes(ui.get(self.cfg[idx].hitchance_mode),'Override 1') and complex then
        return ui.get(self.cfg[idx].hitchance_ovr) -- override 1
    elseif ui.get(self.ovr_hc_2) and includes(ui.get(self.available),'Hit chance') and includes(ui.get(self.cfg[idx].hitchance_mode),'Override 2') and complex then
        return ui.get(self.cfg[idx].hitchance_ovr_2) -- override 2
    elseif in_air() and includes(ui.get(self.cfg[idx].hitchance_mode),'In-air') and complex then
        return ui.get(self.cfg[idx].hitchance_air) -- air
    elseif ui.get(ref_duck_peek_assist) and includes(ui.get(self.cfg[idx].hitchance_mode),'Fake duck') and complex then
        return ui.get(self.cfg[idx].hitchance_fd) -- fd
    elseif ui.get(ref_osaa) and ui.get(ref_osaakey) and includes(ui.get(self.cfg[idx].hitchance_mode),'On-shot') and complex then
        return ui.get(self.cfg[idx].hitchance_os) -- os
    elseif entity.get_prop(entity.get_local_player(),'m_bIsScoped') == 0 and includes(ui.get(self.cfg[idx].hitchance_mode),'Unscoped') and complex and includes(scoped_wpn_idx,idx) then
        return ui.get(self.cfg[idx].hitchance_usc) -- scope
    elseif entity.get_prop(entity.get_local_player(), "m_flDuckAmount") > 0.8 and includes(ui.get(self.cfg[idx].hitchance_mode),'Crouching') and complex then
        return ui.get(self.cfg[idx].hitchance_cro) -- duck
    elseif ui.get(ref_doubletap) and ui.get(ref_doubletapkey) and includes(ui.get(self.cfg[idx].hitchance_mode),'Double-tap') and complex then
        return ui.get(self.cfg[idx].hitchance_dt) -- dt
    end
    return ui.get(self.cfg[idx].hitchance) -- global

end

function weapon:get_damage(idx)

    local complex = includes(ui.get(self.cfg[idx].extra_feature),'Damage')
    if ui.get(self.ovr_dmg) and includes(ui.get(self.available),'Min DMG') and includes(ui.get(self.cfg[idx].damage_mode),'Override 1') and complex then
        return ui.get(self.cfg[idx].damage_ovr)
    elseif ui.get(self.ovr_dmg_2) and includes(ui.get(self.available),'Min DMG') and includes(ui.get(self.cfg[idx].damage_mode),'Override 2') and complex then
        return ui.get(self.cfg[idx].damage_ovr_2)
    elseif in_air() and includes(ui.get(self.cfg[idx].damage_mode),'In-air') and complex then
        return ui.get(self.cfg[idx].damage_air) -- air
    elseif ui.get(ref_duck_peek_assist) and includes(ui.get(self.cfg[idx].damage_mode),'Fake duck') and complex then
        return ui.get(self.cfg[idx].damage_fd) -- fd
    elseif ui.get(ref_osaa) and ui.get(ref_osaakey) and includes(ui.get(self.cfg[idx].damage_mode),'On-shot') and complex then
        return ui.get(self.cfg[idx].damage_os) -- os
    elseif includes(ui.get(self.cfg[idx].damage_mode),'Unscoped') and entity.get_prop(entity.get_local_player(),'m_bIsScoped') == 0 and complex and includes(scoped_wpn_idx,idx) then
        return ui.get(self.cfg[idx].damage_usc) -- scope
    elseif ui.get(ref_doubletap) and ui.get(ref_doubletapkey) and includes(ui.get(self.cfg[idx].damage_mode),'Double-tap') and complex then
        
        if ui.get(self.cfg[idx].damage_complex_dt) == 'Original' then
            return ui.get(self.cfg[idx].damage_dt)
        elseif ui.get(self.cfg[idx].damage_complex_dt) == 'Visible/autowall' and is_visible then
            return ui.get(self.cfg[idx].damage_cro_dt)
        elseif ui.get(self.cfg[idx].damage_complex_dt) == 'Visible/autowall' and not is_visible then
            return ui.get(self.cfg[idx].damage_aut_dt)
        end
    end

    if ui.get(self.cfg[idx].damage_complex) == 'Original' or not includes(ui.get(self.cfg[idx].extra_feature),'Damage') then
        return ui.get(self.cfg[idx].damage)
    elseif ui.get(self.cfg[idx].damage_complex) == 'Visible/autowall' and is_visible then
        return ui.get(self.cfg[idx].damage_cro)
    elseif ui.get(self.cfg[idx].damage_complex) == 'Visible/autowall' and not is_visible then
        return ui.get(self.cfg[idx].damage_aut)
    end

end

function weapon:get_delay(idx)
    if includes(ui.get(self.cfg[idx].delay_shot),'Always on') then
        return true
    elseif includes(ui.get(self.cfg[idx].delay_shot),'On key') and includes(ui.get(self.available),'Delay shot') and ui.get(self.ovr_delay) then
        return true
    end
    return false
end

function weapon:get_stop(idx)
    local complex = includes(ui.get(self.cfg[idx].extra_feature),'Quick stop')

    if ui.get(self.ovr_stop) and includes(ui.get(self.available),'Quick stop') and includes(ui.get(self.cfg[idx].stop_mode),'Override') and complex then
        return { [1] = ui.get(self.cfg[idx].stop_ovr) , [2] = ui.get(self.cfg[idx].stop_option_ovr) }
    elseif entity.get_prop(entity.get_local_player(),'m_bIsScoped') == 0 and includes(ui.get(self.cfg[idx].stop_mode),'Unscoped') and complex and includes(scoped_wpn_idx,idx) then
        return { [1] = ui.get(self.cfg[idx].stop_unscoped) , [2] = ui.get(self.cfg[idx].stop_option_unscoped) }
    elseif ui.get(ref_doubletap) and ui.get(ref_doubletapkey) and includes(ui.get(self.cfg[idx].stop_mode),'Double-tap') and complex then
        return { [1] = ui.get(self.cfg[idx].stop_dt) , [2] = ui.get(self.cfg[idx].stop_option_dt) }
    end
    return { [1] = ui.get(self.cfg[idx].stop) , [2] = ui.get(self.cfg[idx].stop_option) }
end

function weapon:get_baim(idx)
    if ui.get(self.ovr_forcehead) and includes(ui.get(self.available),'Hitbox') then
        return false
    end
    return ui.get(self.cfg[idx].preferbm)
end

function weapon:disabler(idx)

    local disable_list = {}

    if includes(ui.get(self.cfg[idx].prefer_baim_disablers),"Low inaccuracy") then
        table.insert(disable_list,"Low inaccuracy")
    end

    if includes(ui.get(self.cfg[idx].prefer_baim_disablers),"Target shot fired") then
        table.insert(disable_list,"Target shot fired")
    end

    if includes(ui.get(self.cfg[idx].prefer_baim_disablers),"Target resolved") then
        table.insert(disable_list,"Target resolved")
    end

    if includes(ui.get(self.cfg[idx].prefer_baim_disablers),"Safe point headshot") then
        table.insert(disable_list,"Safe point headshot")
    end

    is_visible = false

    local me = entity.get_local_player() 
    for _, players in pairs(entity.get_players(true)) do

        plist.set(players, "High priority",false)

        if enemy_visible(players) then
            is_visible = true
        end

        if includes(ui.get(self.high_pro),'AWP user') then
            local weapon = entity.get_player_weapon(players)
            if weapon ~= nil then
                plist.set(players, "High priority", entity.get_classname(weapon) == "CWeaponAWP")
            end
        end

        if includes(ui.get(self.high_pro),'Bomb carrier') then
            for i = 64 , 0 , -1 do
                local idx = entity.get_prop(entity.get_prop(players, "m_hMyWeapons", i), "m_iItemDefinitionIndex")
                if idx == 49 then
                    plist.set(players, "High priority", true)
                end
            end
        end

        local me_origin = { entity.get_prop(me, 'm_vecAbsOrigin') }
        local e_wpn = entity.get_player_weapon(players)
        local shot_time = globals.tickinterval() * 14
        local vec_vel = { entity.get_prop(players, 'm_vecVelocity') }
        local eye_pos = { client.eye_position() }
        local abs_origin = { entity.get_prop(players, 'm_vecAbsOrigin') }
        local ang_abs = { entity.get_prop(players, 'm_angAbsRotation') }
        local pitch, yaw = vector_angles(abs_origin[1], abs_origin[2], abs_origin[2], eye_pos[1], eye_pos[2], eye_pos[3])
        local yaw_degress = math.floor(math.abs(normalize_yaw(yaw - ang_abs[2])))

        local health = entity.get_prop(players, "m_iHealth")
        local g_damage = calculate_damage(me, players, true)

        if includes(ui.get(self.cfg[idx].prefer_baim_disablers),'High pitch') and ui.get(ref_prefer_bodyaim) then
            if me_origin[3] > abs_origin[3] and math.abs(me_origin[3] - abs_origin[3]) > 30 or false then
                plist.set(players, "Override prefer body aim","Off" )
            end
        end

        if includes(ui.get(self.cfg[idx].prefer_baim_disablers),'Side way') and ui.get(ref_prefer_bodyaim) then
            if yaw_degress > 90 + 20 or yaw_degress < 90 - 20 then
                plist.set(players, "Override prefer body aim","Off" ) 
            end
        end

        if ui.get(self.cfg[idx].lethal) then
            if g_damage >= health then
                plist.set(players, "Override prefer body aim","Force" )
            end
        end

        plist.set(players, "Override prefer body aim","-" )
    end
end

function weapon:get_ping(idx)
    if ui.get(self.allow_fake_ping) == false then return end

    if (ui.get(self.cfg[idx].fp) == 'Always on') then
        ui.set(ping_spike[1],true)
    elseif (ui.get(self.cfg[idx].fp) == 'On key') and ui.get(self.fake_ping_key) then
        ui.set(ping_spike[1],true)
    else
        ui.set(ping_spike[1],false)
    end

    ui.set(ping_spike[2],'Always on')
end

local wpn_ignored = {
	'CKnife',
	'CWeaponTaser',
	'CC4',
	'CHEGrenade',
	'CSmokeGrenade',
	'CMolotovGrenade',
	'CSensorGrenade',
	'CFlashbang',
	'CDecoyGrenade',
	'CIncendiaryGrenade'
}

function weapon:main_funcs()

    if ui.get(self.main_switch) == false then return end

    local local_player = entity.get_local_player()

    local weapon_d = entity.get_player_weapon(local_player)

    if weapon_d == nil then return end
    
    local weapon_id = self:recorrect()

    if weapon_id == nil then weapon_id = 1 end

    local allow_use_pene = false
    local dmg_out = 0

    if weapon_d ~= nil and not includes(wpn_ignored, entity.get_classname(weapon_d)) then

        if  ui.get(self.ovr_dmg_smart) and includes(ui.get(self.available),'Min DMG') then

            local pitch, yaw = client.camera_angles()
            local fwd = angle_forward({ pitch, yaw, 0 })
            local start_pos = { client.eye_position() }
            
            local fraction = client.trace_line(local_player, start_pos[1], start_pos[2], start_pos[3], start_pos[1] + (fwd[1] * 8192), start_pos[2] + (fwd[2] * 8192), start_pos[3] + (fwd[3] * 8192))

            if fraction < 1 then
                local end_pos = {
                    start_pos[1] + (fwd[1] * (8192 * fraction + 128)),
                    start_pos[2] + (fwd[2] * (8192 * fraction + 128)),
                    start_pos[3] + (fwd[3] * (8192 * fraction + 128)),
                }

                local ent, dmg = client.trace_bullet(local_player, start_pos[1], start_pos[2], start_pos[3], end_pos[1], end_pos[2], end_pos[3])

                if ent == nil then
                    ent = -1
                end

                if dmg > 0 and ui.get(self.ovr_dmg_smart) and includes(ui.get(self.available),'Min DMG') then
                    allow_use_pene = true
                    dmg_out = dmg
                end
            end
        end
    end     

    --ui.set(ref_target_selection,ui.get(self.cfg[weapon_id].target_selection))

    local target_hitbox = self:get_hitbox(weapon_id)
    if #target_hitbox == 0 then
        target_hitbox = {'Head'}
    end

    ui.set(ref_target_hitbox,target_hitbox)
    ui.set(ref_multipoint,self:get_multipoint(weapon_id)[1])
    ui.set(ref_multipointkey,'Always on')
    ui.set(ref_multipoint_scale,self:get_multipoint(weapon_id)[2])
    ui.set(ref_unsafe,self:get_unsafe_hitbox(weapon_id))
    ui.set(ref_prefer_safepoint,self:get_prefer_safe_point(weapon_id))
    ui.set(ref_automatic_fire,ui.get(self.cfg[weapon_id].automatic_fire))
    ui.set(ref_automatic_penetration,ui.get(self.cfg[weapon_id].automatic_penetration))
    ui.set(ref_automatic_scope,self:get_scope(weapon_id))
    ui.set(ref_silent_aim,ui.get(self.cfg[weapon_id].silent_aim))
    ui.set(ref_fov,ui.get(self.cfg[weapon_id].max))
    ui.set(ref_low_fps_mitigations,ui.get(self.cfg[weapon_id].fps_boost))
    ui.set(ref_hitchance,self:get_hitchance(weapon_id) )
    ui.set(ref_mindamage,allow_use_pene and clamp(dmg_out,0,126) or self:get_damage(weapon_id) )
    --ui.set(ref_accuracy_boost,ui.get(self.cfg[weapon_id].accuarcy_boost) )
    ui.set(ref_delay_shot,self:get_delay(weapon_id) )
    ui.set(ref_quickstop,self:get_stop(weapon_id)[1] )
    ui.set(ref_quickstopkey,'Always on')
    ui.set(ref_quickstop_options,self:get_stop(weapon_id)[2])
    self:disabler(weapon_id)
    self:get_ping(weapon_id)

    if includes(ui.get(self.cfg[weapon_id].dt),'Doubletap mode') then
        ui.set(ref_doubletap_mode,ui.get(self.cfg[weapon_id].doubletap_mode))
    end

    if includes(ui.get(self.cfg[weapon_id].dt),'Doubletap quick stop') then
        ui.set(ref_doubletap_stop,ui.get(self.cfg[weapon_id].doubletap_stop))
    end
    
    if includes(ui.get(self.cfg[weapon_id].dt),'Doubletap hitchance') then
        ui.set(ref_doubletap_hc,ui.get(self.cfg[weapon_id].doubletap_hc))
    end

    if includes(ui.get(self.cfg[weapon_id].dt),'Doubletap fakelag') then
        ui.set(ref_doubletap_fl,ui.get(self.cfg[weapon_id].doubletap_fl))
    end
end

local function invisible()
    local vis = ui.is_menu_open()
    if vis == false and ui.get(weapon.adjust) then
        local id = weapon:recorrect()
        if id == nil then id = 1 end
        ui.set(weapon.weapon_select,weapon_name[id])
    end
end

local function gradient_text(r1, g1, b1, a1, r2, g2, b2, a2, text)
	local output = ''

	local len = #text-1

	local rinc = (r2 - r1) / len
	local ginc = (g2 - g1) / len
	local binc = (b2 - b1) / len
	local ainc = (a2 - a1) / len

	for i=1, len+1 do
		output = output .. ('\a%02x%02x%02x%02x%s'):format(r1, g1, b1, a1, text:sub(i, i))

		r1 = r1 + rinc

		g1 = g1 + ginc
		b1 = b1 + binc
		a1 = a1 + ainc
	end

	return output
end

local function indicator()
    local screen_size_x,screen_size_y = client.screen_size()
    local local_player = entity.get_local_player()
    if local_player == nil then return end
    local color = {ui.get(weapon.lua_clr)}
    local test = gradient_text(176,196,222, 255,color[1],color[2],color[3],color[4], "DMG -> "..ui.get(ref_mindamage))

    local id = weapon:recorrect()
    if id == nil then id = 1 end
    if ui.get(weapon.ovr_dmg_smart) and includes(ui.get(weapon.available),'Min DMG') then
        renderer.indicator(100,220,220,255, 'AUTO PENETRATION')
    end

    if ui.get(weapon.ovr_dmg_2) and includes(ui.get(weapon.available),'Min DMG') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].damage_mode),'Override 2') and (not (ui.get(weapon.ovr_dmg) and includes(ui.get(weapon.cfg[id].damage_mode),'Override 1')) and 255 or 150) or 150, 'OVR DAMAGE 2')
    end

    if ui.get(weapon.ovr_hc) and includes(ui.get(weapon.available),'Hit chance') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].hitchance_mode),'Override 1') and 255 or 150, 'OVR HITCHANCE [1]')
    end

    if ui.get(weapon.ovr_hc_2) and includes(ui.get(weapon.available),'Hit chance') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].hitchance_mode),'Override 2') and (not (ui.get(weapon.ovr_hc) and includes(ui.get(weapon.cfg[id].hitchance_mode),'Override 1')) and 255 or 150) or 150, 'OVR HITCHANCE 2')
    end

    if ui.get(weapon.ovr_box) and includes(ui.get(weapon.available),'Hitbox') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].hitbox_mode),'Override 1') and 255 or 150, 'OVR HITBOX [1]')
    end

    if ui.get(weapon.ovr_box_2) and includes(ui.get(weapon.available),'Hitbox') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].hitbox_mode),'Override 2') and (not (ui.get(weapon.ovr_box) and includes(ui.get(weapon.cfg[id].hitbox_mode),'Override 1')) and 255 or 150) or 150, 'OVR HITBOX 2')
    end

    if ui.get(weapon.ovr_multi) and includes(ui.get(weapon.available),'Multipoint') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].multi_mode),'Override') and 255 or 150, 'OVR MULTIPOINT')
    end

    if ui.get(weapon.ovr_unsafe) and includes(ui.get(weapon.available),'Unsafe hitbox') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].unsafe_mode),'Override') and 255 or 150, 'OVR UNSAFE HITBOX')
    end

    if ui.get(weapon.ovr_stop) and  includes(ui.get(weapon.available),'Quick stop') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].stop_mode),'Override') and 255 or 150, 'OVR QUICK STOP')
    end

    if ui.get(weapon.ovr_delay) and includes(ui.get(weapon.available),'Delay shot') then
        renderer.indicator(220,220,220,includes(ui.get(weapon.cfg[id].delay_shot),'On key') and 255 or 150, 'FORCE DELAY')
    end

    if ui.get(weapon.ovr_forcehead) and includes(ui.get(weapon.available),'Hitbox') then
        renderer.indicator(220,0,0,255, 'FORCE HEAD')
    end

    if ui.get(weapon.lua_label) == 'Skeet indicator' then
        renderer.indicator(100,149,237,255, test)
    else
        local size_x,size_y = renderer.measure_text('',ui.get(ref_mindamage))
        renderer.text(screen_size_x/2-size_x*2,screen_size_y/2-size_y*2.5,color[1],color[2],color[3],color[4],"b",'',ui.get(ref_mindamage))
    end

    
end
--Mewtwo Radio
local ffi = require("ffi")
local logo = renderer.load_png

local url = 'http://stream.laut.fm/mewtwotech'

local http_c = (function()
ffi.cdef[[
	typedef struct {
		void* __pad[12];
		void* steam_http;
	}steam_ctx_t;
]]

local function convert_char_array_to_string(o)local n=""for i,j in pairs(o)do n=n..string.char(j)end;return n end;
local function convert_to_char_array(n)local p={}for f=1,n:len()do local q=string.sub(n,f,f+1)p[#p+1]=q:byte()end;return p end;
local function __thiscall(func, this) -- bind wrapper for __thiscall functions
	return function(...)
		return func(this, ...)
	end
end

local steam = {}
steam.ctx_match = client.find_signature("client.dll", convert_char_array_to_string({ 255, 21, 204, 204, 204, 204, 185, 204, 204, 204, 204, 232, 204, 204, 204, 204, 106 })) or error("steam.ctx", 3)
steam.ctx = ffi.cast("steam_ctx_t**", ffi.cast("char*", steam.ctx_match) + 7)[0] or error("steam_ctx not found", 3)
steam.http = ffi.cast("void*", steam.ctx.steam_http) or error("steam_http error", 3)
steam.http_ptr = ffi.cast("void***", steam.http) or error("steam_http_ptr error", 3)
steam.http_vtable = steam.http_ptr[0] or error("steam_http_ptr was null", 3)

local createHTTPRequest_native = __thiscall(ffi.cast(ffi.typeof("uint32_t(__thiscall*)(void*, uint32_t, const char*)"), steam.http_vtable[0]), steam.http)
local sendHTTPRequest_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, uint64_t)"), steam.http_vtable[5]), steam.http)
local getHTTPResponseHeaderSize_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, const char*, uint32_t*)"), steam.http_vtable[9]), steam.http)
local getHTTPResponseHeaderValue_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, const char*, char*, uint32_t)"), steam.http_vtable[10]), steam.http)
local getHTTPResponseBodySize_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, uint32_t*)"), steam.http_vtable[11]), steam.http)
local getHTTPBodyData_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, char*, uint32_t)"), steam.http_vtable[12]), steam.http)
local setHTTPHeaderValue_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, const char*, const char*)"), steam.http_vtable[3]), steam.http)
local setHTTPRequestParam_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, const char*, const char*)"), steam.http_vtable[4]), steam.http)
local setHTTPUserAgent_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t, const char*)"), steam.http_vtable[21]), steam.http)
local setHTTPRequestRaw_native = __thiscall(ffi.cast("bool(__thiscall*)(void*, uint32_t, const char*, const char*, uint32_t)", steam.http_vtable[16]), steam.http)
local releaseHTTPRequest_native = __thiscall(ffi.cast(ffi.typeof("bool(__thiscall*)(void*, uint32_t)"), steam.http_vtable[14]), steam.http)

local request_c = {}
local request_mt = {__index = request_c}

local settings = {
	log_enabled = false,
	increment_mode = 'tick', -- modes: tick, time
	proc_interval = 0.5
}

local time = function()
	return math.floor(client.timestamp()/1000)
end

function request_c.new(handle, url, callback)
	local properties = {
		handle = handle,
		url = url,
		callback = callback,
		returned = nil,
		status = 'running',
		ticks = 0,
		old_time = nil
	}
	local request = setmetatable(properties, request_mt)
	return request
end

local response_c = {}
local response_mt = {__index = response_c}
function response_c.new(state, body, headers)
	local properties = {
		state = state,
		body = body,
		header = {
			content_type = headers.content_type
		}
	}
	local response = setmetatable(properties, response_mt)
	return response
end

function response_c:success()
	return self.state == 0
end

local http_c = {
	failure = {
	   [-1] = "No failure",
		[0] = "Steam gone",
		[1] = "Network failure",
		[2] = "Invalid handle",
		[3] = "Mismatched callback"
	},
	status = {
		[100]="Continue",[101]="Switching Protocols",[102]="Processing",[200]="OK",[201]="Created",[202]="Accepted",[203]="Non-Authoritative Information",[204]="No Content",[205]="Reset Content",[206]="Partial Content",[207]="Multi-Status",
		[208]="Already Reported",[250]="Low on Storage Space",[226]="IM Used",[300]="Multiple Choices",[301]="Moved Permanently",[302]="Found",[303]="See Other",[304]="Not Modified",[305]="Use Proxy",[306]="Switch Proxy",
		[307]="Temporary Redirect",[308]="Permanent Redirect",[400]="Bad Request",[401]="Unauthorized",[402]="Payment Required",[403]="Forbidden",[404]="Not Found",[405]="Method Not Allowed",[406]="Not Acceptable",[407]="Proxy Authentication Required",
		[408]="Request Timeout",[409]="Conflict",[410]="Gone",[411]="Length Required",[412]="Precondition Failed",[413]="Request Entity Too Large",[414]="Request-URI Too Long",[415]="Unsupported Media Type",[416]="Requested Range Not Satisfiable",
		[417]="Expectation Failed",[418]="I'm a teapot",[420]="Enhance Your Calm",[422]="Unprocessable Entity",[423]="Locked",[424]="Failed Dependency",[424]="Method Failure",[425]="Unordered Collection",[426]="Upgrade Required",[428]="Precondition Required",
		[429]="Too Many Requests",[431]="Request Header Fields Too Large",[444]="No Response",[449]="Retry With",[450]="Blocked by Windows Parental Controls",[451]="Parameter Not Understood",[451]="Unavailable For Legal Reasons",[451]="Redirect",
		[452]="Conference Not Found",[453]="Not Enough Bandwidth",[454]="Session Not Found",[455]="Method Not Valid in This State",[456]="Header Field Not Valid for Resource",[457]="Invalid Range",[458]="Parameter Is Read-Only",[459]="Aggregate Operation Not Allowed",
		[460]="Only Aggregate Operation Allowed",[461]="Unsupported Transport",[462]="Destination Unreachable",[494]="Request Header Too Large",[495]="Cert Error",[496]="No Cert",[497]="HTTP to HTTPS",[499]="Client Closed Request",[500]="Internal Server Error",
		[501]="Not Implemented",[502]="Bad Gateway",[503]="Service Unavailable",[504]="Gateway Timeout",[505]="HTTP Version Not Supported",[506]="Variant Also Negotiates",[507]="Insufficient Storage",[508]="Loop Detected",[509]="Bandwidth Limit Exceeded",
		[510]="Not Extended",[511]="Network Authentication Required",[551]="Option not supported",[598]="Network read timeout error",[599]="Network connect timeout error"
	},
	state = {
		ok = 0,
		no_response = 1,
		timed_out = 2,
		unknown = 3
	}
}

local http_mt = {__index = http_c}

function http_c.new(options)
	settings.proc_interval = 0
	local options = options or {}
	local properties = {
		requests = {},
		response = nil,
		func_ret = nil,
		task_interval = settings.proc_interval,--options.task_interval or 0.5,
		timeout = options.timeout or 25,
		enable_debug = options.enable_debug or false
	}
	local http = setmetatable(properties, http_mt)
	http:_process_tasks()
	return http, properties
end

function http_c:get(url, callback)
	local handle = createHTTPRequest_native(1, url)

	if (sendHTTPRequest_native(handle, 0) == false) then
		return
	end

	local request = request_c.new(handle, url, callback)
	table.insert(self.requests, request)
	self:_debug("[HTTP] New GET request to: %s", url)
	return request
end

function http_c:post(url, params, callback)
	local handle = createHTTPRequest_native(3, url)

	for k, v in pairs(params) do
		v = type(v) == 'table' and json.stringify(v) or tostring(v)
		setHTTPRequestParam_native(handle, k, v)
	end

	if sendHTTPRequest_native(handle, 0) == false then
		return
	end

	local request = request_c.new(handle, url, callback)
	table.insert(self.requests, request)
	self:_debug("[HTTP] New POST request to: %s\nparameters:%s", url, json.stringify(params))
	return request
end

local last_task, repeated = 0
function http_c:_process_tasks()
	for request_id, request in ipairs(self.requests) do
		local body_size_ptr = ffi.new("uint32_t[1]")
		local request_url = request.url
		repeated = last_task == request_url and repeated + 1 or 0
		local max_val = (((repeated-0.5)/100))
		settings.proc_interval = repeated > 50 and max_val or 0
		last_task = request_url

		if repeated < 1 then self:_debug("[HTTP] Processing request #%s status: %s %s", request_id, request.status, request_url) end
		if (getHTTPResponseBodySize_native(request.handle, body_size_ptr) == true) then
			local body_size = body_size_ptr[0]
			if body_size > 0 then
				local body = ffi.new("char[?]", body_size)
				if getHTTPBodyData_native(request.handle, body, body_size) then
					self:_debug("[HTTP] Request #%s finished. Invoking callback.", request_id)
					table.remove(self.requests, request_id)
					releaseHTTPRequest_native(request.handle)
					local new_response = response_c.new(
						http_c.state.ok,
						ffi.string(body, body_size),
						{
							content_type = http_c._get_header(request, "Content-Type")
						}
					)
					self.func_ret = request.callback(true, new_response)
					request.returned = self.func_ret
					request.status = 'success'
					self.response = new_response
					break
				end
			else
				table.remove(self.requests, request_id)
				releaseHTTPRequest_native(request.handle)
				local new_response = response_c.new(
					http_c.state.no_response,
					nil,
					{}
				)
				self:_debug("[HTTP] Request %s recived no response.", request.url)
				self.func_ret = request.callback(false, new_response)
				request.status = 'waiting'
				settings.proc_interval = 0
				
			end
		end
		
		self.old_time = self.old_time or time()
		local tick_incremented = settings.increment_mode == 'tick' and request.ticks + 1 or time() - self.old_time
		if tick_incremented >= self.timeout then
			table.remove(self.requests, request_id)
			releaseHTTPRequest_native(request.handle)
			local new_response = response_c.new(
				http_c.state.timed_out, nil, {}
			)
			self:_debug("[HTTP] Request #%s timeout.", request_id)
			self.func_ret = request.callback(true, new_response)
			request.status = 'timeout'
			self.response = new_response
			break
		else
			request.ticks = tick_incremented
		end
	end
	
	client.delay_call(settings.proc_interval, http_c._bind(self, '_process_tasks'))
end

function http_c:_debug(...)
	if self.enable_debug or settings.log_enabled then
		print(string.format(...))
	end
end

function http_c._get_header(request, header)
	local header_size_ptr = ffi.new("uint32_t[1]")
	if (getHTTPResponseHeaderSize_native(request.handle, header, header_size_ptr)) then	
		local header_size = header_size_ptr[0]
		local header_buffer = ffi.new("char[?]", header_size)
		if (getHTTPResponseHeaderValue_native(request.handle, header, header_buffer, header_size)) then
			return ffi.string(header_buffer, header_size)
		end
	end
	return nil
end

function http_c._bind(t, k)
	return function(...) return t[k](t, ...) end
end

function http_c.set_process_interval(val)
	settings.proc_interval = val
end

function http_c.set_increment_mode(val)
	settings.increment_mode = val
end

function http_c.log_enabled(val)
	settings.log_enabled = val
end

function http_c.set_max_logs(val)
	settings.log_max = val
end

function http_c.get_logs()
	return logs
end

function http_c.reset()
	http_c = http_c.backup
	http_mt = {__index = http_c}
end

http_c.backup = {}--proxify(http_c)

return http_c
end)()

-- Setup http library
local http = {
	log_enabled = http_c.log_enabled,
	get_logs = http_c.get_logs,
	set_max_logs = http_c.set_max_logs,
	set_increment_mode = http_c.set_increment_mode,
	set_process_interval = http_c.set_process_interval
}

function http.get(url, callback, options)
	local options = options or {}
	
	return http_c.new(
		{
			task_interval = options.task_interval,
			enable_debug = options.enable_debug or options.debug,
			timeout = options.timeout
		}
	):get(url, callback)
end

function http.post(url, properties, callback, options)
	local options = options or {}
	local params = properties.params or {}

	local returns = http_c.new(
		{
			task_interval = options.task_interval or 0.1,
			enable_debug = options.enable_debug or false,
			timeout = options.timeout or 10
		}
	):post(url, params, callback)

	return returns
end
http.set_increment_mode('time')
http.set_process_interval(0.5)

local current_song
local function get_song_info(body)
	http.get('https://mariolua.at/test/radio.php', function(success, response)
		current_song = '    '..(response.body or current_song)..'    '
	end)

	client.delay_call(10, get_song_info, current_song)
end
get_song_info()

local function uuid(len)
    local res, len = "", len or 24
    for i=1, len do
        res = res .. string.char(client.random_int(97, 122))
    end
    return res
end

local draggable = (function()
    local watermark = {};
    watermark.__index = watermark;
    function watermark.new(name, x, y, w, h)
        local key = 'mewtoo_radio_' .. name;
        local default = database.read(key) or { x = x, y = y, w = w, h = h };
        local ret = setmetatable(default, watermark);
        client.set_event_callback('shutdown', function()
            database.write(key, { x = ret.x, y = ret.y, w = ret.w, h = ret.h })
        end);
        return ret;
    end

    function watermark.get(self)
        return self.x, self.y, self.w, self.h;
    end

    function watermark.drag(self, listener)
        self.is_menu_open = ui.is_menu_open()
        self.drag_x, self.drag_y = self.mouse_x, self.mouse_y;
        self.mouse_x, self.mouse_y = ui.mouse_position()
        self.was_pressed = self.is_pressed;
        self.is_pressed = client.key_state(0x01);
        self.screenW, self.screenH = client.screen_size();

        if (ui.is_menu_open()) then
            if (not self.was_pressed or self.is_dragging) and
                    self.is_pressed and
                    (self.drag_x and self.drag_x > self.x and self.drag_y > self.y and self.drag_x < (self.x + self.w - 25) and
                            self.drag_y < self.y + self.h - 25) then

                self.is_dragging, self.x, self.y = true,
                math.max(0, math.min(self.screenW - self.w, self.x + self.mouse_x - self.drag_x)),
                math.max(0, math.min(self.screenH - self.h, self.y + self.mouse_y - self.drag_y));
            elseif (not self.is_pressed) then
                self.is_dragging = false;
            end
        end
    end

    function watermark.resize(self)
        if (ui.is_menu_open()) then
            if (not self.was_pressed or self.is_resizing) and
                    self.is_pressed and
                    (self.drag_x and self.drag_x > self.x + self.w - 5 and
                            self.drag_y > self.y + self.h - 5 and
                            self.drag_x < self.x + self.w + 25 and
                            self.drag_y < self.y + self.h + 25) then


                self.is_resizing, self.w, self.h = true,
                math.max(50, math.min(self.screenW, self.w + self.mouse_x - self.drag_x)),
                math.max(50, math.min(self.screenH, self.h + self.mouse_y - self.drag_y));
            elseif (not self.is_pressed) then
                self.is_resizing = false;
            end
        end
    end

    setmetatable(watermark, {
        __call = function(_, ...)
            return watermark.new(...)
        end
    });
    return watermark;
end)();

---@region panorama API Definition
local o_panorama = panorama;
local panorama = o_panorama.open();
local CompetitiveMatchAPI, GameStateAPI, MyPersonaAPI, FriendsListAPI, PartyBrowserAPI, LobbyAPI, PartyListAPI = panorama.CompetitiveMatchAPI, panorama.GameStateAPI, panorama.MyPersonaAPI, panorama.FriendsListAPI, panorama.PartyBrowserAPI, panorama.LobbyAPI, panorama.PartyListAPI
---@regionend panorama API Definition

local view_player = draggable("video_player", 0, 0, 309, 96);

local html_base_c = o_panorama.loadstring([[
	var _Create = function(layout, panelName, loadingJSArg) {
		var panel
		var html
		var parent = $.GetContextPanel()
		panel = $.CreatePanel("Panel", parent, panelName)
		if(!panel)
			return
		if(!panel.BLoadLayoutFromString(layout, false, false))
			return
		html = panel.FindChildTraverse("CustomHTML")
		html.msg = "loading"
		html.SetURL("]]..url..[[");
		html.finishRequest = false
		html.loadingJSArg = function(){
			html.RunJavascript("var player = document.querySelector('video');" + loadingJSArg);
		}
		$.RegisterEventHandler("HTMLJSAlert", html, function(id, alert_text){
			if(id == html.id) {
				html.msg = alert_text
			}
		});
		$.RegisterEventHandler("HTMLFinishRequest", html, function(id, alert_text){
			if(id == html.id) {
				html.finishRequest = true
				html.loadingJSArg()
			}
		});
		return {
			panel: panel,
			html: html,
		}
	}
	var _Destroy = function(panel) {
		if(panel != null) {
			panel.RemoveAndDeleteChildren()
			panel.DeleteAsync(0.0)
			panel = null
		}
	}
	var _ChromeFuncs = function(chromescript, html) {
		if(html != null) {
			html.RunJavascript("var player = document.querySelector('video');" + chromescript);
		}
	}
	
	return {
		create: _Create,
		destroy: _Destroy,
		chromeFuncs: _ChromeFuncs,
	}
]])()
local layout = [[
<root>
	<styles>
		<include src="file://{resources}/styles/csgostyles.css" />
	</styles>
    <Panel>
    <HTML class="hide" id="CustomHTML" acceptsinput="false" acceptsfocus="false" focusonhover="false" mousetracking="false" url="]]..url..[[" visible="false" />
    </Panel>
</root>
]]
local function getLayoutMovie(src)
	return [[
		<root>
			<styles>
				<include src="file://{resources}/styles/csgostyles.css" />
			</styles>
			<Panel>
			<HTML class="hide" id="CustomHTML" src="]]..src..[[" controls="none" visible="false" ></HTML>
			</Panel>
		</root>]]
end
local movie_c = {
	panel_name = "",
	src = "",
	instance = nil,
	panel = nil
}
movie_c.__index = movie_c
movie_c.new = function(src, panelName)
    local self = {}
	setmetatable(self, movie_c)
	self.panel_name = panelName or uuid()
	self.src = src
	local cre = html_base_c.create(getLayoutMovie(src), self.panel_name)
	self.instance, self.panel = cre.html, cre.panel
    return self
end
movie_c.unload = function (self)
	html_base_c.destroy(self.panel)
end

local html_c = {
	panel_name = "",
	panel_uri = "",
	panel = nil,
	html = nil,
	ready = function(self)
		if not self.loaded and not self.html then return false end
		return self.html.finishRequest
	end,
	state = function(self)
		if not self.loaded and not self.html then return false end
		return self.html.state
	end,

	loaded = false,
}
html_c.__index = html_c
html_c.new = function(panelURI, panelName, loadingJSArg)
    local self = {}
	setmetatable(self, html_c)
	self.panel_name = panelName or uuid()
	self.panel_uri = panelURI or "about:blank"
	local player = html_base_c.create(layout, self.panel_name, loadingJSArg)
	self.panel = player.panel
	self.html = player.html
    return self
end
html_c.load = function(self)
	if not self.html then return false end
	self.html.SetURL(self.panel_uri)
	self.loaded = true
	return true
end
html_c.state = function (self)
	return self.html.msg
end
html_c.executeJS = function(self, js_raw_arg)
	if self:ready() then
		html_base_c.chromeFuncs(js_raw_arg, self.html)
		return true
	else
		return false
	end
end
html_c.unload = function(self, js_raw_arg)
	html_base_c.chromeFuncs(js_raw_arg, self.html)
	html_base_c.destroy(self.panel)
end
local snd_alert = [[
	player.pause();
	player.autoplay = false;
	player.addEventListener("canplay", function() { alert("loaded"+"|"+player.duration); }, true);
	player.addEventListener("playing", function() { alert("playing"); }, true);
	player.addEventListener("pause", function() { alert("paused"); }, true);
	player.addEventListener("ended", function() { alert("ended"); }, true);
	player.addEventListener("abort", function() { alert("abort"); }, true);
	player.addEventListener("timeupdate", function() { alert("playing"+"|"+player.currentTime); }, true);
]]
local snd_c = {
	sound_uri = "",
	instance = nil
}
snd_c.__index = snd_c
snd_c.new = function(soundURI, ifLoad)
    local self = {}
	setmetatable(self, snd_c)
	self.sound_uri = soundURI or ""
	if ifLoad == true then
		self:load()
	end
    return self
end
snd_c.load = function(self)
	self.instance = html_c.new(self.sound_uri, nil, snd_alert)
	return self.instance:load()
end
snd_c.switch = function(self, override_uri)
	override_uri = override_uri or self.sound_uri
	return self.instance:executeJS("alert(\"switching\");player.autoplay = false;player.src = \""..override_uri.."\"")
end
snd_c.play = function(self)
	return self.instance:executeJS("player.load();player.play();player.autoplay = false;")
end
snd_c.pause = function(self)
	return self.instance:executeJS("player.pause();player.autoplay = false;")--self.instance:executeJS("player.load();player.pause();player.autoplay = false;")
end
snd_c.volume = function(self, vol)
	vol = vol/100
	return self.instance:executeJS("player.volume = "..vol)
end
--[[snd_c.speed = function(self, spd)
	spd = sps or 1.0
	return self.instance:executeJS("player.playbackRate = "..spd)
end ]]
snd_c.progress = function(self, cur)
	return self.instance:executeJS("player.currentTime = "..cur)
end
snd_c.unload = function(self)
	self.instance:unload("player.pause();alert(\"unloaded\")")
end
snd_c.reload = function(self)
	return self.instance:executeJS("player.load();player.pause();")
end
snd_c.alert = function(self, alert)
	return self.instance:executeJS("alert(\""..alert.."\");")
end
snd_c.state = function(self)
	return self.instance:state()
end

local soundLib = {
	newSound = snd_c.new,
	newHTML = html_c.new,
	newMovie = movie_c.new
}
local loaded_c = false
local sound_volume = 15
local function play(sound, callback)
	if sound then
		if not loaded_c then
			sound:volume(sound_volume)
			loaded_c = true
		end
		if sound.instance:ready() then
			return callback(sound)
		end
	end
	client.delay_call(.5, play, sound, callback)
end
local loaded_c2 = false
local function play2(sound, callback)
	if sound then
		if not loaded_c2 then
			sound:volume(sound_volume)
			loaded_c2 = true
		end
		if sound.instance:ready() then
			return callback(sound)
		end
	end
	client.delay_call(.5, play, sound, callback)
end

local new_sound = soundLib.newSound(url, true)
 
play2(new_sound, function(sound)
	new_sound:volume(sound_volume)
end)


local TextAnimator = {}
TextAnimator.__index = TextAnimator

function TextAnimator.new(text, maxLength)
    local self = setmetatable({}, TextAnimator)
    self.text = text or 'Not A Song Playing'
    self.maxLength = maxLength or #self.text
    self.textStrIdx = 0
    self.textStrLastIdx = 0
    self.animText = self.text

    return self
end

function TextAnimator:update()
    self.textStrIdx = math.floor((globals.curtime() * 70 / 10) % #self.animText + 1)
    
    if self.textStrIdx == self.textStrLastIdx or not self.text then
        return
    end

    local result = ""
    local loopTxt = self.text
    for i = 1, self.textStrIdx do
        loopTxt = loopTxt .. loopTxt:sub(1, 1)
        loopTxt = loopTxt:sub(2, loopTxt:len())
    end
    self.animText = loopTxt:sub(1, self.maxLength)
	
end

function TextAnimator:getAnimatedText()
    return self.animText
end

function TextAnimator:setText(str)
	if self.text == str then
		return
	end
    self.text = str
end

function TextAnimator:setMaxLength(num)
    self.maxLength = num
end

function TextAnimator:destroy()
    self.text = nil
    self.maxLength = nil
    self.textStrIdx = nil
    self.textStrLastIdx = nil
    self.animText = nil
end

-- create animation object
local name_slide_left = TextAnimator.new(current_text, 45)

-- draw mewtwo container with song name text
local function drawContainer(x, y, w, h)
    local animated_text = name_slide_left:getAnimatedText()
    local txt_w, txt_h = renderer.measure_text('A', 'c')
    local sub_length = w / txt_w

    name_slide_left:setMaxLength(sub_length)
    animated_text = name_slide_left:getAnimatedText()
    renderer.texture(logo, x, y, w, h, 255, 255, 255, 255, 'f')
    renderer.text(x + w/2, y + h/2+(((h/100)*96)/3), 255, 255, 255, 255, 'c', nil, animated_text)
end

ui.new_label('Visuals', 'Other ESP', '\n') -- creates empty space

-- create ui objects
ui.new_label('Visuals', 'Other ESP', '                    \abbc4fbff[ME\abbc4fbffWT\ac9bdf9ffWO \ad6b6f7ffRA\ae4aff5ffDI\aff96edffO\afea1f1ff]')

local play_button = ui.new_button('Visuals', 'Other ESP', '\a0EECEC55' .. '\226\150\182' .. ' Play', function()end)
local pause_button = ui.new_button('Visuals', 'Other ESP', '\aFF9BFFFF' .. '\226\143\185' .. ' Pause', function()end)
local vol_slider = ui.new_slider('Visuals', 'Other ESP', 'Volume', 0, 100, 15, true, '%')

ui.new_label('Visuals', 'Other ESP', '\n') -- creates empty space

-- set pause button invisible
ui.set_visible(pause_button, false)

-- update dragging and resizing values before a frame gets rendered 
local function on_pre_render()
	name_slide_left:setText(current_song)
	name_slide_left:update()
    view_player:drag()
    view_player:resize()
end

-- render
local function on_paint()
    drawContainer(view_player:get())
end

-- on play button press
local function on_play(obj)
	if new_sound.instance:ready() then
		new_sound:play()

		local snd_vol = ui.get(vol_slider)
		new_sound:volume(snd_vol)
		sound_volume = snd_vol
	
		ui.set_visible(play_button, false)
		ui.set_visible(pause_button, true)
	end

	client.set_event_callback("pre_render", on_pre_render)
	client.set_event_callback("paint_ui", on_paint)
end

-- on pause button press
local function on_pause()
	new_sound:pause()

	ui.set_visible(pause_button, false)
	ui.set_visible(play_button, true)

	client.unset_event_callback("paint_ui", on_paint)
	client.unset_event_callback("pre_render", on_pre_render)
end

-- on volume slider change
local function on_volume_change(obj)
	sound_volume = ui.get(obj)
	new_sound:volume(sound_volume)
end

-- set ui callbacks
ui.set_callback(play_button, on_play)
ui.set_callback(pause_button, on_pause)
ui.set_callback(vol_slider, on_volume_change)

client.set_event_callback('shutdown', function()
	new_sound:unload()
end)

local function hide_menu()

    local main = ui.get(weapon.main_switch)
    local select = ui.get(weapon.weapon_select)

    for i=1, #weapon_name do
        local condition = main and weapon_name[i] == select
        ui.set_visible(weapon.cfg[i].enable,condition)
        ui.set_visible(weapon.cfg[i].extra_feature,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].target_selection,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitbox_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitbox_mode,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitbox') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].target_hitbox,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].dt_target_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitbox') and includes(ui.get(weapon.cfg[i].hitbox_mode),'Double-tap') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].air_target_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitbox') and includes(ui.get(weapon.cfg[i].hitbox_mode),'In-air')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].ovr_target_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitbox') and includes(ui.get(weapon.cfg[i].hitbox_mode),'Override 1')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Hitbox'))
        ui.set_visible(weapon.cfg[i].ovr_target_hitbox_2,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitbox') and includes(ui.get(weapon.cfg[i].hitbox_mode),'Override 2')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Hitbox'))
        ui.set_visible(weapon.cfg[i].multi_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].multi_mode,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].multi_complex,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') )
        if includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') then
            ui.set_visible(weapon.cfg[i].target_multi,condition and ui.get(weapon.cfg[i].enable) and (ui.get(weapon.cfg[i].multi_complex) == 0))
            ui.set_visible(weapon.cfg[i].multipoint_scale,condition and ui.get(weapon.cfg[i].enable) and (ui.get(weapon.cfg[i].multi_complex) == 0))
        else
            ui.set_visible(weapon.cfg[i].target_multi,condition and ui.get(weapon.cfg[i].enable))
            ui.set_visible(weapon.cfg[i].multipoint_scale,condition and ui.get(weapon.cfg[i].enable))
        end
        ui.set_visible(weapon.cfg[i].multi_hitbox_v,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].multi_complex) == 1  and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point'))
        ui.set_visible(weapon.cfg[i].multipoint_scale_v,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].multi_complex) == 1 and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point'))
        ui.set_visible(weapon.cfg[i].multi_hitbox_a,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].multi_complex) == 1 and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point'))
        ui.set_visible(weapon.cfg[i].multipoint_scale_a,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].multi_complex) == 1 and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point'))

        ui.set_visible(weapon.cfg[i].dt_multi_complex,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].dt_multi_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].dt_multi_complex) == 0)
        ui.set_visible(weapon.cfg[i].dt_multipoint_scale,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].dt_multi_complex) == 0)
        ui.set_visible(weapon.cfg[i].dt_multi_hitbox_v,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].dt_multi_complex) == 1)
        ui.set_visible(weapon.cfg[i].dt_multipoint_scale_v,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].dt_multi_complex) == 1)
        ui.set_visible(weapon.cfg[i].dt_multi_hitbox_a,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].dt_multi_complex) == 1)
        ui.set_visible(weapon.cfg[i].dt_multipoint_scale_a,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].dt_multi_complex) == 1)
        ui.set_visible(weapon.cfg[i].ping_avilble,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Ping-spike')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].ping_multi_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Ping-spike')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].ping_multipoint_scale,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Ping-spike')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].air_multi_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'In-air')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].air_multipoint_scale,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'In-air')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].ovr_multi_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Override')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Multipoint'))
        ui.set_visible(weapon.cfg[i].ovr_multipoint_scale,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Multi-Point') and includes(ui.get(weapon.cfg[i].multi_mode),'Override')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Multipoint'))
        ui.set_visible(weapon.cfg[i].unsafe_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].unsafe_mode,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Unsafe hitbox') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].unsafe_hitbox,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].dt_unsafe_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Unsafe hitbox') and includes(ui.get(weapon.cfg[i].unsafe_mode),'Double-tap') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].air_unsafe_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Unsafe hitbox') and includes(ui.get(weapon.cfg[i].unsafe_mode),'In-air')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].ovr_unsafe_hitbox,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Unsafe hitbox') and includes(ui.get(weapon.cfg[i].unsafe_mode),'Override')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Unsafe hitbox'))
        ui.set_visible(weapon.cfg[i].general_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].safepoint,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].automatic_fire,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].automatic_penetration,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].automatic_scope_e,condition and ui.get(weapon.cfg[i].enable) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].automatic_scope,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].automatic_scope_e) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].autoscope_therehold,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].automatic_scope),'In distance') and ui.get(weapon.cfg[i].automatic_scope_e) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].silent_aim,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].max,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].fps_boost,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_mode,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_ovr,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'Override 1') and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Hit chance'))
        ui.set_visible(weapon.cfg[i].hitchance_air,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'In-air')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_usc,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'Unscoped')  and ui.get(weapon.cfg[i].enable) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].hitchance_cro,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'Crouching')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_dt,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_fd,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'Fake duck')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_os,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'On-shot')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].hitchance_ovr_2,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Hitchance') and includes(ui.get(weapon.cfg[i].hitchance_mode),'Override 2')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Hit chance'))
        ui.set_visible(weapon.cfg[i].damage_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].damage_mode,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and ui.get(weapon.cfg[i].enable))
        if includes(ui.get(weapon.cfg[i].extra_feature),'Damage') then
            ui.set_visible(weapon.cfg[i].damage,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].damage_complex) == 'Original')
        else
            ui.set_visible(weapon.cfg[i].damage,condition and ui.get(weapon.cfg[i].enable))
        end
        ui.set_visible(weapon.cfg[i].damage_complex,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].extra_feature),'Damage'))
        ui.set_visible(weapon.cfg[i].damage_cro,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and ui.get(weapon.cfg[i].damage_complex) == 'Visible/autowall' and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].damage_aut,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and ui.get(weapon.cfg[i].damage_complex) == 'Visible/autowall' and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].damage_ovr,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'Override 1') and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Min DMG'))
        ui.set_visible(weapon.cfg[i].damage_air,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'In-air')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].damage_usc,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'Unscoped')  and ui.get(weapon.cfg[i].enable) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].damage_dt,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].damage_complex_dt) == 'Original')
        ui.set_visible(weapon.cfg[i].damage_complex_dt,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'Double-tap'))
        ui.set_visible(weapon.cfg[i].damage_cro_dt,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and ui.get(weapon.cfg[i].damage_complex_dt) == 'Visible/autowall' and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].damage_mode),'Double-tap'))
        ui.set_visible(weapon.cfg[i].damage_aut_dt,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and ui.get(weapon.cfg[i].damage_complex_dt) == 'Visible/autowall' and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].damage_mode),'Double-tap'))
        ui.set_visible(weapon.cfg[i].damage_fd,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'Fake duck')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].damage_os,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'On-shot')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].damage_ovr_2,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Damage') and includes(ui.get(weapon.cfg[i].damage_mode),'Override 2')  and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.available),'Min DMG'))
        ui.set_visible(weapon.cfg[i].delay_shot,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].accuarcy_boost,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].c,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop_mode,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop_option,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop_dt,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and includes(ui.get(weapon.cfg[i].stop_mode),'Double-tap') and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop_option_dt,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and includes(ui.get(weapon.cfg[i].stop_mode),'Double-tap')  and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].stop_unscoped,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and includes(ui.get(weapon.cfg[i].stop_mode),'Unscoped')  and ui.get(weapon.cfg[i].enable) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].stop_option_unscoped,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and includes(ui.get(weapon.cfg[i].stop_mode),'Unscoped')  and ui.get(weapon.cfg[i].enable) and includes(scoped_wpn_idx,i))
        ui.set_visible(weapon.cfg[i].stop_ovr,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and includes(ui.get(weapon.cfg[i].stop_mode),'Override')  and ui.get(weapon.cfg[i].enable)  and includes(ui.get(weapon.available),'Quick stop'))
        ui.set_visible(weapon.cfg[i].stop_option_ovr,condition and includes(ui.get(weapon.cfg[i].extra_feature),'Quick stop') and includes(ui.get(weapon.cfg[i].stop_mode),'Override')  and ui.get(weapon.cfg[i].enable)  and includes(ui.get(weapon.available),'Quick stop'))
        ui.set_visible(weapon.cfg[i].ext_text,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].fp,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.allow_fake_ping))
        ui.set_visible(weapon.cfg[i].preferbm,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].prefer_baim_disablers,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].preferbm))
        ui.set_visible(weapon.cfg[i].lethal,condition and ui.get(weapon.cfg[i].enable) and ui.get(weapon.cfg[i].preferbm))
        ui.set_visible(weapon.cfg[i].dt,condition and ui.get(weapon.cfg[i].enable))
        ui.set_visible(weapon.cfg[i].doubletap_hc,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].dt),'Doubletap hitchance'))
        ui.set_visible(weapon.cfg[i].doubletap_stop,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].dt),'Doubletap quick stop'))
        ui.set_visible(weapon.cfg[i].doubletap_fl,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].dt),'Doubletap fakelag'))
        ui.set_visible(weapon.cfg[i].doubletap_mode,condition and ui.get(weapon.cfg[i].enable) and includes(ui.get(weapon.cfg[i].dt),'Doubletap mode'))
        if includes(ui.get(weapon.cfg[i].delay_shot),'Always on') and not includes(ui.get(weapon.available),'Delay shot') then
            ui.set(weapon.cfg[i].delay_shot,{'Always on'})
        elseif not includes(ui.get(weapon.cfg[i].delay_shot),'Always on') and not includes(ui.get(weapon.available),'Delay shot') then
            ui.set(weapon.cfg[i].delay_shot,{})
        end

    end

    ui.set_visible(weapon.weapon_select,main)
    ui.set_visible(weapon.key_text,main)
    ui.set_visible(weapon.lua_label,main)
    ui.set_visible(weapon.lua_clr,main)
    ui.set_visible(weapon.high_pro,main)
    ui.set_visible(weapon.available,main)
    ui.set_visible(weapon.ovr_dmg,main and includes(ui.get(weapon.available),'Min DMG'))
    ui.set_visible(weapon.ovr_dmg_smart,main and includes(ui.get(weapon.available),'Min DMG'))
    ui.set_visible(weapon.ovr_dmg_2,main and includes(ui.get(weapon.available),'Min DMG'))
    ui.set_visible(weapon.ovr_hc,main and includes(ui.get(weapon.available),'Hit chance'))
    ui.set_visible(weapon.ovr_hc_2,main and includes(ui.get(weapon.available),'Hit chance'))
    ui.set_visible(weapon.ovr_box,main and includes(ui.get(weapon.available),'Hitbox'))
    ui.set_visible(weapon.ovr_box_2,main and includes(ui.get(weapon.available),'Hitbox'))
    ui.set_visible(weapon.ovr_unsafe,main and includes(ui.get(weapon.available),'Unsafe hitbox'))
    ui.set_visible(weapon.ovr_stop,main and  includes(ui.get(weapon.available),'Quick stop'))
    ui.set_visible(weapon.key_text,main)
    ui.set_visible(weapon.key_text_1,main)
    ui.set_visible(weapon.adjust,main)
    ui.set_visible(weapon.ovr_forcehead,main and includes(ui.get(weapon.available),'Hitbox'))
    ui.set_visible(weapon.ovr_delay,main and includes(ui.get(weapon.available),'Delay shot'))
    ui.set_visible(weapon.ovr_multi,main and includes(ui.get(weapon.available),'Multipoint'))

    ui.set_visible(weapon.run_hide,main)

    ui.set_visible(weapon.allow_fake_ping,main)
    ui.set_visible(weapon.fake_ping_key,main and ui.get(weapon.allow_fake_ping))

    ui.set_visible(weapon.cfg[1].enable,false)
    ui.set(weapon.cfg[1].enable,true)


end

hide_menu()

local function menu_adjust()
    for i=1, #weapon_name do
        ui.set_callback(weapon.cfg[i].enable,hide_menu)
        ui.set_callback(weapon.cfg[i].extra_feature,hide_menu)
        ui.set_callback(weapon.cfg[i].target_selection,hide_menu)
        ui.set_callback(weapon.cfg[i].hitbox_text,hide_menu)
        ui.set_callback(weapon.cfg[i].hitbox_mode,hide_menu)
        ui.set_callback(weapon.cfg[i].target_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_target_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].air_target_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].ovr_target_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].ovr_target_hitbox_2,hide_menu)
        ui.set_callback(weapon.cfg[i].multi_text,hide_menu)
        ui.set_callback(weapon.cfg[i].lethal,hide_menu)
        ui.set_callback(weapon.cfg[i].multi_mode,hide_menu)
        ui.set_callback(weapon.cfg[i].multi_complex,hide_menu)
        ui.set_callback(weapon.cfg[i].target_multi,hide_menu)
        ui.set_callback(weapon.cfg[i].multipoint_scale,hide_menu)
        ui.set_callback(weapon.cfg[i].multi_hitbox_v,hide_menu)
        ui.set_callback(weapon.cfg[i].multipoint_scale_v,hide_menu)
        ui.set_callback(weapon.cfg[i].multi_hitbox_a,hide_menu)
        ui.set_callback(weapon.cfg[i].multipoint_scale_a,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multi_complex,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multi_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multipoint_scale,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multi_hitbox_v,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multipoint_scale_v,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multi_hitbox_a,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_multipoint_scale_a,hide_menu)

        ui.set_callback(weapon.cfg[i].ping_avilble,hide_menu)
        ui.set_callback(weapon.cfg[i].ping_multi_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].ping_multipoint_scale,hide_menu)
        ui.set_callback(weapon.cfg[i].air_multi_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].air_multipoint_scale,hide_menu)
        ui.set_callback(weapon.cfg[i].c,hide_menu)
        ui.set_callback(weapon.cfg[i].ovr_multi_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].ovr_multipoint_scale,hide_menu)
        ui.set_callback(weapon.cfg[i].unsafe_text,hide_menu)
        ui.set_callback(weapon.cfg[i].unsafe_mode,hide_menu)
        ui.set_callback(weapon.cfg[i].unsafe_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].dt_unsafe_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].air_unsafe_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].ovr_unsafe_hitbox,hide_menu)
        ui.set_callback(weapon.cfg[i].safepoint,hide_menu)
        ui.set_callback(weapon.cfg[i].automatic_fire,hide_menu)
        ui.set_callback(weapon.cfg[i].automatic_penetration,hide_menu)
        ui.set_callback(weapon.cfg[i].automatic_scope,hide_menu)
        ui.set_callback(weapon.cfg[i].automatic_scope_e,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_complex,hide_menu)
        ui.set_callback(weapon.cfg[i].autoscope_therehold,hide_menu)
        ui.set_callback(weapon.cfg[i].silent_aim,hide_menu)
        ui.set_callback(weapon.cfg[i].max,hide_menu)
        ui.set_callback(weapon.cfg[i].fps_boost,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_text,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_mode,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_ovr,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_air,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_usc,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_cro,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_fd,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_os,hide_menu)
        ui.set_callback(weapon.cfg[i].hitchance_ovr_2,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_text,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_mode,hide_menu)
        ui.set_callback(weapon.cfg[i].damage,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_ovr,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_air,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_usc,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_cro,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_complex_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_cro_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_aut_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_aut,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_fd,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_os,hide_menu)
        ui.set_callback(weapon.cfg[i].damage_ovr_2,hide_menu)
        ui.set_callback(weapon.cfg[i].accuarcy_boost,hide_menu)
        ui.set_callback(weapon.cfg[i].delay_shot,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_text,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_mode,hide_menu)
        ui.set_callback(weapon.cfg[i].stop,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_option,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_option_dt,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_unscoped,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_option_unscoped,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_ovr,hide_menu)
        ui.set_callback(weapon.cfg[i].stop_option_ovr,hide_menu)
        ui.set_callback(weapon.cfg[i].ext_text,hide_menu)
        ui.set_callback(weapon.cfg[i].preferbm,hide_menu)
        ui.set_callback(weapon.cfg[i].prefer_baim_disablers,hide_menu)
        ui.set_callback(weapon.cfg[i].doubletap_hc,hide_menu)
        ui.set_callback(weapon.cfg[i].doubletap_stop,hide_menu)
        ui.set_callback(weapon.cfg[i].dt,hide_menu)
        ui.set_callback(weapon.cfg[i].doubletap_fl,hide_menu)
        ui.set_callback(weapon.cfg[i].doubletap_mode,hide_menu)
    end
    ui.set_callback(weapon.main_switch,hide_menu)
    ui.set_callback(weapon.weapon_select,hide_menu)
    ui.set_callback(weapon.available,hide_menu)
    ui.set_callback(weapon.key_text,hide_menu)
    ui.set_callback(weapon.ovr_dmg,hide_menu)
    ui.set_callback(weapon.ovr_dmg_2,hide_menu)
    ui.set_callback(weapon.ovr_dmg_smart,hide_menu)
    ui.set_callback(weapon.ovr_hc,hide_menu)
    ui.set_callback(weapon.ovr_hc_2,hide_menu)
    ui.set_callback(weapon.ovr_box,hide_menu)
    ui.set_callback(weapon.ovr_box_2,hide_menu)
    ui.set_callback(weapon.ovr_unsafe,hide_menu)
    ui.set_callback(weapon.high_pro,hide_menu)
    ui.set_callback(weapon.ovr_stop,hide_menu)
    ui.set_callback(weapon.key_text,hide_menu)
    ui.set_callback(weapon.key_text_1,hide_menu)
    ui.set_callback(weapon.ovr_forcehead,hide_menu)
    ui.set_callback(weapon.run_hide,hide_menu)
    --ui.set_callback(weapon.adjust,hide_menu)

    ui.set_callback(weapon.allow_fake_ping,hide_menu)
    ui.set_callback(weapon.fake_ping_key,hide_menu)

    ui.set_callback(weapon.lua_label,hide_menu)
    ui.set_callback(weapon.lua_clr,hide_menu)
    
end


menu_adjust()

local function paint()

    local local_player = entity.get_local_player()
    if local_player == nil then return end
    if entity.is_alive(local_player) == false then return end
    invisible()
    hide_skeet()
    weapon:main_funcs()
    indicator()
    
end

client.set_event_callback('paint', paint)
print(name, " has been loaded!")
end
local obex_tbl = obex_tbl or { ["count"] = client.random_int(1,100) }
local find_window_rand_num = find_window_rand_num or client.random_int(1,100)
local unix = unix or client.random_int(1,100)
local ffi_random = ffi_random or client.random_int
local secret = unix + (ffi_random(1, 10000) + obex_tbl.count) + find_window_rand_num
local function convert(tbl)
	local converted = {}
	for i in next, tbl do
		converted[#converted+1] = i
	end
	return converted
end
reached = true
for i, v in next, automatic do if v then scripts[i](i, secret) end end
local script = ui.new_combobox("config", "presets", "lynx", convert(scripts))
local loadscript = ui.new_button("config", "presets", "load", function()
	local current = ui.get(script)
	scripts[current](current, secret)
end)
if remove_obex_print then return end