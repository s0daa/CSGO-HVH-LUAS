-- only retards change this links
print('https://discord.gg/b37eKFbkPE <- scriptleaks new server')
-- https://discord.gg/b37eKFbkPE <- scriptleaks new server
local obex_data = obex_fetch and obex_fetch() or {username = 'developer', build = 'private'}

local antiaim_funcs = require 'gamesense/antiaim_funcs'
local csgo_weapons = require 'gamesense/csgo_weapons'
local engineclient = require 'gamesense/engineclient'
local clipboard = require 'gamesense/clipboard'
local base64 = require 'gamesense/base64'
local vector = require 'vector'
local ffi = require 'ffi'

ffi.cdef[[typedef void (__thiscall* EnableInput)(void*, bool); typedef void (__thiscall* ResetInputState)(void*);]]

local inputSystem = ffi.cast('void***', client.create_interface('inputsystem.dll', 'InputSystemVersion001'))
local enableInput = ffi.cast('EnableInput', inputSystem[0][11])
local resetInputState = ffi.cast('ResetInputState', inputSystem[0][39])

local variables = {
    panorama = panorama.open(),
    conditionticks = 0,
    conditiontable = {},
    loadedModules = {},
    gamerules = ffi.cast('intptr_t**', ffi.cast('intptr_t', client.find_signature('client.dll', '\x83\x3D\xCC\xCC\xCC\xCC\xCC\x74\x2A\xA1')) + 2)[0],
    screen = vector(client.screen_size()),
    tab_names = {'Resolver', 'Anti aim', 'Visuals', 'Misc'},
    active_tab = 1,
    click = globals.realtime(),
    pattern = table.concat{'\x14\x14\x14\xFF', '\x14\x14\x14\xFF', '\x00\x00\x00\x00', '\x14\x14\x14\xFF', '\x00\x00\x00\x00', '\x14\x14\x14\xFF', '\x00\x00\x00\x00', '\x14\x14\x14\xFF', '\x00\x00\x00\x00', '\x14\x14\x14\xFF', '\x14\x14\x14\xFF', '\x14\x14\x14\xFF', '\x00\x00\x00\x00', '\x14\x14\x14\xFF', '\x00\x00\x00\x00', '\x14\x14\x14\xFF'},
    playerlist = {},
    clantagprev,
    rollvalue = 0,
    rollpercentage = 0,
    antiaimpercentage = 0,
}

local requires = {
    ['antiaim_funcs'] = 'https://gamesense.pub/forums/viewtopic.php?id=29665',
    ['csgo_weapons'] = 'https://gamesense.pub/forums/viewtopic.php?id=18807',
    ['engineclient'] = 'https://gamesense.pub/forums/viewtopic.php?id=42362',
    ['clipboard'] = 'https://gamesense.pub/forums/viewtopic.php?id=28678',
    ['base64'] = 'https://gamesense.pub/forums/viewtopic.php?id=21619',
}

for name, url in pairs(requires) do
    if not pcall(require, ('gamesense/%s'):format(name)) then
        panorama.SteamOverlayAPI.OpenExternalBrowserURL(url)
    end
end

local references = {
    rageenabled = {ui.reference('Rage', 'Aimbot', 'Enabled')},
    minimumdamage = ui.reference('Rage', 'Aimbot', 'Minimum damage'),
    minimumdamageoverride = {ui.reference('Rage', 'Aimbot', 'Minimum damage override')},
    forcesafepoint = ui.reference('Rage', 'Aimbot', 'Force safe point'),
    forcebodyaim = ui.reference('Rage', 'Aimbot', 'Force body aim'),
    automaticfire = ui.reference('Rage', 'Other', 'Automatic fire'),
    automaticpenetration = ui.reference('Rage', 'Other', 'Automatic penetration'),
    quickpeekassist = {ui.reference('Rage', 'Other', 'Quick peek assist')},
    duckpeekassist = ui.reference('Rage', 'Other', 'Duck peek assist'),
    maximumfov = ui.reference('Rage', 'Other', 'Maximum FOV'),
    antiaimenabled = ui.reference('AA', 'Anti-aimbot angles', 'Enabled'),
    yaw = {ui.reference('AA', 'Anti-aimbot angles', 'Yaw')},
    bodyyaw = {ui.reference('AA', 'Anti-aimbot angles', 'Body yaw')},
    fakelaglimit = ui.reference('AA', 'Fake lag', 'Limit'),
    slowmotion = {ui.reference('AA', 'Other', 'Slow motion')},
    clantagspammer = ui.reference('Misc', 'Miscellaneous', 'Clan tag spammer'),
    infiniteduck = ui.reference('Misc', 'Movement', 'Infinite duck'),
    menukey = ui.reference('MISC', 'Settings', 'Menu key'),
    dpi = ui.reference('MISC', 'Settings', 'DPI scale'),
    antiuntrusted = ui.reference('Misc', 'Settings', 'Anti-untrusted'),
    sv_maxusrcmdprocessticks = ui.reference('MISC', 'Settings', 'sv_maxusrcmdprocessticks2'),
}

local script = {
    main = {
        menusex = ui.new_checkbox('CONFIG', 'Presets', 'Menu \af786f4FFsex'),
    },

    resolver = {
        resolver = ui.new_checkbox('CONFIG', 'Presets', 'Resolver'),
        resolverhotkey = ui.new_hotkey('CONFIG', 'Presets', 'Resolver hotkey', true),
        targethitboxbruteforce = ui.new_multiselect('CONFIG', 'Presets', 'Target hitbox bruteforce', {'Head', 'Chest', 'Stomach'}),
        offset = ui.new_slider('CONFIG', 'Presets', 'First offset', -90, 90, -75, '°'),
        dynamicinverter = ui.new_checkbox('CONFIG', 'Presets', 'Dynamic inverter'),
        resolveinenemyconditon = ui.new_multiselect('CONFIG', 'Presets', 'Resolve in enemy condition', {'Crouch', 'Stand', 'Move', 'In air'}),
    },

    antiaim = {
        antiaimenabled = ui.new_checkbox('CONFIG', 'Presets', 'Enabled'),
        antiaimenabledhotkey = ui.new_hotkey('CONFIG', 'Presets', 'Enable hotkey', true),
        antiaimcondition = ui.new_combobox('CONFIG', 'Presets', 'Anti aim condition', 'Crouch', 'Stand', 'Move', 'Slow motion', 'In air'),
    },

    visuals = {
        watermark = ui.new_checkbox('CONFIG', 'Presets', 'Watermark'),
        watermarkcolorpicker = ui.new_color_picker('CONFIG', 'Presets', 'Watermark color picker', 247, 134, 244, 255),
        antiaimdirection = ui.new_checkbox('CONFIG', 'Presets', 'Anti aim direction'),
        antiaimdirectioncolorpicker = ui.new_color_picker('CONFIG', 'Presets', 'Anti aim direction color picker', 220, 220, 220, 255),
        indicators = ui.new_checkbox('CONFIG', 'Presets', 'Indicators'),
        indicatorscolorpicker = ui.new_color_picker('CONFIG', 'Presets', 'Indicators color picker', 150, 200, 60, 255),
        indicatorsmultiselect = ui.new_multiselect('CONFIG', 'Presets', '\nIndicators multiselect', 'Anti aim', 'Extended angles', 'Resolver', 'Force safe point', 'Quick peek assist', 'Duck peek assist', 'Automatic fire', 'Automatic penetration', 'Minimum damage', 'Maximum FOV', 'Force body aim'),
    }, 

    misc = {
        bodyyawinverter = ui.new_checkbox('CONFIG', 'Presets', 'Body yaw inverter'),
        bodyyawinverterhotkey = ui.new_hotkey('CONFIG', 'Presets', 'Body yaw inverter hotkey', true),
        slowmotiontype = ui.new_combobox('CONFIG', 'Presets', 'Slow motion type', 'Favor high speed', 'Favor anti aim'),
        antiaimdisablers = ui.new_multiselect('CONFIG', 'Presets', 'Anti aim disablers', 'Game is not focused'),
        unsafeoptions = ui.new_checkbox('CONFIG', 'Presets', '\aB6B665FFUnsafe options'),
        unsafeoptionsmultiselect = ui.new_multiselect('CONFIG', 'Presets', '\nUnsafe options multiselect', 'Matchmaking bypass', 'Extended pitch'),
        clantagspammer = ui.new_checkbox('CONFIG', 'Presets', 'Clan tag spammer'),
    },
}

for index, value in ipairs({'Crouch', 'Stand', 'Move', 'Slow motion', 'In air'}) do 
    variables.conditiontable[index] = {
        pitchoffset = ui.new_slider('CONFIG', 'Presets', '\af786f4FF' .. value .. '\aFFFFFFC8' .. ' \aB6B665FFPitch offset', 0, 170, 0, true, '°', 1, {[0] = 'Local view'}),
        bodyyaw = ui.new_combobox('CONFIG', 'Presets', '\af786f4FF' .. value ..'\aFFFFFFC8' .. ' Body yaw', 'Off', 'Opposite', 'Jitter', 'Static'),
        bodyyawinverter = ui.new_combobox('CONFIG', 'Presets', '\af786f4FF' .. value .. '\aFFFFFFC8' .. ' Body yaw inverter', 'Manual', 'Dynamic'),
        freestand = ui.new_combobox('CONFIG', 'Presets', '\af786f4FF' .. value .. '\aFFFFFFC8' .. ' Freestand', 'Peek fake', 'Peek real'),
        lowerbodyyaw = (value == 'Crouch' or value == 'Stand') and ui.new_combobox('CONFIG', 'Presets', '\af786f4FF' .. value .. '\aFFFFFFC8' .. ' Lower body yaw', 'Eye yaw', 'Opposite') or nil,
        roll = ui.new_checkbox('CONFIG', 'Presets', '\af786f4FF' .. value .. '\aFFFFFFC8' .. ' Roll'),
        bodyyawoffset = ui.new_slider('CONFIG', 'Presets', '\af786f4FF' .. value .. '\aFFFFFFC8' .. ' \aB6B665FFBody yaw offset', -180, 180, 0, true, '°'),
    }
end

lerp = function(a, b, p)
    return a + (b - a) * p
end

contains = function(table, value)
    for k, v in pairs(table) do 
        if v == value then
             return true 
            end 
        end
    return false
end

localplayercondition = function(cmd)
    if cmd.in_jump ~= 0 then
        variables.conditionticks = 0
    elseif variables.conditionticks <= 30 then
        variables.conditionticks = variables.conditionticks + 1
    end

    if variables.conditionticks <= 30 then 
        return 5
    elseif cmd.in_duck == 1 and not ui.get(references.duckpeekassist) then 
        return 1 
    elseif ui.get(references.slowmotion[1]) and ui.get(references.slowmotion[2]) and (math.abs(cmd.forwardmove) > 1 or math.abs(cmd.sidemove) > 1) then 
        return 4 
    elseif (math.abs(cmd.forwardmove) > 1 or math.abs(cmd.sidemove) > 1) or vector(entity.get_prop(entity.get_local_player(), 'm_vecVelocity')):length2d() > 2.0 then 
        return 3 
    else 
        return 2 
    end
end

bodyyawinverter = function(integer)
    local cx, cy, cz = client.eye_position()
    local cpitch, cyaw = client.camera_angles()
    local trace_data = {left = 0, right = 0}

    for i = cyaw - 90, cyaw + 90, 30 do
        if i ~= cyaw then
            local rad = math.rad(i)
            local px, py, pz = cx + 256 * math.cos(rad), cy + 256 * math.sin(rad), cz


            local frac = client.trace_line(entity.get_local_player(), cx, cy, cz, px, py, pz)
            local side = i < cyaw and 'left' or 'right'

    
            trace_data[side] = trace_data[side] + frac
        end
    end

    targetyaw = trace_data.left < trace_data.right and -integer or integer

    local targetyaw = ui.get(script.misc.bodyyawinverter) and ui.get(script.misc.bodyyawinverterhotkey) and targetyaw or -targetyaw
    
    return targetyaw
end

outlined_rectangle = function(x, y, w, h, r, g, b, a, t)
    renderer.rectangle(x + t, y, w - t * 2, t, r, g, b, a)
    renderer.rectangle(x + w - t, y, t, h - t, r, g, b, a)
    renderer.rectangle(x, y + h - t, w, t, r, g, b, a)
    renderer.rectangle(x, y, t, h - t, r, g, b, a)
end

window = function(x, y, w, h)
    outlined_rectangle(x, y, w, h, 12, 12, 12, 255, 1)
    outlined_rectangle(x + 1, y + 1, w - 2, h - 2, 60, 60, 60, 255, 1)
    outlined_rectangle(x + 2, y + 2, w - 4, h - 4, 40, 40, 40, 255, 3)
    outlined_rectangle(x + 5, y + 5, w - 10, h - 10, 60, 60, 60, 255, 1)
    renderer.rectangle(x + 6, y + 6, w - 12, h - 12, 12, 12, 12, 255)
    renderer.texture(renderer.load_rgba(variables.pattern, 4, 4), x + 6, y + 6, w - 12, h - 12, 255, 255, 255, 255, 'r')
end

inboundary = function(x, y, w, h)
    local mouse = vector(ui.mouse_position())
    return mouse.x >= x and mouse.x <= x + w and mouse.y >= y and mouse.y <= y + h
end

local icons = {
    [1] = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="75" zoomAndPan="magnify" viewBox="0 0 56.25 56.249997" height="75" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><clipPath id="d5a0a0b02f"><path d="M 6.789062 13.234375 L 48.976562 13.234375 L 48.976562 42.101562 L 6.789062 42.101562 Z M 6.789062 13.234375 " clip-rule="nonzero"/></clipPath></defs><g clip-path="url(#d5a0a0b02f)"><path fill="#ffffff" d="M 18.445312 40.617188 C 18.421875 40.894531 18.40625 41.132812 18.375 41.371094 C 18.304688 41.898438 18.121094 42.074219 17.585938 42.085938 C 16.960938 42.101562 16.335938 42.097656 15.710938 41.988281 C 15.316406 41.914062 14.90625 41.9375 14.5 41.898438 C 13.632812 41.816406 12.773438 41.714844 11.910156 41.628906 C 11.3125 41.574219 10.710938 41.535156 10.109375 41.492188 C 10.0625 41.488281 10.019531 41.488281 9.972656 41.484375 C 9.597656 41.449219 9.417969 41.261719 9.460938 40.894531 C 9.488281 40.625 9.507812 40.34375 9.679688 40.109375 C 9.714844 40.0625 9.742188 40.011719 9.757812 39.953125 C 9.800781 39.820312 9.746094 39.730469 9.613281 39.699219 C 9.558594 39.683594 9.496094 39.695312 9.441406 39.679688 C 9.046875 39.589844 8.628906 39.605469 8.332031 39.21875 C 8.160156 38.996094 7.839844 38.886719 7.601562 38.707031 C 7.382812 38.535156 7.179688 38.347656 6.996094 38.144531 C 6.84375 37.980469 6.800781 37.769531 6.84375 37.535156 C 7.027344 36.480469 7.320312 35.46875 7.8125 34.507812 C 8.21875 33.710938 8.585938 32.898438 9.015625 32.113281 C 9.355469 31.496094 9.761719 30.90625 10.132812 30.300781 C 10.25 30.117188 10.351562 29.929688 10.453125 29.734375 C 10.875 28.9375 11.285156 28.128906 11.621094 27.289062 C 11.96875 26.402344 12.234375 25.488281 12.363281 24.542969 C 12.457031 23.808594 12.207031 23.140625 11.824219 22.519531 C 11.355469 21.757812 10.667969 21.292969 9.796875 21.074219 C 9.558594 21.015625 9.324219 20.960938 9.082031 20.96875 C 8.609375 20.984375 8.265625 20.503906 8.542969 20.019531 C 8.582031 19.949219 8.636719 19.886719 8.6875 19.824219 C 8.828125 19.664062 8.890625 19.484375 8.921875 19.269531 C 9.042969 18.527344 8.964844 17.792969 8.90625 17.054688 C 8.859375 16.441406 8.828125 15.824219 8.898438 15.207031 C 8.960938 14.691406 9.222656 14.421875 9.75 14.386719 C 10.015625 14.367188 10.285156 14.363281 10.550781 14.378906 C 10.789062 14.390625 10.917969 14.28125 11 14.082031 C 11.058594 13.933594 11.109375 13.78125 11.179688 13.636719 C 11.308594 13.34375 11.746094 13.234375 12 13.4375 C 12.070312 13.5 12.160156 13.628906 12.140625 13.691406 C 12.058594 13.933594 12.199219 14.113281 12.28125 14.339844 C 12.457031 14.355469 12.640625 14.382812 12.820312 14.382812 C 14.027344 14.386719 15.234375 14.386719 16.441406 14.386719 C 16.925781 14.386719 17.414062 14.382812 17.894531 14.386719 C 20.597656 14.40625 23.304688 14.429688 26.003906 14.453125 C 28.136719 14.472656 30.273438 14.503906 32.40625 14.5 C 36.722656 14.496094 41.035156 14.472656 45.351562 14.457031 C 45.523438 14.457031 45.699219 14.457031 45.894531 14.457031 C 45.988281 14.234375 46.078125 14.039062 46.15625 13.839844 C 46.324219 13.425781 46.699219 13.332031 47.035156 13.640625 C 47.253906 13.84375 47.441406 14.078125 47.644531 14.296875 C 47.71875 14.378906 47.808594 14.449219 47.890625 14.519531 C 47.980469 14.597656 48.078125 14.65625 48.15625 14.746094 C 48.300781 14.902344 48.414062 15.089844 48.667969 15.113281 C 48.746094 15.121094 48.808594 15.273438 48.871094 15.359375 C 48.882812 15.375 48.878906 15.40625 48.878906 15.429688 C 48.90625 15.976562 48.949219 16.527344 48.957031 17.074219 C 48.960938 17.335938 48.902344 17.597656 48.871094 17.859375 C 48.839844 18.125 48.613281 18.183594 48.414062 18.269531 C 48.363281 18.464844 48.367188 18.632812 48.457031 18.8125 C 48.503906 18.898438 48.527344 19.007812 48.527344 19.105469 C 48.535156 19.597656 48.535156 20.09375 48.527344 20.585938 C 48.523438 20.71875 48.484375 20.859375 48.433594 20.984375 C 48.335938 21.238281 48.199219 21.480469 48.117188 21.742188 C 48.003906 22.105469 47.734375 22.265625 47.386719 22.34375 C 47.242188 22.375 47.089844 22.398438 46.941406 22.421875 C 46.703125 22.464844 46.496094 22.449219 46.300781 22.265625 C 46.054688 22.039062 45.640625 22.101562 45.417969 22.347656 C 45.359375 22.414062 45.277344 22.472656 45.191406 22.492188 C 45.023438 22.53125 44.851562 22.558594 44.679688 22.5625 C 44.015625 22.578125 43.359375 22.574219 42.695312 22.585938 C 41.847656 22.597656 41.003906 22.613281 40.15625 22.632812 C 39.265625 22.65625 38.371094 22.714844 37.480469 22.703125 C 36.777344 22.691406 36.289062 23.011719 35.863281 23.496094 C 35.589844 23.804688 35.421875 24.175781 35.347656 24.570312 C 35.292969 24.847656 35.316406 25.132812 35.320312 25.417969 C 35.328125 25.847656 35.34375 26.28125 35.375 26.710938 C 35.417969 27.351562 35.511719 27.984375 35.792969 28.570312 C 35.808594 28.601562 35.820312 28.632812 35.832031 28.664062 C 35.949219 29.042969 35.789062 29.273438 35.390625 29.292969 C 34.617188 29.328125 33.839844 29.347656 33.066406 29.378906 C 32.59375 29.398438 32.117188 29.425781 31.648438 29.433594 C 30.105469 29.460938 28.5625 29.496094 27.019531 29.511719 C 26.480469 29.515625 25.972656 29.359375 25.5 29.089844 C 25.289062 28.96875 25.074219 28.851562 24.855469 28.757812 C 24.097656 28.460938 23.183594 28.847656 22.863281 29.589844 C 22.691406 29.988281 22.472656 30.371094 22.359375 30.78125 C 22.257812 31.160156 22.097656 31.566406 22.332031 31.96875 C 22.355469 32.003906 22.371094 32.050781 22.386719 32.09375 C 22.484375 32.382812 22.429688 32.535156 22.164062 32.703125 C 22.007812 32.800781 21.851562 32.898438 21.703125 33.003906 C 21.414062 33.203125 21.300781 33.53125 21.148438 33.820312 C 21.011719 34.082031 20.890625 34.359375 20.800781 34.636719 C 20.695312 34.988281 20.605469 35.347656 20.757812 35.714844 C 20.773438 35.753906 20.785156 35.800781 20.800781 35.839844 C 20.945312 36.292969 20.910156 36.425781 20.480469 36.65625 C 19.996094 36.917969 19.761719 37.347656 19.570312 37.824219 C 19.519531 37.953125 19.492188 38.089844 19.433594 38.214844 C 19.226562 38.652344 19.214844 39.09375 19.359375 39.554688 C 19.394531 39.664062 19.417969 39.773438 19.429688 39.886719 C 19.46875 40.230469 19.332031 40.421875 18.992188 40.511719 C 18.8125 40.535156 18.640625 40.570312 18.445312 40.617188 Z M 25.042969 24.75 C 24.84375 25.039062 24.769531 25.214844 24.730469 25.492188 C 24.503906 27.085938 25.867188 28.433594 27.320312 28.34375 C 28.011719 28.300781 28.710938 28.269531 29.402344 28.261719 C 30.285156 28.25 31.164062 28.257812 32.046875 28.273438 C 32.433594 28.28125 32.777344 28.171875 33.097656 27.984375 C 33.820312 27.566406 34.097656 26.886719 34.160156 26.117188 C 34.199219 25.628906 34.140625 25.132812 34.113281 24.644531 C 34.066406 23.765625 33.335938 23.117188 32.574219 22.894531 C 32.371094 22.832031 32.140625 22.835938 31.925781 22.855469 C 31.421875 22.902344 30.914062 22.976562 30.414062 23.042969 C 29.804688 23.121094 29.195312 23.191406 28.589844 23.285156 C 28.277344 23.328125 28.265625 23.355469 28.210938 23.675781 C 28.125 24.210938 28.265625 24.726562 28.359375 25.238281 C 28.371094 25.332031 28.460938 25.417969 28.535156 25.484375 C 28.796875 25.738281 29.078125 25.984375 29.339844 26.238281 C 29.558594 26.445312 29.773438 26.65625 29.976562 26.875 C 30.082031 26.984375 30.15625 27.117188 30.066406 27.28125 C 29.984375 27.421875 29.859375 27.449219 29.714844 27.441406 C 29.636719 27.4375 29.5625 27.453125 29.457031 27.464844 C 29.550781 27.632812 29.652344 27.785156 29.515625 27.929688 C 29.363281 28.078125 29.1875 28.011719 29.03125 27.929688 C 28.773438 27.800781 28.519531 27.664062 28.269531 27.523438 C 27.691406 27.179688 27.292969 26.648438 26.816406 26.199219 C 26.773438 26.152344 26.730469 26.082031 26.71875 26.023438 C 26.6875 25.8125 26.554688 25.75 26.363281 25.71875 C 26.089844 25.679688 25.820312 25.605469 25.550781 25.539062 C 25.199219 25.449219 25.183594 25.429688 25.253906 25.066406 C 25.296875 24.875 25.25 24.78125 25.042969 24.75 Z M 25.042969 24.75 " fill-opacity="1" fill-rule="nonzero"/></g></svg>',
    [2] = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="75" zoomAndPan="magnify" viewBox="0 0 56.25 56.249997" height="75" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><clipPath id="cf969e9ea1"><path d="M 10.824219 7.6875 L 44.871094 7.6875 L 44.871094 47.65625 L 10.824219 47.65625 Z M 10.824219 7.6875 " clip-rule="nonzero"/></clipPath></defs><g clip-path="url(#cf969e9ea1)"><path fill="#ffffff" d="M 44.5 13.515625 C 43.996094 12.949219 43.160156 13.097656 42.488281 12.945312 C 37.621094 12.152344 33.046875 10.179688 28.675781 7.972656 C 28.46875 7.875 28.253906 7.792969 28.035156 7.714844 L 27.71875 7.714844 C 26.960938 7.941406 26.289062 8.371094 25.574219 8.695312 C 21.742188 10.5625 17.722656 12.167969 13.5 12.902344 C 12.890625 13.023438 12.257812 13.015625 11.664062 13.191406 C 11.191406 13.394531 10.847656 13.886719 10.875 14.40625 C 10.824219 17.289062 10.929688 20.175781 11.15625 23.054688 C 11.488281 26.714844 12.019531 30.394531 13.261719 33.875 C 13.863281 35.488281 14.632812 37.074219 15.785156 38.375 C 18.9375 42.070312 22.855469 45.101562 27.140625 47.40625 C 27.324219 47.496094 27.511719 47.570312 27.707031 47.628906 L 27.984375 47.628906 C 28.746094 47.414062 29.378906 46.910156 30.078125 46.554688 C 33.398438 44.609375 36.4375 42.183594 39.050781 39.375 C 39.839844 38.488281 40.652344 37.601562 41.21875 36.554688 C 42.535156 34.238281 43.230469 31.640625 43.746094 29.050781 C 44.640625 24.335938 44.875 19.519531 44.847656 14.726562 C 44.859375 14.300781 44.828125 13.832031 44.5 13.515625 Z M 42.652344 27.992188 C 42.117188 30.898438 41.421875 33.855469 39.84375 36.402344 C 38.441406 38.410156 36.636719 40.101562 34.789062 41.699219 C 32.660156 43.503906 30.316406 45.046875 27.855469 46.375 C 23.542969 44.054688 19.59375 41.007812 16.476562 37.238281 C 14.867188 35.199219 14.109375 32.667969 13.507812 30.191406 C 12.34375 25 12.070312 19.652344 12.144531 14.347656 C 17.710938 13.722656 22.910156 11.457031 27.859375 8.96875 C 32.804688 11.457031 38.011719 13.71875 43.578125 14.34375 C 43.648438 18.90625 43.425781 23.488281 42.652344 27.992188 Z M 42.652344 27.992188 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#ffffff" d="M 14.644531 16.511719 C 14.738281 21.421875 15.023438 26.382812 16.332031 31.140625 C 16.84375 32.894531 17.503906 34.679688 18.769531 36.046875 C 21.308594 39.058594 24.460938 41.515625 27.859375 43.515625 C 31.472656 41.386719 34.808594 38.730469 37.433594 35.460938 C 38.675781 33.773438 39.265625 31.71875 39.753906 29.710938 C 40.730469 25.386719 40.996094 20.933594 41.070312 16.511719 C 36.445312 15.628906 32.054688 13.847656 27.859375 11.769531 C 23.65625 13.84375 19.269531 15.632812 14.644531 16.511719 Z M 14.644531 16.511719 " fill-opacity="1" fill-rule="nonzero"/></svg>',
    [3] = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="75" zoomAndPan="magnify" viewBox="0 0 56.25 56.249997" height="75" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><clipPath id="d8778e503a"><path d="M 27 6.660156 L 29 6.660156 L 29 14 L 27 14 Z M 27 6.660156 " clip-rule="nonzero"/></clipPath><clipPath id="45fa98ade8"><path d="M 6.660156 27 L 14 27 L 14 29 L 6.660156 29 Z M 6.660156 27 " clip-rule="nonzero"/></clipPath><clipPath id="05274b89bf"><path d="M 27 41 L 29 41 L 29 48.847656 L 27 48.847656 Z M 27 41 " clip-rule="nonzero"/></clipPath><clipPath id="5e834d7b7d"><path d="M 41 27 L 48.847656 27 L 48.847656 29 L 41 29 Z M 41 27 " clip-rule="nonzero"/></clipPath></defs><path fill="#ffffff" d="M 27.753906 40.027344 C 20.984375 40.027344 15.480469 34.523438 15.480469 27.753906 C 15.480469 20.984375 20.984375 15.480469 27.753906 15.480469 Z M 27.753906 14.652344 C 20.527344 14.652344 14.652344 20.527344 14.652344 27.753906 C 14.652344 34.976562 20.527344 40.855469 27.753906 40.855469 C 34.976562 40.855469 40.855469 34.976562 40.855469 27.753906 C 40.855469 20.527344 34.976562 14.652344 27.753906 14.652344 " fill-opacity="1" fill-rule="nonzero"/><g clip-path="url(#d8778e503a)"><path fill="#ffffff" d="M 27.753906 13.625 C 27.980469 13.625 28.164062 13.441406 28.164062 13.214844 L 28.164062 7.070312 C 28.164062 6.84375 27.980469 6.660156 27.753906 6.660156 C 27.527344 6.660156 27.339844 6.84375 27.339844 7.070312 L 27.339844 13.214844 C 27.339844 13.441406 27.527344 13.625 27.753906 13.625 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#ffffff" d="M 17.179688 17.765625 C 17.261719 17.84375 17.367188 17.886719 17.472656 17.886719 C 17.578125 17.886719 17.683594 17.84375 17.765625 17.765625 C 17.929688 17.605469 17.929688 17.339844 17.765625 17.179688 L 13.421875 12.839844 C 13.261719 12.675781 12.996094 12.675781 12.839844 12.839844 C 12.675781 13 12.675781 13.261719 12.839844 13.421875 L 17.179688 17.765625 " fill-opacity="1" fill-rule="nonzero"/><g clip-path="url(#45fa98ade8)"><path fill="#ffffff" d="M 13.625 27.753906 C 13.625 27.527344 13.441406 27.339844 13.214844 27.339844 L 7.070312 27.339844 C 6.84375 27.339844 6.660156 27.527344 6.660156 27.753906 C 6.660156 27.980469 6.84375 28.164062 7.070312 28.164062 L 13.214844 28.164062 C 13.441406 28.164062 13.625 27.980469 13.625 27.753906 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#ffffff" d="M 17.179688 37.742188 L 12.839844 42.082031 C 12.675781 42.246094 12.675781 42.507812 12.839844 42.667969 C 12.917969 42.75 13.023438 42.789062 13.128906 42.789062 C 13.234375 42.789062 13.339844 42.75 13.421875 42.667969 L 17.765625 38.328125 C 17.929688 38.164062 17.929688 37.90625 17.765625 37.742188 C 17.605469 37.582031 17.339844 37.582031 17.179688 37.742188 " fill-opacity="1" fill-rule="nonzero"/><g clip-path="url(#05274b89bf)"><path fill="#ffffff" d="M 27.753906 41.878906 C 27.527344 41.878906 27.339844 42.0625 27.339844 42.292969 L 27.339844 48.433594 C 27.339844 48.664062 27.527344 48.847656 27.753906 48.847656 C 27.980469 48.847656 28.164062 48.664062 28.164062 48.433594 L 28.164062 42.292969 C 28.164062 42.0625 27.980469 41.878906 27.753906 41.878906 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#ffffff" d="M 38.328125 37.742188 C 38.164062 37.582031 37.90625 37.582031 37.738281 37.742188 C 37.582031 37.90625 37.582031 38.164062 37.738281 38.328125 L 42.082031 42.667969 C 42.164062 42.75 42.269531 42.789062 42.375 42.789062 C 42.480469 42.789062 42.585938 42.75 42.667969 42.667969 C 42.828125 42.507812 42.828125 42.246094 42.667969 42.082031 L 38.328125 37.742188 " fill-opacity="1" fill-rule="nonzero"/><g clip-path="url(#5e834d7b7d)"><path fill="#ffffff" d="M 48.433594 27.339844 L 42.292969 27.339844 C 42.0625 27.339844 41.878906 27.527344 41.878906 27.753906 C 41.878906 27.980469 42.0625 28.164062 42.292969 28.164062 L 48.433594 28.164062 C 48.664062 28.164062 48.847656 27.980469 48.847656 27.753906 C 48.847656 27.527344 48.664062 27.339844 48.433594 27.339844 " fill-opacity="1" fill-rule="nonzero"/></g><path fill="#ffffff" d="M 38.03125 17.886719 C 38.136719 17.886719 38.242188 17.84375 38.328125 17.765625 L 42.667969 13.421875 C 42.828125 13.261719 42.828125 13 42.667969 12.839844 C 42.503906 12.675781 42.246094 12.675781 42.082031 12.839844 L 37.738281 17.179688 C 37.582031 17.339844 37.582031 17.605469 37.738281 17.765625 C 37.820312 17.84375 37.925781 17.886719 38.03125 17.886719 " fill-opacity="1" fill-rule="nonzero"/></svg>',
    [4] = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="75" zoomAndPan="magnify" viewBox="0 0 56.25 56.249997" height="75" preserveAspectRatio="xMidYMid meet" version="1.0"><defs><clipPath id="e2f1bf575d"><path d="M 8.128906 8.800781 L 47.359375 8.800781 L 47.359375 46.546875 L 8.128906 46.546875 Z M 8.128906 8.800781 " clip-rule="nonzero"/></clipPath></defs><g clip-path="url(#e2f1bf575d)"><path fill="#ffffff" d="M 18.921875 27.832031 C 17.371094 27.832031 16.117188 26.582031 16.117188 25.039062 C 16.117188 23.496094 17.371094 22.246094 18.921875 22.246094 C 20.46875 22.246094 21.726562 23.496094 21.726562 25.039062 C 21.726562 26.582031 20.46875 27.832031 18.921875 27.832031 Z M 29.324219 23.597656 L 28.761719 23.515625 C 27.960938 23.394531 27.292969 22.851562 27.015625 22.09375 C 26.929688 21.867188 26.839844 21.648438 26.738281 21.429688 C 26.394531 20.695312 26.480469 19.835938 26.960938 19.1875 L 27.300781 18.730469 C 27.433594 18.550781 27.417969 18.300781 27.257812 18.140625 L 25.847656 16.738281 C 25.6875 16.578125 25.4375 16.558594 25.253906 16.691406 L 24.796875 17.03125 C 24.144531 17.511719 23.28125 17.59375 22.546875 17.253906 C 22.328125 17.152344 22.105469 17.0625 21.878906 16.980469 C 21.117188 16.703125 20.570312 16.035156 20.453125 15.238281 L 20.367188 14.675781 C 20.335938 14.457031 20.144531 14.289062 19.917969 14.289062 L 17.921875 14.289062 C 17.699219 14.289062 17.507812 14.457031 17.476562 14.675781 L 17.390625 15.238281 C 17.273438 16.035156 16.726562 16.703125 15.964844 16.980469 C 15.738281 17.0625 15.515625 17.152344 15.296875 17.253906 C 14.5625 17.59375 13.699219 17.511719 13.046875 17.03125 L 12.589844 16.691406 C 12.40625 16.558594 12.15625 16.578125 11.996094 16.738281 L 10.585938 18.140625 C 10.425781 18.300781 10.40625 18.550781 10.542969 18.730469 L 10.878906 19.1875 C 11.363281 19.835938 11.449219 20.695312 11.105469 21.429688 C 11.003906 21.648438 10.914062 21.867188 10.828125 22.09375 C 10.550781 22.851562 9.878906 23.394531 9.082031 23.515625 L 8.519531 23.597656 C 8.296875 23.632812 8.128906 23.820312 8.128906 24.046875 L 8.128906 26.03125 C 8.128906 26.257812 8.296875 26.449219 8.519531 26.480469 L 9.082031 26.5625 C 9.878906 26.683594 10.550781 27.226562 10.828125 27.984375 C 10.914062 28.210938 11.003906 28.433594 11.105469 28.648438 C 11.449219 29.382812 11.363281 30.242188 10.878906 30.890625 L 10.542969 31.347656 C 10.40625 31.527344 10.425781 31.777344 10.585938 31.9375 L 11.996094 33.34375 C 12.15625 33.5 12.40625 33.519531 12.589844 33.386719 L 13.046875 33.046875 C 13.699219 32.566406 14.5625 32.484375 15.296875 32.824219 C 15.515625 32.925781 15.738281 33.015625 15.964844 33.097656 C 16.726562 33.375 17.273438 34.042969 17.390625 34.839844 L 17.476562 35.402344 C 17.507812 35.625 17.699219 35.789062 17.921875 35.789062 L 19.917969 35.789062 C 20.144531 35.789062 20.335938 35.625 20.367188 35.402344 L 20.453125 34.839844 C 20.570312 34.042969 21.117188 33.375 21.878906 33.097656 C 22.105469 33.015625 22.328125 32.925781 22.546875 32.824219 C 23.28125 32.484375 24.144531 32.566406 24.796875 33.046875 L 25.253906 33.386719 C 25.4375 33.519531 25.6875 33.5 25.847656 33.34375 L 27.257812 31.9375 C 27.417969 31.777344 27.433594 31.527344 27.300781 31.347656 L 26.960938 30.890625 C 26.480469 30.242188 26.394531 29.382812 26.738281 28.648438 C 26.839844 28.433594 26.929688 28.210938 27.015625 27.984375 C 27.292969 27.226562 27.960938 26.683594 28.761719 26.5625 L 29.324219 26.480469 C 29.546875 26.449219 29.710938 26.257812 29.710938 26.03125 L 29.710938 24.046875 C 29.710938 23.820312 29.546875 23.632812 29.324219 23.597656 Z M 36.566406 38.582031 C 35.015625 38.582031 33.761719 37.332031 33.761719 35.789062 C 33.761719 34.246094 35.015625 32.996094 36.566406 32.996094 C 38.117188 32.996094 39.371094 34.246094 39.371094 35.789062 C 39.371094 37.332031 38.117188 38.582031 36.566406 38.582031 Z M 46.96875 34.347656 L 46.40625 34.261719 C 45.609375 34.144531 44.9375 33.601562 44.660156 32.84375 C 44.574219 32.617188 44.484375 32.394531 44.382812 32.175781 C 44.039062 31.445312 44.125 30.585938 44.609375 29.933594 L 44.945312 29.480469 C 45.082031 29.300781 45.0625 29.046875 44.902344 28.890625 L 43.492188 27.484375 C 43.332031 27.328125 43.082031 27.308594 42.898438 27.441406 L 42.441406 27.777344 C 41.789062 28.261719 40.925781 28.34375 40.191406 28.003906 C 39.972656 27.902344 39.75 27.8125 39.523438 27.726562 C 38.761719 27.449219 38.214844 26.78125 38.097656 25.984375 L 38.011719 25.425781 C 37.980469 25.203125 37.789062 25.039062 37.5625 25.039062 L 35.570312 25.039062 C 35.34375 25.039062 35.152344 25.203125 35.121094 25.425781 L 35.035156 25.984375 C 34.917969 26.78125 34.371094 27.449219 33.609375 27.726562 C 33.382812 27.8125 33.160156 27.902344 32.941406 28.003906 C 32.207031 28.34375 31.34375 28.261719 30.691406 27.777344 L 30.234375 27.441406 C 30.050781 27.308594 29.800781 27.328125 29.640625 27.484375 L 28.230469 28.890625 C 28.070312 29.046875 28.050781 29.300781 28.1875 29.480469 L 28.527344 29.933594 C 29.007812 30.585938 29.09375 31.445312 28.75 32.175781 C 28.648438 32.394531 28.558594 32.617188 28.472656 32.84375 C 28.195312 33.601562 27.523438 34.144531 26.726562 34.261719 L 26.164062 34.347656 C 25.941406 34.378906 25.773438 34.570312 25.773438 34.792969 L 25.773438 36.78125 C 25.773438 37.003906 25.941406 37.195312 26.164062 37.230469 L 26.726562 37.3125 C 27.523438 37.429688 28.195312 37.976562 28.472656 38.730469 C 28.558594 38.957031 28.648438 39.179688 28.75 39.398438 C 29.09375 40.132812 29.007812 40.992188 28.527344 41.640625 L 28.1875 42.097656 C 28.050781 42.277344 28.070312 42.527344 28.230469 42.683594 L 29.640625 44.089844 C 29.800781 44.25 30.050781 44.269531 30.234375 44.132812 L 30.691406 43.796875 C 31.34375 43.316406 32.207031 43.230469 32.941406 43.570312 C 33.160156 43.671875 33.382812 43.765625 33.609375 43.847656 C 34.371094 44.125 34.917969 44.792969 35.035156 45.589844 L 35.121094 46.148438 C 35.152344 46.371094 35.34375 46.535156 35.570312 46.535156 L 37.5625 46.535156 C 37.789062 46.535156 37.980469 46.371094 38.011719 46.148438 L 38.097656 45.589844 C 38.214844 44.792969 38.761719 44.125 39.523438 43.847656 C 39.75 43.765625 39.972656 43.671875 40.191406 43.570312 C 40.925781 43.230469 41.789062 43.316406 42.441406 43.796875 L 42.898438 44.132812 C 43.082031 44.269531 43.332031 44.25 43.492188 44.089844 L 44.902344 42.683594 C 45.0625 42.527344 45.082031 42.277344 44.945312 42.097656 L 44.609375 41.640625 C 44.125 40.992188 44.039062 40.132812 44.382812 39.398438 C 44.484375 39.179688 44.574219 38.957031 44.660156 38.730469 C 44.9375 37.976562 45.609375 37.429688 46.40625 37.3125 L 46.96875 37.230469 C 47.191406 37.195312 47.359375 37.003906 47.359375 36.78125 L 47.359375 34.792969 C 47.359375 34.570312 47.191406 34.378906 46.96875 34.347656 Z M 34.996094 18.6875 C 33.824219 18.6875 32.878906 17.742188 32.878906 16.582031 C 32.878906 15.417969 33.824219 14.472656 34.996094 14.472656 C 36.164062 14.472656 37.109375 15.417969 37.109375 16.582031 C 37.109375 17.742188 36.164062 18.6875 34.996094 18.6875 Z M 42.511719 15.539062 L 42.105469 15.480469 C 41.527344 15.394531 41.042969 15 40.839844 14.453125 C 40.78125 14.289062 40.714844 14.128906 40.640625 13.972656 C 40.394531 13.441406 40.457031 12.820312 40.804688 12.351562 L 41.050781 12.023438 C 41.144531 11.890625 41.132812 11.710938 41.019531 11.597656 L 40 10.582031 C 39.882812 10.464844 39.703125 10.453125 39.570312 10.550781 L 39.242188 10.792969 C 38.769531 11.140625 38.144531 11.203125 37.613281 10.957031 C 37.457031 10.882812 37.292969 10.816406 37.128906 10.757812 C 36.582031 10.554688 36.1875 10.074219 36.101562 9.496094 L 36.039062 9.09375 C 36.015625 8.933594 35.878906 8.8125 35.714844 8.8125 L 34.273438 8.8125 C 34.109375 8.8125 33.972656 8.933594 33.949219 9.09375 L 33.886719 9.496094 C 33.800781 10.074219 33.40625 10.554688 32.859375 10.757812 C 32.695312 10.816406 32.53125 10.882812 32.375 10.957031 C 31.84375 11.203125 31.21875 11.140625 30.746094 10.792969 L 30.417969 10.550781 C 30.285156 10.453125 30.105469 10.464844 29.988281 10.582031 L 28.96875 11.597656 C 28.855469 11.710938 28.84375 11.890625 28.9375 12.023438 L 29.183594 12.351562 C 29.53125 12.820312 29.59375 13.441406 29.347656 13.972656 C 29.273438 14.128906 29.207031 14.289062 29.148438 14.453125 C 28.945312 15 28.460938 15.394531 27.882812 15.480469 L 27.476562 15.539062 C 27.316406 15.5625 27.195312 15.699219 27.195312 15.863281 L 27.195312 17.296875 C 27.195312 17.460938 27.316406 17.597656 27.476562 17.621094 L 27.882812 17.683594 C 28.460938 17.765625 28.945312 18.160156 29.148438 18.707031 C 29.207031 18.871094 29.273438 19.03125 29.347656 19.1875 C 29.59375 19.71875 29.53125 20.339844 29.183594 20.808594 L 28.9375 21.140625 C 28.84375 21.269531 28.855469 21.449219 28.96875 21.5625 L 29.988281 22.578125 C 30.105469 22.695312 30.285156 22.707031 30.417969 22.609375 L 30.746094 22.367188 C 31.21875 22.019531 31.84375 21.960938 32.375 22.203125 C 32.53125 22.277344 32.695312 22.34375 32.859375 22.40625 C 33.40625 22.605469 33.800781 23.085938 33.886719 23.664062 L 33.949219 24.066406 C 33.972656 24.230469 34.109375 24.347656 34.273438 24.347656 L 35.714844 24.347656 C 35.878906 24.347656 36.015625 24.230469 36.039062 24.066406 L 36.101562 23.664062 C 36.1875 23.085938 36.582031 22.605469 37.128906 22.40625 C 37.292969 22.34375 37.457031 22.277344 37.613281 22.203125 C 38.144531 21.960938 38.769531 22.019531 39.242188 22.367188 L 39.570312 22.609375 C 39.703125 22.707031 39.882812 22.695312 40 22.578125 L 41.019531 21.5625 C 41.132812 21.449219 41.144531 21.269531 41.050781 21.140625 L 40.804688 20.808594 C 40.457031 20.339844 40.394531 19.71875 40.640625 19.1875 C 40.714844 19.03125 40.78125 18.871094 40.839844 18.707031 C 41.042969 18.160156 41.527344 17.765625 42.105469 17.683594 L 42.511719 17.621094 C 42.671875 17.597656 42.792969 17.460938 42.792969 17.296875 L 42.792969 15.863281 C 42.792969 15.699219 42.671875 15.5625 42.511719 15.539062 " fill-opacity="1" fill-rule="nonzero"/></g></svg>',
}

tabs = function(x, y, w, h, tab_names)
    local size = vector(ui.menu_size())

    renderer.rectangle(x + 6, y + 6, 11, h - 12, 12, 12, 12, 255)
    renderer.rectangle(x + 6, y + 6 + h - 12, 12, 1, 40, 40, 40, 255) 
    renderer.rectangle(x + 17 + #tab_names * w, y + 6, size.x - #tab_names * w - 23, h - 12, 12, 12, 12, 255)
    renderer.rectangle(x + 16 + #tab_names * w, y + 6 + h - 12, size.x - #tab_names * w - 22, 1, 40, 40, 40, 255) 

    for i, tab_name in ipairs(tab_names) do
        local tab_x = x + 17 + (i - 1) * w

        if variables.active_tab ~= i then
            renderer.rectangle(tab_x, y + 6, w, h - 12, 12, 12, 12, 255)
            renderer.rectangle(tab_x - 1, y + 6 + h - 12, w + 2, 1, 40, 40, 40, 255)
        elseif variables.active_tab == i then
            renderer.rectangle(tab_x, y + 6, 1, h - 12, 40, 40, 40, 255)
            renderer.rectangle(tab_x + w - 1, y + 6, 1, h - 12, 40, 40, 40, 255)
            renderer.rectangle(tab_x + w - 1, y + 6, 1, h - 12, 40, 40, 40, 255)
        end

        local visible = (inboundary(tab_x, y + 6, w, h - 12) or variables.active_tab == i) and 180 or 110

        local svg = renderer.load_svg(icons[i], 40, 40)
        renderer.texture(svg, tab_x + (w) / 2 - 20, y + (h) / 2 - 20, 40, 40, 255, 255, 255, visible)

        if inboundary(tab_x, y + 6, w, h - 12) and client.key_state(0x01) and globals.realtime() > variables.click then
            variables.active_tab = i
            variables.click = globals.realtime() + 0.01
        end
    end
end

customslowmotion = function(cmd, goalspeed)
	local minimalspeed = math.sqrt((cmd.forwardmove * cmd.forwardmove) + (cmd.sidemove * cmd.sidemove))

    if goalspeed <= 0 or minimalspeed <= 0 or minimalspeed <= goalspeed or not (ui.get(references.slowmotion[1]) and ui.get(references.slowmotion[2])) or ui.get(script.misc.slowmotiontype) ~= 'Favor anti aim' then return end

	if cmd.in_duck == true then 
		goalspeed = goalspeed * 2.5
	end
	
	cmd.forwardmove = cmd.forwardmove * goalspeed / minimalspeed
	cmd.sidemove = cmd.sidemove * goalspeed / minimalspeed
end

bodyyaw = function(cmd, ladder, weapon, condition)
    if cmd.chokedcommands ~= 0 or ladder or weapon.type == 'grenade' or cmd.in_attack == 1 or entity.get_prop(entity.get_game_rules(), 'm_bFreezePeriod') ~= 0 or ui.get(references.bodyyaw[1]) == 'Off' then return end

    if cmd.in_use == 1 then return end 

    local value = ui.get(condition.pitchoffset) ~= 0 and 0 or (antiaim_funcs.get_desync(2) > 0 and - 90 or 90)

    cmd.no_choke = true
    cmd.allow_send_packet = false 
    cmd.yaw = cmd.yaw - value
end

roll = function(cmd, condition)
    if cmd.chokedcommands == 0 or not ui.get(condition.roll) or ui.get(references.bodyyaw[1]) == 'Off' then return end
    cmd.roll = antiaim_funcs.get_desync(2) > 0 and (ui.get(condition.bodyyawoffset) / 2) or -(ui.get(condition.bodyyawoffset) / 2)
end

antiuntrustedbypass = function(boolean)
    ui.set(references.antiuntrusted, boolean or (globals.mapname() == nil and entity.get_local_player() == nil or not entity.is_alive(entity.get_local_player())))
end

matchmakingbypass = function()
    local valve = ffi.cast('bool*', variables.gamerules[0] + 124)
    local bypass = ui.get(script.misc.unsafeoptions) and contains(ui.get(script.misc.unsafeoptionsmultiselect), 'Matchmaking bypass') and true or false

    if valve == nil then return end 

    valve[0] = not bypass 
    ui.set(references.sv_maxusrcmdprocessticks, not bypass and 17 or 7)
end

GetOrCreatePlayerData = function(idx)
    local player_data = variables.playerlist[idx]
    if not player_data then
        player_data = {roll_index = 1}
        variables.playerlist[idx] = player_data
    end
    return player_data
end

EnemyCondition = function(player_idx)
    if bit.band(entity.get_prop(player_idx, 'm_fFlags'), 1) == 0 then
        return "In air"
    elseif entity.get_prop(player_idx, 'm_flDuckAmount') > 0.5 then 
        return "Crouch"
    elseif  vector(entity.get_prop(player_idx, 'm_vecVelocity')):length() > 2 then
        return "Move"
    else
        return "Stand" 
    end
end

GetPlayerAngles = function(player_idx)
    local bruteforce = {ui.get(script.resolver.offset), -ui.get(script.resolver.offset), 50, -50, -90, 44}
    local x, y = vector(entity.get_prop(player_idx, 'm_angEyeAngles')).x, vector(entity.get_prop(player_idx, 'm_angEyeAngles')).y
    local side = math.floor((entity.get_prop(player_idx, 'm_flPoseParameter', 11) - 0.5) * 120 + 0.5)
    local angles = bruteforce[GetOrCreatePlayerData(player_idx).roll_index]
    local inverted = ui.get(script.main.menusex) and contains(ui.get(script.resolver.resolveinenemyconditon), EnemyCondition(player_idx)) and ui.get(script.resolver.resolver) and ui.get(script.resolver.resolverhotkey) and (ui.get(script.resolver.dynamicinverter) and (side > 0 and angles or -angles) or angles) or 0
    return x, y, inverted
end

UpdatePlayerAngles = function(player_idx)
    local x, y, angles = GetPlayerAngles(player_idx)
    entity.set_prop(player_idx, 'm_angEyeAngles', x, y, angles)
end

PaintPlayerAngles = function(player_idx)
    local box = {entity.get_bounding_box(player_idx)}
    local _, _, angles = GetPlayerAngles(player_idx)
    local player_data = GetOrCreatePlayerData(player_idx)

    if box[1] and box[2] then 
        renderer.text(box[1] - 10, box[2], 220, 220, 220, 255, "r-", 0, "\aB6B665FFRESOLVER " .. angles)
        renderer.text(box[1] - 10, box[2] + 10, 220, 220, 220, 255, "r-", 0, "ENEMY CONDITION " .. "\aFF3131C2" .. string.upper(EnemyCondition(player_idx)))
        renderer.text(box[1] - 10, box[2] + 20, 220, 220, 220, 255, "r-", 0, "BRUTEFORCE_INDEX " .. player_data.roll_index)
        renderer.text(box[1] - 10, box[2] + 30, 220, 220, 220, 255, "r-", 0, "RESOLVER " .. (ui.get(script.resolver.resolver) and ui.get(script.resolver.resolverhotkey) and "\a96C83BFFENABLED" or "\aFF3131C2DISABLED"))
    end
end

MissLogic = function(player_idx)
    local player_data = GetOrCreatePlayerData(player_idx)
    player_data.roll_index = (player_data.roll_index % 6) + 1
end

local resetplayers = ui.new_button('CONFIG', 'Presets', 'Reset players', function()
    for _, player_idx in pairs(entity.get_players(true)) do
        local player_data = GetOrCreatePlayerData(player_idx)
        player_data.roll_index = 1
    end
end)

client.set_event_callback('net_update_start', function()
    for _, player_idx in pairs(entity.get_players(true)) do
        UpdatePlayerAngles(player_idx)
    end
end)

client.set_event_callback('paint', function()
    for _, player_idx in pairs(entity.get_players(true)) do
        PaintPlayerAngles(player_idx)
    end
end)

client.set_event_callback('aim_miss', function(event)
    local hitgroup_names = {'Generic', 'Head', 'Chest', 'Stomach', 'Left arm', 'Right arm', 'Left leg', 'Right leg', 'Neck', '?', 'Gear'}
    local hitbox = hitgroup_names[event.hitgroup + 1]
    local _, _, angles = GetPlayerAngles(event.target)

    for _, targetHitbox in ipairs(ui.get(script.resolver.targethitboxbruteforce)) do
        if (hitbox == targetHitbox) then
            if angles ~= 0 then 
                MissLogic(event.target)
                client.color_log(247, 134, 244, string.format('Missed selected hitbox %s roll angle %s°', hitbox, angles))
            end
        end
    end
end)

client.set_event_callback('setup_command', function(cmd)
    local weapon = csgo_weapons[entity.get_prop(entity.get_player_weapon(entity.get_local_player()), 'm_iItemDefinitionIndex')]
    local condition = variables.conditiontable[localplayercondition(cmd)]
    local unsafeOptions = not ui.get(script.misc.unsafeoptions) or not contains(ui.get(script.misc.unsafeoptionsmultiselect), 'Extended pitch')

    matchmakingbypass()

    if not ui.get(script.main.menusex) or not ui.get(script.antiaim.antiaimenabled) or not ui.get(script.antiaim.antiaimenabledhotkey) or not ui.get(references.antiaimenabled) or weapon == nil then return end

    customslowmotion(cmd, 26)

    bodyyaw(cmd, (entity.get_prop(entity.get_local_player(), 'm_MoveType') or 0) == 9, weapon, condition)

    roll(cmd, condition)

    if cmd.chokedcommands ~= 0 then 

        if ui.get(condition.pitchoffset) ~= 0 then 
            cmd.pitch = unsafeOptions and math.min(ui.get(condition.pitchoffset), 45) or ui.get(condition.pitchoffset)
        end

        if condition.lowerbodyyaw ~= nil and ui.get(condition.lowerbodyyaw) == 'Opposite' and antiaim_funcs.get_desync(2) ~= nil and math.abs(antiaim_funcs.get_desync(2)) > 15 then
            cmd.in_forward = true
        end

        variables.rollvalue = cmd.roll 
    end

    ui.set(references.bodyyaw[1], ui.get(condition.bodyyaw))    

    if ui.get(condition.bodyyawinverter) == 'Manual' then 
        ui.set(references.bodyyaw[2], ui.get(script.misc.bodyyawinverter) and ui.get(script.misc.bodyyawinverterhotkey) and 180 or - 180) 
    elseif ui.get(condition.bodyyawinverter) == 'Dynamic' then 
        ui.set(references.bodyyaw[2], ui.get(condition.freestand) == 'Peek fake' and bodyyawinverter(180) or bodyyawinverter(-180)) 
    end
end)

client.set_event_callback('paint_ui', function()
    if not ui.get(script.main.menusex) or not ui.get(script.visuals.watermark) then return end

    local text = string.format('\a%ssex\adcdcdcff ● authorized to %s ● %s %s', string.format('%02X%02X%02X%02X', ui.get(script.visuals.watermarkcolorpicker)), string.lower(obex_data.username), string.lower(obex_data.build), 'build')
    local measure_text = vector(renderer.measure_text('rd', text))

    renderer.rectangle(variables.screen.x - 35 - measure_text.x - 3, 20 - 5 - 3, measure_text.x + 16, measure_text.y + 16, 12, 12, 12, 255)
    renderer.rectangle(variables.screen.x - 35 - measure_text.x - 2, 20 - 5 - 2, measure_text.x + 14, measure_text.y + 14, 80, 80, 80, 255)
    renderer.rectangle(variables.screen.x - 35 - measure_text.x - 1, 20 - 5 - 1, measure_text.x + 12, measure_text.y + 12, 12, 12, 12, 255)
    
    renderer.rectangle(variables.screen.x - 35 - measure_text.x, 20 - 5, measure_text.x + 10, measure_text.y + 10, 24, 24, 24, 255)
    renderer.rectangle(variables.screen.x - 35 - measure_text.x, 20 - 5, measure_text.x + 10, 1, ui.get(script.visuals.watermarkcolorpicker))
    renderer.text(variables.screen.x - 30, 21, 220, 220, 220, 255, 'rd', 0, text)
end)

client.set_event_callback('paint', function()
    if not ui.get(script.main.menusex) or not ui.get(script.visuals.antiaimdirection) or not entity.is_alive(entity.get_local_player()) or entity.get_prop(entity.get_game_rules(), 'm_bFreezePeriod') ~= 0 then return end

    local position = antiaim_funcs.get_desync(2) > 0 and {variables.screen.x/2 + 50, variables.screen.y/2 + 5, variables.screen.x/2 + 50, variables.screen.y/2 - 5, variables.screen.x/2 + 58, variables.screen.y/2} or {variables.screen.x/2 - 50, variables.screen.y/2 + 5, variables.screen.x/2 - 50, variables.screen.y/2 - 5, variables.screen.x/2 - 58, variables.screen.y/2}
    renderer.triangle(position[1], position[2], position[3], position[4], position[5], position[6], ui.get(script.visuals.antiaimdirectioncolorpicker))
end)
 
client.set_event_callback('paint', function()
    if not ui.get(script.main.menusex) or not ui.get(script.visuals.indicators) or not entity.is_alive(entity.get_local_player()) or entity.get_prop(entity.get_game_rules(), 'm_bFreezePeriod') ~= 0 then return end

    local r, g, b, a = ui.get(script.visuals.indicatorscolorpicker)
    local dpi_scale = tonumber(ui.get(references.dpi):sub(1, -2))
    local x, size, thickness = (dpi_scale), (dpi_scale/6) - 5, (dpi_scale/9) - 5

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Force body aim') and ui.get(references.forcebodyaim) then
        renderer.indicator(r, g, b, a, 'BAIM')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Maximum FOV') then 
        renderer.indicator(r, g, b, a, 'FOV ' .. ui.get(references.maximumfov) .. '°')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Minimum damage') then 
        if ui.get(references.minimumdamageoverride[1]) and ui.get(references.minimumdamageoverride[2]) then 
            renderer.indicator(255, 0, 50, a, 'DMG OVERRIDE')
        elseif ui.get(references.minimumdamage) <= 100 and ui.get(references.minimumdamage) > 0 then
            renderer.indicator(r, g, b, a, 'DMG ' .. ui.get(references.minimumdamage))
        elseif ui.get(references.minimumdamage) >= 101 then
            renderer.indicator(r, g, b, a, 'DMG HP + ' .. ui.get(references.minimumdamage)-100)
        elseif ui.get(references.minimumdamage) == 0 then
            renderer.indicator(r, g, b, a, 'DMG AUTO')
        end
    end
    
    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Automatic penetration') and ui.get(references.rageenabled[1]) and ui.get(references.automaticpenetration) then 
        renderer.indicator(255, 0, 50, a, 'AP')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Automatic fire') and ui.get(references.rageenabled[1]) and ui.get(references.rageenabled[2]) and ui.get(references.automaticfire) then 
        renderer.indicator(r, g, b, a, 'AF')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Duck peek assist') and ui.get(references.duckpeekassist) then 
        renderer.indicator(220, 220, 220, a, 'DUCK')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Quick peek assist') and ui.get(references.quickpeekassist[1]) and ui.get(references.quickpeekassist[2]) then 
        renderer.indicator(r, g, b, a, 'QP')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Force safe point') and ui.get(references.forcesafepoint) then 
        renderer.indicator(r, g, b, a, 'SP')
    end

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Resolver') and ui.get(script.resolver.resolver) and ui.get(script.resolver.resolverhotkey) then 
        renderer.indicator(240, 218, 132, a, 'RESOLVER')
    end

    variables.rollpercentage = lerp(variables.rollpercentage, math.abs(variables.rollvalue / 90), globals.frametime() * 7)
    local new_r, new_g, new_b = lerp(255, r, variables.rollpercentage), lerp(0, g, variables.rollpercentage), lerp(50, b, variables.rollpercentage)

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Extended angles') then 
        local y = renderer.indicator(new_r, new_g, new_b, a, 'ROLL')
        renderer.circle_outline((x + size) - 10, (y + size) + 5, 0, 0, 0, a, size, 0, 1, thickness)
        renderer.circle_outline((x + size) - 10, (y + size) + 5, new_r, new_g, new_b, a, size - 1, 0, variables.rollpercentage, thickness - 2)
    end

    variables.antiaimpercentage = lerp(variables.antiaimpercentage, math.min(math.abs(antiaim_funcs.get_desync(2)), 100)/100, globals.frametime() * 7)
    local new_r, new_g, new_b = lerp(255, r, variables.antiaimpercentage), lerp(0, g, variables.antiaimpercentage), lerp(50, b, variables.antiaimpercentage)

    if contains(ui.get(script.visuals.indicatorsmultiselect), 'Anti aim') then 
        local y = renderer.indicator(new_r, new_g, new_b, a, 'AA')
        renderer.circle_outline((x + size) - 35, (y + size) + 5, 0, 0, 0, a, size, 0, 1, thickness)
        renderer.circle_outline((x + size) - 35, (y + size) + 5, new_r, new_g, new_b, a, size - 1, 0, variables.antiaimpercentage, thickness - 2)
    end
end)

client.set_event_callback('run_command', function()
    if ui.get(script.main.menusex) and contains(ui.get(script.misc.antiaimdisablers), 'Game is not focused') then 
        ui.set(references.antiaimenabled, engineclient.is_app_active())
    end
end)

client.set_event_callback('net_update_end', function()
    local clantags = {'', 's', 'se', 'sex', 'sex ', 'sex ', 'sex ', 'sex', 'se', 's', ''}
    local clantag = clantags[math.floor(globals.tickcount() / 45) % #clantags+1]

    if not ui.get(script.main.menusex) or not ui.get(script.misc.clantagspammer) or ui.get(references.clantagspammer) or clantag == variables.clantagprev then return end

    variables.clantagprev = clantag
    client.set_clan_tag(clantag)
end)

ui.set_callback(script.misc.clantagspammer, function() 
    client.set_clan_tag('\0') 
end)

client.set_event_callback('paint_ui', function()
    antiuntrustedbypass(false)
end)

client.set_event_callback('shutdown', function()
    antiuntrustedbypass(true)
end)

client.set_event_callback('pre_config_save', function()
    antiuntrustedbypass(true)
end)

client.set_event_callback('paint_ui', function()
    local dpi_scale = tonumber(ui.get(references.dpi):sub(1, -2)) / 100
    local position = vector(ui.menu_position())
    local size = vector(ui.menu_size())
    local input = inboundary(position.x, position.y - math.floor(95 * dpi_scale), size.x, math.floor(95 * dpi_scale)) and ui.get(script.main.menusex) and ui.is_menu_open()

    enableInput(inputSystem, not input)
    
    if input then
        resetInputState(inputSystem)
    end

    if not ui.is_menu_open() or not ui.get(script.main.menusex) then return end

    window(position.x, position.y - math.floor(95 * dpi_scale), size.x, math.floor(95 * dpi_scale))
    tabs(position.x, position.y - math.floor(95 * dpi_scale), math.floor(75 * dpi_scale), math.floor(75 * dpi_scale), variables.tab_names)
end)

client.set_event_callback('paint_ui', function()
    ui.set_visible(script.resolver.resolver, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver')
    ui.set_visible(script.resolver.resolverhotkey, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver')
    ui.set_visible(script.resolver.targethitboxbruteforce, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver' and ui.get(script.resolver.resolver))
    ui.set_visible(script.resolver.offset, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver' and ui.get(script.resolver.resolver))
    ui.set_visible(script.resolver.dynamicinverter, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver' and ui.get(script.resolver.resolver))
    ui.set_visible(script.resolver.resolveinenemyconditon, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver' and ui.get(script.resolver.resolver))
    ui.set_visible(resetplayers, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Resolver' and ui.get(script.resolver.resolver))

    ui.set_visible(script.antiaim.antiaimenabled, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim')
    ui.set_visible(script.antiaim.antiaimenabledhotkey, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim')
    ui.set_visible(script.antiaim.antiaimcondition, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled))

    for index, value in ipairs({'Crouch', 'Stand', 'Move', 'Slow motion', 'In air'}) do 
        ui.set_visible(variables.conditiontable[index].pitchoffset, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value)
        ui.set_visible(variables.conditiontable[index].bodyyaw, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value)
        ui.set_visible(variables.conditiontable[index].bodyyawinverter, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value and ui.get(variables.conditiontable[index].bodyyaw) ~= 'Off')
        ui.set_visible(variables.conditiontable[index].freestand, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value and ui.get(variables.conditiontable[index].bodyyaw) ~= 'Off' and ui.get(variables.conditiontable[index].bodyyawinverter) == 'Dynamic')

        if variables.conditiontable[index].lowerbodyyaw ~= nil then
            ui.set_visible(variables.conditiontable[index].lowerbodyyaw, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value and ui.get(variables.conditiontable[index].bodyyaw) ~= 'Off')
        end

        ui.set_visible(variables.conditiontable[index].roll, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value and ui.get(variables.conditiontable[index].bodyyaw) ~= 'Off')
        ui.set_visible(variables.conditiontable[index].bodyyawoffset, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Anti aim' and ui.get(script.antiaim.antiaimenabled) and ui.get(script.antiaim.antiaimcondition) == value and ui.get(variables.conditiontable[index].bodyyaw) ~= 'Off' and ui.get(variables.conditiontable[index].roll))
    end

    ui.set_visible(script.visuals.watermark, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals')
    ui.set_visible(script.visuals.watermarkcolorpicker, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals')
    ui.set_visible(script.visuals.antiaimdirection, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals')
    ui.set_visible(script.visuals.antiaimdirectioncolorpicker, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals')
    ui.set_visible(script.visuals.indicators, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals')
    ui.set_visible(script.visuals.indicatorscolorpicker, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals')
    ui.set_visible(script.visuals.indicatorsmultiselect, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Visuals' and ui.get(script.visuals.indicators))

    ui.set_visible(script.misc.bodyyawinverter, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc')
    ui.set_visible(script.misc.bodyyawinverterhotkey, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc')
    ui.set_visible(script.misc.slowmotiontype, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc')
    ui.set_visible(script.misc.unsafeoptions, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc')
    ui.set_visible(script.misc.antiaimdisablers, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc')
    ui.set_visible(script.misc.unsafeoptionsmultiselect, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc' and ui.get(script.misc.unsafeoptions))
    ui.set_visible(script.misc.clantagspammer, ui.get(script.main.menusex) and variables.tab_names[variables.active_tab] == 'Misc')
end)