-- only retards change this links
print('https://discord.gg/b37eKFbkPE <- scriptleaks new server')
-- https://discord.gg/b37eKFbkPE <- scriptleaks new server
local ffi = require('ffi')
local vector = require('vector')
local table_new = require('table.new')

-- [x]==========================[ Player-List Control ]==========================[x]
local plylist = {
	reset = {
		ForceBodyYaw = {},
		ForceBodyYawCheckbox = {},
		CorrectionActive = {},
	},
	values = {
		ForceBodyYaw = {},
		ForceBodyYawCheckbox = {},
		CorrectionActive = {},
	},
	ref = {
		selected_player = ui.reference('PLAYERS', 'Players', 'Player list', false)
	}
}

function plylist.GetPlayer()
	return ui.get(plylist['ref'].selected_player)
end

function plylist.GetCorrection(ent)
	return plist.get(ent, 'Correction active')
end

function plylist.SetCorrection(ent, val)
	return plist.set(ent, 'Correction active', val)
end

-- Body yaw
function plylist.GetForceBodyYawCheckbox(ent)
	if not ent then
		return
	end
	
	return plist.get(ent, 'Force body yaw')
end

function plylist.SetForceBodyYawCheckbox(ent, val)
	if not ent or plylist['values'].ForceBodyYawCheckbox[ent] == val  then
		return
	end
	plist.set(ent, 'Force body yaw', val)
	plylist['values'].ForceBodyYawCheckbox[ent] = val
end

function plylist.GetBodyYaw(ent)
	if not ent then
		return
	end
	plylist['values'].ForceBodyYaw[ent] = plylist['values'].ForceBodyYaw[ent] or 0
	return plist.get(ent, 'Force body yaw value')
end

function plylist.SetBodyYaw(ent, val)
	if not ent or plylist['values'].ForceBodyYaw[ent] == val then
		return
	end
	plist.set(ent, 'Force body yaw value', val)
	plylist['values'].ForceBodyYaw[ent] = val
end

local function round( num, decimals )
	num = num or 0
	decimals = decimals or 0

	local mult = 10 ^ (decimals)
	return math.floor(num * mult + 0.5) / mult
end

local function between( v, min, max )
	v = v or false
	min = min or false
	max = max or false

	return (v and min and max) and (v > min and v < max) or false
end

local function normalize_yaw(yaw)
    return (yaw + 180) % 360 - 180
end

local function clamp( x, min, max )
	x = x or 0
	max = max or 0
	min = min or 0

	return math.min(math.max(min, x), max)
end

local function contains(tbl, val)
	for i=1,#tbl do
		if tbl[i] == val then
			return true
		end
	end
	return false
end

local function bin_value(value, num_bits)
    local scale_factor = 2 ^ num_bits
    local scaled_value = math.floor(value * scale_factor + 0.5)
    local bits = {}
    for i = num_bits, 1, -1 do
        local bit_value = 2 ^ (i - 1)
        if scaled_value >= bit_value then
            bits[i] = 1
            scaled_value = scaled_value - bit_value
        else
            bits[i] = 0
        end
    end
    return bits
end

local function normalize(value, min, max)
  return (value - min) / (max - min)
end

local function insert_first_index(tbl, value, maxSize)
    if #tbl >= maxSize then
        table.remove(tbl)
    end

    table.insert(tbl, 1, value)
end

local average = function( t )
	t = t or { }

	local sum = 0
	for _,v in pairs(t) do
		sum = sum + v
	end
	return sum / #t
end

local ent_c = {}
ent_c.get_client_entity = vtable_bind('client.dll', 'VClientEntityList003', 3, 'void*(__thiscall*)(void*, int)')

local animation_state_t =
	ffi.typeof

local animation_layer_t =
	ffi.typeof('\13\10\9\115\116\114\117\99\116\32\123\9\9\9\9\9\9\9\9\9\9\99\104\97\114\32\112\97\100\48\91\48\120\49\56\93\59\13\10\9\9\117\105\110\116\51\50\95\116\9\109\95\110\83\101\113\117\101\110\99\101\59\13\10\9\9\102\108\111\97\116\9\9\109\95\102\108\80\114\101\118\67\121\99\108\101\59\13\10\9\9\102\108\111\97\116\9\9\109\95\102\108\87\101\105\103\104\116\59\13\10\9\9\102\108\111\97\116\9\9\109\95\102\108\87\101\105\103\104\116\68\101\108\116\97\82\97\116\101\59\13\10\9\9\102\108\111\97\116\9\9\109\95\102\108\80\108\97\121\98\97\99\107\82\97\116\101\59\13\10\9\9\102\108\111\97\116\9\9\109\95\102\108\67\121\99\108\101\59\13\10\9\9\118\111\105\100\9\9\42\101\110\116\105\116\121\59\9\9\9\9\9\9\99\104\97\114\32\112\97\100\49\91\48\120\52\93\59\13\10\9\125\32\42\42\13\10')

local offsets = {
	animstate = 0x9960,
	animlayer = 0x2990
}

local function animstate(ent)
	local ent_ptr = ffi.cast('void***', ent_c.get_client_entity(ent))
	local animstate_ptr = ffi.cast("char*", ent_ptr) + offsets.animstate
	local entity_animstate = ffi.cast(animation_state_t, animstate_ptr)[0]
	return entity_animstate
end

local function get_animlayer(ent, layer)
	local ent_ptr = ffi.cast('void***', ent_c.get_client_entity(ent or entity.get_local_player()))
	local animlayer_ptr = ffi.cast('char*', ent_ptr) + offsets.animlayer
	local entity_animlayer = ffi.cast(animation_layer_t, animlayer_ptr)[0][layer]
	return entity_animlayer
end

local ACTIVATION_RESPONSE = 1

local NeuralNetwork = {
	transfer = function(x)
		return 1 / (1 + math.exp(-x / ACTIVATION_RESPONSE))
	end, --This is the Transfer function (in this case a sigmoid)

	transfer_inverse = function(y)
		return ACTIVATION_RESPONSE * math.log(y / (1 - y))
	end	--This is the sigmoid's inverse, or the "logit" function
}

function NeuralNetwork.create(_numInputs, _numOutputs, _numHiddenLayers, _neuronsPerLayer, _learningRate)
    _numInputs = _numInputs or 1
    _numOutputs = _numOutputs or 1
    _numHiddenLayers = _numHiddenLayers or math.ceil(_numInputs / 2)
    _neuronsPerLayer = _neuronsPerLayer or math.ceil(_numInputs * .66666 + _numOutputs)
    _learningRate = _learningRate or .5

    local network = setmetatable(
        {
            learningRate = _learningRate
        },
        {__index = NeuralNetwork}
    )

    network[1] = table_new(_numInputs, 0) --Input Layer
    for i = 1, _numInputs do
        network[1][i] = table_new(0, 0)
    end
    for i = 2, _numHiddenLayers + 2 do --plus 2 represents the output layer (also need to skip input layer)
        local neuronsInLayer = _neuronsPerLayer
        if i == _numHiddenLayers + 2 then
            neuronsInLayer = _numOutputs
        end
        network[i] = table_new(neuronsInLayer, 0)
        for j = 1, neuronsInLayer do
            network[i][j] = table_new(_numInputs, 1) -- pre-allocate for weights and bias
            network[i][j].bias = math.random() * 2 - 1
            local numNeuronInputs = #(network[i - 1])
            for k = 1, numNeuronInputs do
                network[i][j][k] = math.random() * 2 - 1 --return random number between -1 and 1
            end
        end
    end
    return network
end

function NeuralNetwork:forewardPropagate(...)
	local arg = {...}
	if #(arg) ~= #(self[1]) and type(arg[1]) ~= "table" then
		error(
			"Neural Network received " ..
				#(arg) .. " input[s] (expected " .. #(self[1]) .. " input[s])",
			2
		)
	elseif type(arg[1]) == "table" and #(arg[1]) ~= #(self[1]) then
		error(
			"Neural Network received " ..
				#(arg[1]) .. " input[s] (expected " .. #(self[1]) .. " input[s])",
			2
		)
	end
	local outputs = {}
	for i = 1, #(self) do
		for j = 1, #(self[i]) do
			if i == 1 then
				if type(arg[1]) == "table" then
					self[i][j].result = arg[1][j]
				else
					self[i][j].result = arg[j]
				end
			else
				self[i][j].result = self[i][j].bias
				for k = 1, #(self[i][j]) do
					self[i][j].result = self[i][j].result + (self[i][j][k] * self[i - 1][k].result)
				end
				self[i][j].result = NeuralNetwork.transfer(self[i][j].result)
				if i == #(self) then
					table.insert(outputs, self[i][j].result)
				end
			end
			self[i][j].active = self[i][j].result > 0.5
		end
	end
	return outputs
end


function NeuralNetwork:backwardPropagate(inputs, desiredOutputs)
	if #(inputs) ~= #(self[1]) then
		error(
			"Neural Network received " ..
				#(inputs) .. " input[s] (expected " .. #(self[1]) .. " input[s])",
			2
		)
	elseif #(desiredOutputs) ~= #(self[#self]) then
		error(
			"Neural Network received " ..
				#(desiredOutputs) ..
					" desired output[s] (expected " .. #(self[#self]) .. " desired output[s])",
			2
		)
	end
	self:forewardPropagate(inputs) --update the internal inputs and outputs
	for i = #self, 2, -1 do --iterate backwards (nothing to calculate for input layer)
		local tempResults = {}
		for j = 1, #self[i] do
			if i == #self then --special calculations for output layer
				self[i][j].delta = (desiredOutputs[j] - self[i][j].result) * self[i][j].result * (1 - self[i][j].result)
			else
				local weightDelta = 0
				for k = 1, #self[i + 1] do
					weightDelta = weightDelta + self[i + 1][k][j] * self[i + 1][k].delta
				end
				self[i][j].delta = self[i][j].result * (1 - self[i][j].result) * weightDelta
			end
		end
	end
	for i = 2, #self do
		for j = 1, #self[i] do
			self[i][j].bias = self[i][j].delta * self.learningRate
			for k = 1, #self[i][j] do
				self[i][j][k] = self[i][j][k] + self[i][j].delta * self.learningRate * self[i - 1][k].result
			end
		end
	end
end

local scr_w, scr_h = client.screen_size()
function NeuralNetwork:render()
	local neuronRadius = 3
	local neuronSpacing = 1
	local start_pos = (scr_w - ((scr_w/2) + ((scr_w/2)/2)))
	local layerSpacing = (scr_w - (scr_w/2 - start_pos)*2 - neuronRadius*4)/2
	local neuronColor = {r = 122, g = 122, b = 122, a = 60}
	local connectionColor = {r = 168, g = 229, b = 255, a = 50}
	local activeNeuronColor = {r = 255, g = 179, b = 38, a = 80}

	for layerIndex, layer in ipairs(self) do
		local layerX = (layerIndex - 1) * (neuronRadius * 2 + layerSpacing) + start_pos
		for neuronIndex, neuron in ipairs(layer) do
			local neuronY = (neuronIndex - 1) * (neuronRadius * 2 + neuronSpacing)
			local color = neuron.active and activeNeuronColor or neuronColor
			renderer.circle(layerX+neuronRadius, neuronY+neuronRadius, color.r, color.g, color.b, color.a, neuronRadius, 0, 1)
			if layerIndex > 1 then
				local previousLayer = self[layerIndex - 1]
				for previousNeuronIndex, previousNeuron in ipairs(previousLayer) do
					local previousNeuronY = (previousNeuronIndex - 1) * (neuronRadius * 2 + neuronSpacing)
					renderer.line(layerX, neuronY+neuronRadius, layerX - layerSpacing + neuronRadius, previousNeuronY, connectionColor.r, connectionColor.g, connectionColor.b, (neuron.active and previousNeuron.active) and connectionColor.a or 0)
				end
			end
		end
	end
end

function NeuralNetwork:train( trainingSet, attempts)
	while attempts > 0 do
		for i = 1,#trainingSet do
			self:backwardPropagate(trainingSet[i].input,trainingSet[i].output)
		end
		attempts = attempts - 1
	end
end

function NeuralNetwork:save()
	local data =
		"|INFO|FF BP NN|I|" ..
		tostring(#(self[1])) ..
			"|O|" ..
				tostring(#(self[#self])) ..
					"|HL|" ..
						tostring(#self - 2) ..
							"|NHL|" .. tostring(#(self[2])) .. "|LR|" .. tostring(self.learningRate) .. "|BW|"
	for i = 2, #self do -- nothing to save for input layer
		for j = 1, #self[i] do
			local neuronData = tostring(self[i][j].bias) .. "{"
			for k = 1, #(self[i][j]) do
				neuronData = neuronData .. tostring(self[i][j][k])
				neuronData = neuronData .. ","
			end
			data = data .. neuronData .. "}"
		end
	end
	data = data .. "|END|"
	return data
end

function NeuralNetwork.load(data)
	local dataPos = string.find(data, "|") + 1
	local currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
	local dataPos = string.find(data, "|", dataPos) + 1
	local _inputs, _outputs, _hiddenLayers, _neuronsPerLayer, _learningRate
	local biasWeights = {}
	local errorExit = false
	while currentChunk ~= "END" and not errorExit do
		if currentChuck == "INFO" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			if currentChunk ~= "FF BP NN" then
				errorExit = true
			end
		elseif currentChunk == "I" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			_inputs = tonumber(currentChunk)
		elseif currentChunk == "O" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			_outputs = tonumber(currentChunk)
		elseif currentChunk == "HL" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			_hiddenLayers = tonumber(currentChunk)
		elseif currentChunk == "NHL" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			_neuronsPerLayer = tonumber(currentChunk)
		elseif currentChunk == "LR" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			_learningRate = tonumber(currentChunk)
		elseif currentChunk == "BW" then
			currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
			dataPos = string.find(data, "|", dataPos) + 1
			local subPos = 1
			local subChunk
			for i = 1, _hiddenLayers + 1 do
				biasWeights[i] = {}
				local neuronsInLayer = _neuronsPerLayer
				if i == _hiddenLayers + 1 then
					neuronsInLayer = _outputs
				end
				for j = 1, neuronsInLayer do
					biasWeights[i][j] = {}
					biasWeights[i][j].bias =
						tonumber(string.sub(currentChunk, subPos, string.find(currentChunk, "{", subPos) - 1))
					subPos = string.find(currentChunk, "{", subPos) + 1
					subChunk = string.sub(currentChunk, subPos, string.find(currentChunk, ",", subPos) - 1)
					local maxPos = string.find(currentChunk, "}", subPos)
					while subPos < maxPos do
						table.insert(biasWeights[i][j], tonumber(subChunk))
						subPos = string.find(currentChunk, ",", subPos) + 1
						if string.find(currentChunk, ",", subPos) ~= nil then
							subChunk = string.sub(currentChunk, subPos, string.find(currentChunk, ",", subPos) - 1)
						end
					end
					subPos = maxPos + 1
				end
			end
		end
		currentChunk = string.sub(data, dataPos, string.find(data, "|", dataPos) - 1)
		dataPos = string.find(data, "|", dataPos) + 1
	end

	if errorExit then
		error("Failed to load Neural Network:" .. currentChunk, 2)
	end

	local network = setmetatable(
		{
			learningRate = _learningRate
		},
		{__index = NeuralNetwork}
	)
		
	network[1] = {} --Input Layer
	for i = 1, _inputs do
		network[1][i] = {}
	end
	for i = 2, _hiddenLayers + 2 do --plus 2 represents the output layer (also need to skip input layer)
		network[i] = {}
		local neuronsInLayer = _neuronsPerLayer
		if i == _hiddenLayers + 2 then
			neuronsInLayer = _outputs
		end
		for j = 1, neuronsInLayer do
			network[i][j] = {bias = biasWeights[i - 1][j].bias}
			local numNeuronInputs = #(network[i - 1])
			for k = 1, numNeuronInputs do
				network[i][j][k] = biasWeights[i - 1][j][k]
			end
		end
	end
	return network
end

-- Function to create UI elements and set visibility
local function create_ui_element(element_type, category, name, args, visible, callback)
    local element
    if element_type == 'slider' then
        element = ui.new_slider(category, 'A', name, args[1], args[2], args[3], true, "", args[4])
    elseif element_type == 'multiselect' then
        element = ui.new_multiselect(category, 'A', name, args)
    elseif element_type == 'button' then
        element = ui.new_button(category, 'A', name, args or function() end)
    end
    ui.set_visible(element, visible)
	
	if callback and element_type ~= 'button' then
		ui.set_callback(element, callback)
	end

    return element
end

-- Configuration variables
local mul, binary_size = 1000000000, 20  -- Multiplier and size of binary representation
local nn_preset = '|INFO|FF BP NN|I|40|O|1|HL|1|NHL|10|LR|0.3|BW|-1.1559066392366e-05{-1.1202450064138,-0.43692358428945,-0.13930987099988,1.2473693747317,-1.0512952920563,1.3270403255733,-1.3048390365862,0.67144977762124,0.22895362182248,-0.80409868646125,0.80970370419299,-0.094876011124505,1.8085297300312,-3.1213051697127,0.15564586269487,1.243941161686,-0.63451864091975,0.85274078529101,1.2094977572229,0.62863360591113,-0.65126689180398,-0.59910446978325,-0.27530302959635,-0.37900970996814,-0.45176552529037,0.55370533700818,0.64138597420234,0.55680960465419,-0.61526474930497,0.3636652929368,-0.065175113965139,-0.36903881731361,0.12405837818835,-0.73977745618948,0.63540725046327,-0.45414746029774,0.79157121985721,-0.42317748048187,0.079063967276199,0.94263076966404,}3.1873687881385e-07{-0.33085972681749,1.3974765045622,-0.53805929633813,-0.67028441463719,0.9546600346727,-0.20504330455771,0.14603469737588,-0.22584991835587,-0.59708982950384,-0.096585443153326,-0.40914869100385,0.15252807361841,0.76983088009555,0.1135895273262,-0.046635440565021,0.052936898188129,0.43810347271126,0.7730153833329,0.66231510990403,0.58338534121945,0.86213212067021,0.87378351704409,-0.91200616034745,0.96259979650566,0.48645308856345,-0.62811218755657,0.37356359696407,0.85840784699586,0.53809980261285,0.67041507564095,-0.28260659218288,-0.83469318664078,-0.71786782846342,0.20177599197934,0.5580614689448,-0.14722750093401,-0.8674737129836,-0.12700793895558,0.18537378239585,0.64549671395507,}4.2982839371136e-06{-0.25445981857133,0.13249673996283,-0.2718035127553,-0.72430954461389,1.4232117247034,-0.33952965981642,1.6825855658027,0.4430270099209,0.15716956679741,1.1364623417016,-1.2811299615557,-2.467200066115,-0.36174012131967,2.7037878931814,-0.34114087452533,-1.7333547565663,-1.0167292273294,-0.80970388354612,0.1237717895204,0.36641949687082,-0.11871201536506,-0.8181383753111,-0.25342722612542,0.38346749694153,0.33325877812144,-0.26414654291822,0.14819168394517,-0.077031835047591,-0.16050719194423,0.21618455873618,-0.54693088064852,-0.23786000247078,-0.59803675764093,1.0923008303097,0.17366075046142,0.54290923518083,0.60140644190717,0.05974144182409,-0.10139665145658,-0.15275546046583,}5.1234789449184e-08{-0.18017558513543,-0.18146265689724,0.19828598581944,0.44190756360128,-0.22332667322822,0.30169325630054,0.97082021620136,-0.23322485853026,-0.65912975643021,1.3692117676815,-0.72319483106828,-1.0883591535332,-0.46589031854902,-0.073792583922551,0.36310819165966,-0.0053283265286844,0.47961491373351,1.0974451087232,-0.70320902143542,-0.087953350778685,1.0191600187128,0.17360115911924,0.069900569787577,-0.16813379753614,0.58380508079408,0.059608837989604,-0.73024469728429,0.13274871928125,0.11332417366227,-0.31200221713205,0.23947432231531,1.0454803228932,0.8758172416385,-0.46659133456749,-0.01452242480419,0.48269143866338,-0.1505119234022,-0.53428273563778,1.1124781201795,0.7158579485146,}-1.5923623174481e-07{0.85339968189486,-0.0031680515790833,-0.39202082971167,-0.01225315528781,-0.57344056356219,1.2631862215949,0.047128925306942,-1.4902526401776,-0.090282461185964,0.0051083609777073,0.31153197386897,0.17016429041934,1.659032504245,-0.73128928650677,0.4670939328216,0.028794360062452,-0.835364828446,1.0444326143459,0.32932243316448,0.19423058285795,0.064800248455427,0.44604158652933,-0.88846000046558,0.26087480381279,-0.31110295966076,-0.29340717912116,0.3893207825555,-0.12011290761793,0.74345863790375,0.91991374081139,0.58451763390618,1.0669202255176,0.9151380516102,-0.48160558880747,0.92929454785814,0.28369332396192,0.51683013032091,-0.90813461356797,0.11724769174449,-0.95568308718194,}-2.6915435839416e-06{0.15231248617089,-0.53598711108745,-1.0728578555855,0.36259922426732,0.031027769372601,0.26773876558409,0.64368096063365,-0.25774347079668,-0.54249611885042,-0.37569923896152,1.3102568839229,1.3606470022779,1.315893134815,-1.3041749157242,-0.11526832004411,0.92184110918755,-0.093661224545601,-0.88577712061228,0.63818458911472,-0.26442642654138,-1.1176712678031,0.25360377550678,0.3515439997362,-0.69789425814896,-0.4687938342845,0.82667253233937,0.467816069347,0.44591920582718,0.05545307746697,-0.60233019250446,-0.71215641270195,-0.53751447248309,-0.45065874409576,0.42354298216433,-0.0014788537422028,-0.73425343246317,0.47007202514344,-0.46357977355352,-1.2892936180133,-0.048225560467511,}-2.2203811792948e-07{-0.35923888252987,-0.20438667385787,-0.19124147250491,0.76882231523259,0.60367368248321,-1.0389538006775,-0.61313909750184,0.40870492709999,-0.72515795426014,-1.0689391477852,0.87347072473302,0.91819843344018,-0.20062971447343,0.40036925489807,-0.041060377554657,-0.49109735768139,-0.66679007149362,-0.36921711689963,0.22104603934927,-0.16034076612188,0.14148837206228,0.30385765762427,0.77164356236879,0.84512822072436,0.45189599713861,-0.32517192253332,0.97068735065427,0.93647534203954,0.88377609020537,-0.70700992716569,0.93760202670951,0.059062141340008,0.54097694578813,-0.53362426864334,-0.33198341878765,-0.84667381438854,1.095885343958,0.66440180345932,-0.53341022968168,-0.31280200102565,}-7.7144999220949e-08{0.2099088837233,0.41124969823218,0.26237623960241,0.010632764815006,-0.69550129162016,1.0309324303167,-2.3945268806069,-1.0900830278076,-0.97074897000463,-0.64712273581935,-0.14397363140143,-0.62111675762407,-0.50609306043648,-1.1836989201552,-0.27635932911943,-0.021133962558542,-0.71273397289237,-0.76600974074245,-0.25077719867282,-0.81734393863832,0.47239605660163,-0.66353076564059,0.86867198848571,-0.79615191780073,-0.0022895055875506,0.64980972601548,-0.16107170872416,0.80976610335076,0.94472563914824,-0.53645065120444,0.030698189248155,0.34301072287199,-0.3691108833124,-0.12511525153045,-1.1246609938741,-0.41765170598958,-0.30162418790371,-0.28050202302667,0.84343770289887,0.34903091158625,}8.0352707438157e-08{-0.51405999934921,0.0044459209144511,0.30461398228033,0.95000878369673,0.16155907388394,0.42705049012585,0.65182535858805,0.65344203842455,0.27293328175436,1.1721316374074,-0.034035069744857,-0.43404730540217,-0.68429164676573,-0.32332730912654,0.56993065489951,-0.014621209625948,-0.11099663675097,1.3579581445072,-0.27863263894567,-0.55714914897038,-0.60478575969188,-0.49545399672518,0.71208007180686,0.48439443134997,0.12846042466121,0.55861815908385,1.0799294894551,0.12195062728068,-0.90166846045791,-0.51862481544792,-0.24235415755116,-0.19301095955542,1.1633646789943,0.84032850506353,-0.57698419406506,0.686434184688,0.37527363998036,0.010136967906187,-0.39289912738176,-0.52391641291929,}3.9142267087638e-06{-0.42098484784357,-0.25546825964372,-0.76476298796809,0.8142147066408,1.5127730763427,-0.75631497465614,0.28598238176559,-0.33012846499604,-0.91616485085432,0.81551319574826,0.53773987298677,0.26636333938819,-1.0291460002793,1.1510905341627,0.66077086811555,-1.0384144522199,-0.32567602055811,1.0394917903945,0.77196468624017,0.50600831732912,-0.26120500875638,-0.95893895895136,-0.064147992016425,0.072218774618524,-1.1388010084736,-0.73853337106534,-0.24610589258136,0.02514605332215,0.54960616687421,0.75275549013141,0.67453346700391,-0.60164983523389,0.50611628328965,-0.58695247773995,0.54917372627756,-0.32598410448479,0.57677346537166,0.77028748812782,-0.72799863028805,0.51131434164369,}-9.345162504613e-06{5.293159010446,-0.89468979823207,-5.2575120035085,-1.1118852011227,1.61133844062,3.2848256677548,0.1746561427601,3.4871115367329,-0.44974464033245,-2.588796188171,}|END|'
local nn_blank = '|INFO|FF BP NN|I|40|O|1|HL|1|NHL|10|LR|0.3|BW|-0.93686904343645{0.65860249354619,-0.55093759956191,-0.085488857280854,0.86134596533424,0.53907169796382,-0.36225928210421,-0.8544376789861,-0.068779758841607,0.17521620272266,0.89223798081995,-0.66998048219643,0.3385008968516,0.48586047969959,0.088816337421721,-0.20585504630895,-0.96429498997576,0.97512873375287,0.010210821454058,-0.35230395088441,-0.19598953598858,0.58161291966794,0.38323669388203,-0.824302608359,0.85220236657664,-0.49081616973603,-0.8546704645301,-0.99080536795593,-0.68969322237917,0.95832016981114,-0.12997079391403,0.4600813783716,0.10222621790176,0.37325979566196,0.844413620672,-0.49226322302289,0.2119774155036,0.55312917764715,0.81744148976723,-0.12362652189818,0.45840618148497,}0.6163986436929{-0.85512835773935,0.62336641420222,0.37694005636703,0.56104289665486,0.52527993280902,0.67023563143015,-0.69203693855433,-0.10679797872587,0.42032240478484,0.5773769077161,-0.033996271952736,-0.81861612343975,0.37403396197775,0.4026812173839,-0.37057325476036,-0.01363581688467,0.78602832753187,-0.8227318308381,0.26026774976016,0.74370609887907,-0.21098619498754,-0.72663212807498,-0.658207907822,-0.59521391656078,-0.57163830523715,0.3702562016375,0.88403996634637,0.055426863238811,0.93421123510894,-0.54821844093813,-0.84460293343869,0.89747992411648,-0.79300458881776,0.1853810772023,-0.20243529088114,-0.25262978517629,0.86704661478582,0.065460435364584,-0.31045678674236,0.40246417833772,}0.39790297263159{-0.62168647743986,0.26856547684127,-0.89317779509875,-0.12521817778254,-0.73032062211949,0.4556116941346,-0.76058531908096,-0.30284877017609,0.76553169283885,-0.42586641335947,0.2287210889369,-0.24517497191091,-0.69555530288281,0.45509972092011,0.14074819225824,-0.83507758567298,0.69969286132842,-0.26101959326786,0.30230998375133,-0.45202366917797,-0.27342332920811,0.25962179529927,0.84956441856052,0.49011091542067,0.19529037672127,0.71486633983629,0.47925610756697,-0.55870442624941,-0.66125804946936,0.38173452753024,-0.58845831871186,-0.067495066864782,0.36559418147231,-0.70008992886013,-0.082954547764263,-0.94073529424351,0.35853662025017,-0.18049741521472,-0.73969781017117,-0.46418196757937,}-0.11009690640545{0.93508295914959,-0.43888628530304,-0.13484611378779,-0.19518204868278,-0.21672974734769,0.42982304689326,0.73089782973689,0.048042703530428,0.717573229317,0.11331885101582,-0.91387887973058,-0.24755843787355,0.97799850700569,0.051562325400469,-0.20515274785811,-0.23431163568919,-0.7941237298951,0.37766785997572,0.69355188458555,0.43238593100331,-0.003891183339098,-0.62876848626616,0.1221092078154,-0.36448065038499,0.21140015981695,-0.17935850723446,-0.44078525252753,-0.88783134246791,-0.094393108370503,-0.17812453429963,-0.80822874330187,-0.38130442835115,0.11751744922518,-0.72408455143708,0.058013708501568,-0.55217776289818,0.69159492523912,0.69453588330327,-0.14653305874224,-0.76036367245539,}0.39478151355886{-0.75335418316717,0.78173318810982,0.60716161027706,0.84989324987602,0.027338987521652,0.40050163400498,0.46328496042628,0.31321517995469,0.73862811546343,0.15359205404652,-0.67195644407467,-0.7875491316033,0.10267989685801,0.0055483457015639,0.68227223377413,-0.90464198201393,-0.12267765863326,0.48473853020126,0.99979096211181,-0.32287581639714,-0.70100496861881,0.32515589970421,-0.71628128044458,0.93611040433604,0.22776796135255,-0.77780775057135,-0.65475506102496,0.31678029813109,0.87284653057766,-0.44125856583525,-0.076026553436074,0.41215506706537,0.16159338295198,0.82595760508279,0.60620320921477,-0.69637686397346,-0.96615966295357,-0.063146910731375,0.95251771060958,-0.30595159484548,}-0.46327569172073{-0.61796065696887,-0.74372935052069,0.90696300063416,0.27111555053155,-0.86332094588476,-0.049670378066236,0.91306018963708,0.56306967815977,-0.49617788362895,0.5890995056541,0.55416359280457,-0.1665144790789,-0.022963455556122,-0.48354437894463,-0.81262744658151,-0.49332252018538,-0.30593095405112,0.9991257455604,0.32878744014565,-0.35650882047982,-0.20426241509254,-0.80013403111775,-0.76075769767012,-0.29811784953197,-0.56159203735909,-0.92982598543615,0.39789433484356,-0.18567433153045,-0.44188562452422,-0.38877284562303,-0.0051825367508371,0.39777814038485,0.46611958329266,-0.091590986320115,-0.90092822493634,-0.41945968250147,-0.6824943603432,-0.32311711081685,0.81179044897247,0.54471769297952,}-0.52769260254563{0.55602418049698,-0.21032912062054,-0.58577054245539,-0.70613158251543,-0.79801714522568,-0.51255366539465,-0.43579904507502,-0.4286732521697,0.93967890550534,-0.74107366781698,0.79047044339273,0.16330776867702,0.11929178422224,-0.5727723232206,0.60787038317702,0.42652787325736,-0.95728817410938,-0.24006080153871,-0.78651953977371,-0.23716775999413,-0.71255229917811,0.29768605327665,-0.55723532540477,0.78457810266517,-0.88570517475311,-0.79689531935021,0.83799241245034,-0.23980225511348,0.50563854394355,-0.78738790709486,0.51924795586868,0.92885688026778,-0.66667836726072,-0.17215975379536,0.2006450661272,0.41235748918311,-0.87379219389341,0.36809277901883,-0.72529674097256,-0.75295127190538,}-0.093051340117079{0.31136440631295,-0.88099537476897,0.59524794314673,-0.40941003609243,0.77894033114231,-0.21306144083557,0.51463688306536,-0.13220003327716,-0.59579726276073,0.075254780170671,-0.40976343358461,0.21797782846281,0.43071660786193,-0.91949446895957,-0.68914147237825,0.69209034372894,0.28755868545791,-0.91678509588342,0.10325346952155,-0.8824004536599,0.0065544595735956,-0.042026199322932,-0.73656734856239,0.32188049745517,-0.27453705512013,-0.10333582274026,-0.49130636830332,0.58694295917699,0.63317068038494,-0.42988485498717,0.28598998612218,-0.31676676007228,0.41351037561927,0.95161377437299,0.5974526692978,-0.70779239520847,0.26619101269532,0.4992148172816,-0.83312168234421,-0.423954871039,}-0.20048539825744{-0.17330999053455,0.46606047648815,-0.87025254985342,0.48065288174231,0.83501068354483,-0.88804598604815,0.99123263603474,-0.85117414330312,0.13853893745112,0.10393931447879,0.22798819793186,0.62071866901923,-0.47119743909126,-0.79798277269789,-0.38748586556735,-0.91551806864376,0.2805353776144,0.75647968862541,0.30395641375337,-0.18570839699225,-0.64495705497961,-0.49182650138779,0.57368917127946,0.85471880185249,-0.25691122582664,0.81278188035517,-0.75125439569309,0.03608324508357,-0.79058281629842,-0.19865332201346,-0.53387082275029,0.078878572320046,-0.36848262225406,0.67755482644944,0.15742195306407,0.47586334354884,-0.43736655085445,-0.055684250775001,-0.68858619465421,-0.0057683112530058,}0.50941912970969{-0.31138065170086,0.10391256640598,0.70360592824683,-0.90370552388287,0.21811758012288,0.60467621438711,0.91918928025801,-0.57114167282836,-0.9694247732045,0.074233564313799,-0.39902085900249,0.44510862595552,-0.48247728896108,-0.6112577268886,0.21898114662785,-0.92632220865013,0.41676549503316,0.56554619923383,0.68711020413627,0.4692054312465,-0.21583925232799,0.1796707258041,0.4501695098872,-0.97500842972427,-0.46416249901026,-0.79368691818369,0.83084857540797,0.63318467188757,-0.79547553706465,-0.11710705920568,0.59498837696272,0.59295553372659,0.0089063701337357,0.0045756454231611,0.19553628989219,-0.72872280536205,-0.019436927048084,-0.48682752527193,0.96572208233122,0.11328373547299,}0.7561447676892{0.97539606109826,-0.12624359286462,-0.57414105778941,0.084207495202474,0.54148156316844,0.70124333331834,0.64835150336278,0.52850986805422,0.080003997896295,0.7340720151248,}|END|'

-- Initialize a neural network with the given topology
local nn_network = NeuralNetwork.create(40, 1, 1, 10, 0.3)


-- Create UI elements
local options_multibox = create_ui_element('multiselect', 'LUA', '\a0078FFFFMario\'s\aFFFFFFFF NN\aCACACAFF Resolver\a0078FFFF', {'Enable', 'Visualisation'}, true)
local attempts_slider = create_ui_element('slider', 'LUA', 'Attempts', {1, 1000, 10, 1}, false)
local repeat_cycle = create_ui_element('slider', 'LUA', 'Repeat cycle', {1, 10, 10, 1}, false)
local repeat_speed = create_ui_element('slider', 'LUA', 'Repeat speed', {1, 10, 1, 0.1}, false)

local buttons = {
    'Auto Train NN', 'Stop Auto Train NN', 'Train Left NN', 'Stop Train Left NN',
    'Train Right NN', 'Stop Train Right NN', '\a0F8100FFRun NN', 'Stop NN',
	'Save NN', 'Load NN', 'Load Pre-Trained NN', 'Reset NN'
}

local ui_callbacks = {
	save_nn = function()
		print("Saving Neural Network as 'neuralNet.txt'...")
		writefile("neuralNet.txt", nn_network:save())
	end,
	load_nn = function()
		print("Loading Neural Network State...")
		nn_network = NeuralNetwork.load(readfile("neuralNet.txt"))
	end,
	['load_pre-trained_nn'] = function()
		print("Loading Neural Network pre-trained...")
		nn_network = NeuralNetwork.load(nn_preset)
	end,
	reset_nn = function()
		print("Resetting Neural Network...")
		nn_network = NeuralNetwork.load(nn_blank)
	end
}

local button_elements = {}
for _, button_name in pairs(buttons) do
	format_name = button_name:lower()
	format_name = format_name:gsub(" ", "_")
	format_name = format_name:gsub("\a0f8100ff", "")

    button_elements[format_name] = create_ui_element('button', 'LUA', button_name, ui_callbacks[format_name], false)
end

local function log(...)
    local debug_logs = contains(ui.get(options_multibox), 'Debug logs')
    if not debug_logs then return end
    print(...)
end

-- Render the neural network if the corresponding checkbox is checked in the UI
local function render_nn()
	local visualize = contains(ui.get(options_multibox), 'Visualisation')
	if visualize then
		nn_network:render()
	end
end

local resolver = {
	cache = {
        resolver_yaw_pattern_count = { },
        resolver_last_yaw_diff = { },
        resolver_pattern_yaw = { }, 
        animlayer = { },
        animlayer_c = { },
    },
    data = { },
    records = { },
    record_max_ticks = 8,
    record_old_tickcount = { },
    layer_data = { },
}
function resolver.set_round_data()
    return {
        antiaim = {
            ['extended'] = false,
            ['fake_yaw'] = 0,
            ['break_lc_count'] = 0,
            ['eye_yaw'] = false,
            ['jitter'] = false,
            ['mode'] = 'Legit',
        },
        animlayer = {
            ['is_desync'] = false,
            ['eye_yaw'] = false,
        },
        props = {
            ['m_flChokedPackets'] = 0,
            ['m_flLowerBodyYawTarget'] = 0,
            ['m_flLowerBodyYawMoving'] = 0,
            ['m_flLowerBodyYawStanding'] = 0,
            ['m_flLowerBodyDelta'] = 0,
            ['m_flOldEyeYaw'] = 0,
            ['m_angEyeAngles'] = vector(0, 0, 0),
            ['velocity'] = {},
            ['m_flVelocity2D'] = 0,
            ['lowdelta'] = false,
            ['highdelta'] = false,
            ['correction'] = nil,
            ['should_resolve'] = false,
            ['pref_packet'] = 0,
            ['bad_packets'] = 0,
            ['clean_packets'] = 0,
            ['m_flEyeYaw'] = 0,
            ['m_flGoalFeetYaw'] = 0,
            ['m_flOldGoalFeetYaw'] = 0,
            ['m_flGoalFeetDelta'] = 0,
            ['m_flFixedGoalFeetDelta'] = 0,
            ['m_flCurrentFeetYaw'] = 0,
            ['m_flServerFeetDelta'] = 0,
            ['m_flServerFeetYaw'] = 0,
            ['m_flLastChokedPackets'] = 0,
            ['m_flLastMaxChokedPackets'] = 0,
            ['m_flMaxChokedPackets'] = 0,
            ['m_flOldServerFeetYaw'] = 0,
            ['m_flDesync'] = 0,  
        },
    }
end

function resolver.get_player_records(ent)
    if ent ~= nil and resolver.records[ent] ~= nil then
        resolver.records[ent] = resolver.records[ent] or 0
        return resolver.records[ent]
    end
end

function resolver.reset(ent)
    resolver.records[ent] = { }
end

function resolver.update_player_record_data(ent)
    local player_record = resolver.records[ent]
    local sim_time = entity.get_prop(ent, "m_flSimulationTime")

    if player_record == nil then
        resolver.records[ent] = { }
        player_record = resolver.records[ent]
    end
    resolver.record_old_tickcount[ent] = resolver.record_old_tickcount[ent] or globals.servertickcount()

    if sim_time > 0 and (#player_record == 0 or (#player_record > 0 and player_record[1].simulation_time ~= sim_time)) then
        local anim_layer3 = get_animlayer(ent, 3)
        local anim_layer6 = get_animlayer(ent, 6)
        local anim_layer12 = get_animlayer(ent, 12)
        local anim_layer = {
            [3] = {
                m_flCycle = anim_layer3.m_flCycle,
                m_flWeight = anim_layer3.m_flWeight,
                m_flPlaybackRate = anim_layer3.m_flPlaybackRate,
            },
            [6] = {
                m_flCycle = anim_layer6.m_flCycle,
                m_flWeight = anim_layer6.m_flWeight,
                m_flPlaybackRate = anim_layer6.m_flPlaybackRate,
            },
            [12] = {
                m_flCycle = anim_layer12.m_flCycle,
                m_flWeight = anim_layer12.m_flWeight,
                m_flPlaybackRate = anim_layer12.m_flPlaybackRate,
            },
        }

        local new_record = {
            animlayer = anim_layer,
            m_flVelocity2D = resolver.data[ent].props['m_flVelocity2D'],
            m_flEyeYaw = resolver.data[ent].props['m_flEyeYaw'],
            m_flGoalFeetYaw = resolver.data[ent].props['m_flGoalFeetYaw'],
            m_flCurrentFeetYaw = resolver.data[ent].props['m_flCurrentFeetYaw'],
            m_flServerFeetDelta = resolver.data[ent].props['m_flServerFeetDelta'],
            simulation_time = entity.get_prop(ent, "m_flSimulationTime"),
            m_iTickCount = globals.servertickcount()
        }

        for i = resolver.record_max_ticks, 2, -1 do 
            resolver.records[ent][i] = resolver.records[ent][i-1]
        end
        resolver.record_old_tickcount[ent] = globals.servertickcount()
        resolver.records[ent][1] = new_record
    end
end

-- Create tables for storing animation layer and velocity records for entities
local animlayer_rec_t = {}
local animlayer_average_t = {}
local velocity_rec_t = {}

-- Function to retrieve animation layer record of an entity
local function get_animlayer_rec(ent)
	animlayer_rec_t[ent] = animlayer_rec_t[ent] or 0
	return animlayer_rec_t[ent]
end

-- Function to retrieve velocity record of an entity
local function get_velocity_rec(ent)
	velocity_rec_t[ent] = velocity_rec_t[ent] or 0
	return velocity_rec_t[ent]
end

function resolver.animlayer_preference(ent, layer)
    layer = layer or 1
    local anim_layer = get_animlayer(ent, layer)
    local anim_layer6 = get_animlayer(ent, 6)
    local anim_state = animstate(ent)

    local m_flLastClientSideAnimationUpdateTimeDelta = math.abs(anim_state.m_iLastClientSideAnimationUpdateFramecount - anim_state.m_iLastClientSideAnimationUpdateFramecount)

    local layers_c = {
        m_flCycle = 1,
        m_flWeight = 1,
        m_flPlaybackRate = 1,
    }
    local layers_t = {
        m_flPrevCycle = anim_layer.m_flCycle,
        m_flCycle = anim_layer.m_flCycle,
        m_flPrevWeight = anim_layer.m_flWeight,
        m_flWeight = anim_layer.m_flWeight,
        m_flPrevPlaybackRate = anim_layer.m_flPlaybackRate,
        m_flPlaybackRate = anim_layer.m_flPlaybackRate,
    }

    resolver.cache.animlayer_c[ent] = resolver.cache.animlayer_c[ent] or {}
    resolver.cache.animlayer_c[ent][layer] = resolver.cache.animlayer_c[ent][layer] or layers_c
    resolver.cache.animlayer[ent] = resolver.cache.animlayer[ent] or {}
    resolver.cache.animlayer[ent][layer] = resolver.cache.animlayer[ent][layer] or layers_t

    if anim_layer.m_flCycle ~= resolver.cache.animlayer[ent][layer].m_flCycle then
        resolver.cache.animlayer[ent][layer].m_flPrevCycle = resolver.cache.animlayer[ent][layer].m_flCycle
        resolver.cache.animlayer[ent][layer].m_flCycle = anim_layer.m_flCycle

        if resolver.cache.animlayer_c[ent][layer].m_flCycle == 3 then
            resolver.cache.animlayer_c[ent][layer].m_flCycle = 1
        else
            resolver.cache.animlayer_c[ent][layer].m_flCycle = resolver.cache.animlayer_c[ent][layer].m_flCycle + 1
        end
    end
    if anim_layer.m_flWeight ~= resolver.cache.animlayer[ent][layer].m_flWeight then
        resolver.cache.animlayer[ent][layer].m_flPrevWeight = resolver.cache.animlayer[ent][layer].m_flWeight
        resolver.cache.animlayer[ent][layer].m_flWeight = anim_layer.m_flWeight

        if resolver.cache.animlayer_c[ent][layer].m_flWeight == 3 then
            resolver.cache.animlayer_c[ent][layer].m_flWeight = 1
        else
            resolver.cache.animlayer_c[ent][layer].m_flWeight = resolver.cache.animlayer_c[ent][layer].m_flWeight + 1
        end
    end
    if anim_layer.m_flPlaybackRate ~= resolver.cache.animlayer[ent][layer].m_flPlaybackRate then
        resolver.cache.animlayer[ent][layer].m_flPrevPlaybackRate = resolver.cache.animlayer[ent][layer].m_flPlaybackRate
        resolver.cache.animlayer[ent][layer].m_flPlaybackRate = anim_layer.m_flPlaybackRate

        if resolver.cache.animlayer_c[ent][layer].m_flPlaybackRate == 3 then
            resolver.cache.animlayer_c[ent][layer].m_flPlaybackRate = 1
        else
            resolver.cache.animlayer_c[ent][layer].m_flPlaybackRate = resolver.cache.animlayer_c[ent][layer].m_flPlaybackRate + 1
        end
    end
end

function resolver.get_delta_size(ent)
    local anim_layer3 = get_animlayer(ent, 3)
    local anim_layer6 = get_animlayer(ent, 6)

    local records = resolver.get_player_records(ent)
    if not records[1] or not records[2] or not records[8] then return end

    local current_record, next_record = records[1], records[2]
    local goalfeet_diff = normalize_yaw(current_record.m_flGoalFeetYaw - next_record.m_flGoalFeetYaw)
    local eyeyaw_diff = math.abs(current_record.m_flEyeYaw)-math.abs(next_record.m_flEyeYaw)
    local cur_feetyaw = math.abs(current_record.m_flCurrentFeetYaw)-math.abs(next_record.m_flCurrentFeetYaw)

    resolver.cache.resolver_pattern_yaw[ent] = resolver.cache.resolver_pattern_yaw[ent] or 0
    resolver.cache.resolver_yaw_pattern_count[ent] = resolver.cache.resolver_yaw_pattern_count[ent] or 0
    resolver.cache.resolver_last_yaw_diff[ent] = resolver.cache.resolver_last_yaw_diff[ent] or 0

    if (math.abs(goalfeet_diff) > 0) and (current_record.m_flVelocity2D <= 1.02 and next_record.m_flVelocity2D <= 1.02) then      
        local count_max = resolver.data[ent]['animlayer']['eye_yaw'] and 1 or 3
        if math.abs(goalfeet_diff) == resolver.cache.resolver_last_yaw_diff[ent] then
            resolver.cache.resolver_yaw_pattern_count[ent] = resolver.cache.resolver_yaw_pattern_count[ent] + 1
        elseif resolver.cache.resolver_yaw_pattern_count[ent] >= count_max then
            resolver.cache.resolver_pattern_yaw[ent] = math.abs(goalfeet_diff)
            resolver.cache.resolver_yaw_pattern_count[ent] = 0
        else
            resolver.cache.resolver_yaw_pattern_count[ent] = 0
        end

        resolver.cache.resolver_last_yaw_diff[ent] = math.abs(goalfeet_diff)
    end

    if resolver.data[ent].props['m_flVelocity2D'] <= 1.02 then

        if not resolver.data[ent]['animlayer']['eye_yaw'] then
            if resolver.data[ent].props['highdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 60
            elseif between(anim_layer6.m_flCycle, 0.500090, 0.500100) and resolver.data[ent].props['lowdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 45
            elseif (((between(anim_layer6.m_flCycle, 0.350050, 0.350150) 
                and between(resolver.cache.animlayer[ent][6].m_flPrevCycle, 0.500050, 0.591000)) 
                or (between(anim_layer6.m_flCycle, 0.350050, 0.591000) 
                and between(resolver.cache.animlayer[ent][6].m_flPrevCycle, 0.350050, 0.350150))) 
                or (between(resolver.cache.resolver_pattern_yaw[ent], 10.76, 10.94))) 
                and resolver.data[ent].props['lowdelta'] then
                
                resolver.data[ent]['animlayer']['fake_yaw'] = 25
            elseif resolver.data[ent].props['lowdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 40
            end
        elseif resolver.data[ent]['animlayer']['eye_yaw'] then
            if resolver.data[ent].props['highdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 60
            elseif (between(anim_layer6.m_flCycle, 0.500090, 0.500100) 
                and between(resolver.cache.resolver_pattern_yaw[ent], 103.7, 104.5)) 
                and resolver.data[ent].props['lowdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 45
            elseif (((between(anim_layer6.m_flCycle, 0.350050, 0.350150) 
                and between(resolver.cache.animlayer[ent][6].m_flPrevCycle, 0.500050, 0.591000)) 
                or (between(anim_layer6.m_flCycle, 0.350050, 0.591000) 
                    and between(resolver.cache.animlayer[ent][6].m_flPrevCycle, 0.350050, 0.350150))) 
                and between(resolver.cache.resolver_pattern_yaw[ent], 2.700, 2.999)) and resolver.data[ent].props['lowdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 25
            elseif resolver.data[ent].props['lowdelta'] then
                resolver.data[ent]['animlayer']['fake_yaw'] = 35
            end
        end

        if (
            ((between(anim_layer3.m_flCycle, 0.00, 0.02) 
                or between(anim_layer3.m_flCycle, 0.998, 1)) 
                or between(anim_layer3.m_flCycle, 0.5548, 0.5558))
            ) then
            resolver.data[ent]['animlayer']['eye_yaw'] = true
            resolver.data[ent]['animlayer']['is_desync'] = true
            resolver.data[ent].antiaim['eye_yaw'] = true
            if (
                (between(anim_layer6.m_flWeight, 0.003, 0.008) 
                    and between(anim_layer6.m_flCycle, 0, 1) 
                    and anim_layer6.m_flPlaybackRate*1000 > 0.000) or
                    (between(resolver.cache.resolver_pattern_yaw[ent], 109.5, 109.8))
                ) then
                resolver.data[ent].props['highdelta'] = true
                resolver.data[ent].props['lowdelta'] = false
            elseif (anim_layer3.m_flWeight == 1 and between(anim_layer3.m_flCycle, 0.0, 0.7)
                    and not between(anim_layer6.m_flWeight, 0.003, 0.008)              
                    and not between(records[2].animlayer[6].m_flWeight, 0.003, 0.008)              
                    and not between(records[3].animlayer[6].m_flWeight, 0.003, 0.008)              
                    and not between(records[4].animlayer[6].m_flWeight, 0.003, 0.008)              
                    and not between(records[5].animlayer[6].m_flWeight, 0.003, 0.008)              
                    and not between(records[6].animlayer[6].m_flWeight, 0.003, 0.008)              
                    and not between(records[7].animlayer[6].m_flWeight, 0.003, 0.008)              
                    and not between(records[8].animlayer[6].m_flWeight, 0.003, 0.008)
                    and (anim_layer6.m_flPlaybackRate*1000 > 0.000)
                ) then
                resolver.data[ent].props['highdelta'] = false
                resolver.data[ent].props['lowdelta'] = true
            else
                resolver.data[ent].props['highdelta'] = false
                resolver.data[ent].props['lowdelta'] = false
            end
        elseif resolver.data[ent]['animlayer']['eye_yaw'] then
            resolver.data[ent]['animlayer']['eye_yaw'] = false
            resolver.data[ent].antiaim['eye_yaw'] = false
        end

        if (
            (between(anim_layer3.m_flWeight, 0.042, 0.044) 
                and between(anim_layer3.m_flCycle, 0.005, 0.020) or
                ((resolver.cache.animlayer[ent][3].m_flPrevCycle > 0.92 
                    and anim_layer3.m_flCycle > 0.92 and anim_layer3.m_flWeight == 0)) 
                and between(anim_layer3.m_flWeightDeltaRate, 2.68, 2.69)) or
                (between(resolver.cache.resolver_pattern_yaw[ent], 108.0, 108.5))
            ) and not resolver.data[ent]['animlayer']['eye_yaw'] then
            resolver.data[ent].antiaim['extended'] = true
            resolver.data[ent].props['highdelta'] = false
            resolver.data[ent].props['lowdelta'] = true
            resolver.data[ent]['animlayer']['is_desync'] = true
        elseif (
            (anim_layer3.m_flWeight == 0 and anim_layer3.m_flCycle == 0) or
                (between(anim_layer6.m_flWeight, 0.0039, 0.008) or between(resolver.cache.resolver_pattern_yaw[ent], 111.0, 111.6)) and 
                (between(anim_layer3.m_flWeightDeltaRate, 2.68, 2.69) and not resolver.data[ent]['animlayer']['eye_yaw'])
            ) then
            resolver.data[ent].antiaim['extended'] = true
            resolver.data[ent].props['highdelta'] = true
            resolver.data[ent].props['lowdelta'] = false
            resolver.data[ent]['animlayer']['is_desync'] = true
        elseif (anim_layer3.m_flWeight == 0 and between(anim_layer3.m_flCycle, 0.986, 1) and anim_layer3.m_flWeightDeltaRate == 0) and not resolver.data[ent]['animlayer']['eye_yaw'] then
            resolver.data[ent].antiaim['extended'] = false
            resolver.data[ent]['animlayer']['is_desync'] = false
            resolver.data[ent].props['highdelta'] = false
            resolver.data[ent].props['lowdelta'] = false
        elseif between(anim_layer3.m_flWeight, 0.042, 0.044) and between(anim_layer3.m_flCycle, 0.012, 0.013) and not resolver.data[ent]['animlayer']['eye_yaw'] then
            resolver.data[ent]['animlayer']['is_desync'] = true
        elseif between(resolver.cache.animlayer[ent][6].m_flPrevWeight, 0.002, 0.005) and between(resolver.cache.resolver_pattern_yaw[ent], 106.0, 108.0) and anim_layer3.m_flWeight == 0 and resolver.cache.animlayer[ent][3].m_flPrevWeight == 0 then
            resolver.data[ent].antiaim['extended'] = false
            resolver.data[ent].props['highdelta'] = false
            resolver.data[ent].props['lowdelta'] = true
            resolver.data[ent]['animlayer']['is_desync'] = true
        end
    end
end

function resolver.count_packets(ent)
    local choked_packets = resolver.data[ent].props['m_flChokedPackets'] or 0

    if (resolver.data[ent].props['m_flVelocity2D'] > 0 and resolver.data[ent].props['should_resolve']) then
        return
    end

    if choked_packets == resolver.data[ent].props['pref_packet'] then
        resolver.data[ent].props['clean_packets'] = resolver.data[ent].props['clean_packets'] + 1
    else
        resolver.data[ent].props['bad_packets'] = resolver.data[ent].props['bad_packets'] + 1
    end
    resolver.data[ent].props['pref_packet'] = choked_packets

    if (resolver.data[ent].props['clean_packets'] > 3 and not resolver.data[ent]['animlayer']['is_desync']) or resolver.data[ent].props['clean_packets'] > 4 then
        resolver.data[ent].props['clean_packets'] = 0
        resolver.data[ent].props['bad_packets'] = 0
        resolver.data[ent].props['should_resolve'] = false
    elseif (resolver.data[ent].props['bad_packets'] > 10 and resolver.data[ent]['animlayer']['is_desync']) or
        (resolver.data[ent].antiaim['mode'] == 'Rage' and resolver.data[ent].props['bad_packets'] > 10) or
        resolver.data[ent].props['bad_packets'] > 16 then
        resolver.data[ent].props['bad_packets'] = 0
        resolver.data[ent].props['clean_packets'] = 0
        resolver.data[ent].props['should_resolve'] = true
    end
end

function resolver.get_props(ent)
    local vec_velocity = {entity.get_prop(ent, "m_vecVelocity")}
    local anim_state = animstate(ent)
    local anim_layer6 = get_animlayer(ent, 6)

    local eye_yaw = resolver.data[ent].props['m_flEyeYaw']
    local goal_feet_yaw = resolver.data[ent].props['m_flGoalFeetYaw']
    local simtime = resolver.data[ent].props['m_flSimulationTime']

    resolver.data[ent].props['m_flSimulationTime'] = entity.get_prop(ent, "m_flSimulationTime")
    resolver.data[ent].props['m_flOldSimulationTime'] = simtime or entity.get_prop(ent, "m_flSimulationTime")
    resolver.data[ent].props['m_flChokedPackets'] = resolver.data[ent].props['m_flSimulationTime'] == resolver.data[ent].props['m_flOldSimulationTime'] and resolver.data[ent].props['m_flChokedPackets'] + 1 or 0
    resolver.data[ent].props['m_flVelocity2D'] = math.abs(math.sqrt(vec_velocity[1]^2+vec_velocity[2]^2))
    resolver.data[ent].props['m_angEyeAngles'] = vector(entity.get_prop(ent, "m_angEyeAngles[0]"), entity.get_prop(ent, "m_angEyeAngles[1]"), 0)
    resolver.data[ent].props['m_flLowerBodyYawTarget'] = entity.get_prop(ent, "m_flLowerBodyYawTarget")
    resolver.data[ent].props['m_flLowerBodyDelta'] = normalize_yaw(resolver.data[ent].props['m_flLowerBodyYawTarget']-resolver.data[ent].props['m_angEyeAngles'].y)
    resolver.data[ent].props['m_flLowerBodyYawMoving'] = resolver.data[ent].props['m_flVelocity2D'] > 0 and resolver.data[ent].props['m_flLowerBodyYawTarget'] or resolver.data[ent].props['m_flLowerBodyYawMoving']
    resolver.data[ent].props['m_flLowerBodyYawStanding'] = resolver.data[ent].props['m_flVelocity2D'] == 0 and resolver.data[ent].props['m_flLowerBodyYawTarget'] or resolver.data[ent].props['m_flLowerBodyYawStanding']
    resolver.data[ent].props['m_flEyeYaw'] = normalize_yaw(anim_state.m_flEyeYaw)
    resolver.data[ent].props['m_flOldEyeYaw'] = eye_yaw
    resolver.data[ent].props['m_flGoalFeetYaw'] = anim_state.m_flGoalFeetYaw
    resolver.data[ent].props['m_flOldGoalFeetYaw'] = goal_feet_yaw
    resolver.data[ent].props['m_flGoalFeetDelta'] = normalize_yaw(resolver.data[ent].props['m_flGoalFeetYaw']-resolver.data[ent].props['m_flEyeYaw'])
    resolver.data[ent].props['m_flCurrentFeetYaw'] = normalize_yaw(anim_state.m_flCurrentFeetYaw)
    resolver.data[ent].antiaim['mode'] = math.abs(resolver.data[ent].props['m_angEyeAngles'].x) >= 75 and 'Rage' or 'Legit'
end

-- Initialize training and running states
local train_l, train_r, auto_train, run = {running = false, count = 0}, {running = false, count = 0}, {running = false, count = 0}, {running = false, count = 0}

local function on_net_update()
	local lp = entity.get_local_player()
	-- Get a list of enemies
	local enemies = entity.get_players(true)

	-- Iterate over each enemy
	for i=1, #enemies do
		local ent = enemies[i]
		-- Skip dead players
		if not entity.is_alive(ent) or not entity.is_alive(lp) then
			return
		end

		resolver.data[ent] = resolver.data[ent] or resolver.set_round_data()
		resolver.get_props(ent);
		resolver.update_player_record_data(ent);
		resolver.count_packets(ent)
	    resolver.animlayer_preference(ent, 3)
		resolver.animlayer_preference(ent, 6)
		resolver.get_delta_size(ent)
	end
end
client.set_event_callback("net_update_end", on_net_update)

local function on_event_reset(e)
	if e then
		local userid = e.userid

		if not userid then
			resolver.data = {}
			return
		end

		local ent = client.userid_to_entindex(userid)
		local entity_id = client.userid_to_entindex(userid)
		local attacker_id = client.userid_to_entindex(e.attacker)
		local me = entity.get_local_player()
		resolver.data = ent == me and {} or resolver.data
		
		return
	end
	resolver.data = {}
end
client.set_event_callback('player_spawned', on_event_reset, e)
client.set_event_callback("round_start", on_event_reset)

-- Handle entities - called at the start of every network update
local function handle_entities()
	if not run.running then return end

	local lp = entity.get_local_player()
	local use_lp = contains(ui.get(options_multibox), 'Use local player')
	
	-- Get a list of enemies
	local enemies = use_lp and {lp} or entity.get_players(true)

	-- Iterate over each enemy
	for i=1, #enemies do
		local ent = enemies[i] or lp
		-- Skip dead players
		if not entity.is_alive(ent) or not entity.is_alive(lp) then
			return
		end

		-- Get animation layer and velocity properties of the enemy
		local anim_layer_6 = get_animlayer(ent, 6)
		local velocity = { entity.get_prop(ent, "m_vecVelocity") }

		-- Normalize and round velocity
		local m_flVelocity2D = normalize(math.sqrt(velocity[1]^2+velocity[2]^2), 0, 260)

		-- Calculate playback rate and round it
		local m_flPlaybackRate = anim_layer_6.m_flPlaybackRate*mul
		--m_flPlaybackRate = round(tonumber(tostring(m_flPlaybackRate):sub(5,#tostring(m_flPlaybackRate))), 6)
		if m_flPlaybackRate == nil then return end
		animlayer_average_t[ent] = animlayer_average_t[ent] or {m_flPlaybackRate}
		insert_first_index(animlayer_average_t[ent], m_flPlaybackRate, 18)
		local pbr = normalize(average(animlayer_average_t[ent]), 0, 21973819.471897)
		animlayer_rec_t[ent] = pbr
		velocity_rec_t[ent] = m_flVelocity2D	
	end
end

-- Set up event callback to handle entities at the start of each network update
client.set_event_callback('net_update_start', handle_entities)

-- Function to run the neural network
local function run_nn()
	if not run.running then return end  -- Exit if not in running state
	log("Running Neural Network...")
	
	local use_lp = contains(ui.get(options_multibox), 'Use local player')
	
	-- Get a list of enemies
	local enemies = use_lp and {entity.get_local_player()} or entity.get_players(true)

	-- Iterate over each enemy
	for i=1, #enemies do
		local ent = enemies[i]

		-- Retrieve the recorded properties for the enemy
		local m_flVelocity2D = get_velocity_rec(ent)
		local m_flPlaybackRate = get_animlayer_rec(ent)
		if m_flPlaybackRate == nil then return end
		-- Convert the properties to binary representation
		local bin_pbr = bin_value(m_flPlaybackRate, binary_size)
		local bin_vel = bin_value(m_flVelocity2D, binary_size)

		-- Combine the binary representations into a single table
		local t = bin_pbr
		for i=1, #bin_vel do
			table.insert(t, bin_vel[i])
		end
		--local t = {m_flPlaybackRate, m_flVelocity2D}
		-- Run the forward propagation of the neural network on the combined input
		local forward = nn_network:forewardPropagate( t )[1]

		-- Apply the neural network's decision to the enemy
		if resolver.data[ent] then
			if resolver.data[ent].props['should_resolve'] then
				local desync_val = (not resolver.data[ent].antiaim['extended'] and not resolver.data[ent].props['highdelta']) and 60 or 35
				plylist.SetCorrection(ent, true)
				plylist.SetForceBodyYawCheckbox(ent, true)
				plylist.SetBodyYaw(ent, (forward < 0.5 and -desync_val or desync_val))
			elseif plylist.GetCorrection(ent) then
				plylist.SetCorrection(ent, false)
				plylist.SetForceBodyYawCheckbox(ent, false)
			end
		end

		-- Print the results for debugging
		log(table.concat(t, '') .. "\nm_flPlaybackRate: " .. m_flPlaybackRate .." | side: " .. (forward < 0.5 and 'left' or 'right').. ' | forewardPropagate: ' ..forward)
	end

	-- Schedule the next run of the neural network
	client.delay_call(ui.get(repeat_speed)/10, run_nn)
end

ui.set_callback(options_multibox, function(obj)
	local enabled = contains(ui.get(options_multibox), 'Enable')
	if enabled and not run.running then
		run.running = true
		run_nn()
		if not train_l.running and not train_r.running then
			client.set_event_callback('paint_ui', render_nn)
		end
	elseif run.running and not enabled then
		run.running = false
		if not train_l.running and not train_r.running then
			client.unset_event_callback('paint_ui', render_nn)
		end
	end
end)

nn_network = NeuralNetwork.load(nn_preset)